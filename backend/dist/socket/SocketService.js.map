{"version":3,"file":"SocketService.js","sourceRoot":"","sources":["../../src/socket/SocketService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Server, Socket } from 'socket.io';\r\nimport { EventEmitter } from 'events';\r\nimport mongoose from 'mongoose';\r\nimport logger from '../core/Utils/Logger.js';\r\nimport { ContactRepository } from '../Modules/Contact/Repositry/ContactRepositry.js';\r\nimport { GroupRepository } from '../Modules/Group/Repositry/GroupRepositry.js';\r\nimport { ChatRepository } from '../Modules/Chat/Repositry/ChatRepositry.js';\r\nimport { UserRepository } from '../Modules/Auth/Repositry/UserRepositry.js';\r\nimport { NotificationService, TaskNotificationPayload } from '../Modules/Notification/Service/NotificationService.js';\r\nimport Group from '../models/group.model.js';\r\nimport Collaboration from '../models/collaboration.js';\r\nimport UserConnection from '../models/userConnection.modal.js';\r\n\r\ninterface CallOffer {\r\n  senderId: string;\r\n  targetId: string;\r\n  type: string;\r\n  chatKey: string;\r\n  callType: 'audio' | 'video';\r\n  recipientIds: string[];\r\n  endTimeout: NodeJS.Timeout;\r\n}\r\n\r\ninterface Message {\r\n  senderId: string;\r\n  targetId: string;\r\n  type: 'group' | 'user-mentor' | 'user-user';\r\n  content: string;\r\n  contentType?: string;\r\n  collaborationId?: string;\r\n  userConnectionId?: string;\r\n  groupId?: string;\r\n  _id?: string;\r\n  thumbnailUrl?: string;\r\n  fileMetadata?: { fileName: string; fileSize: number; mimeType: string };\r\n}\r\n\r\ninterface TypingData {\r\n  userId: string;\r\n  targetId: string;\r\n  type: 'group' | 'user-mentor' | 'user-user';\r\n  chatKey: string;\r\n}\r\n\r\ninterface MarkAsReadData {\r\n  chatKey: string;\r\n  userId: string;\r\n  type: 'group' | 'user-mentor' | 'user-user';\r\n}\r\n\r\ninterface CallData {\r\n  userId: string;\r\n  targetId: string;\r\n  type: string;\r\n  chatKey: string;\r\n  callType: 'audio' | 'video';\r\n  offer?: RTCSessionDescriptionInit;\r\n  answer?: RTCSessionDescriptionInit;\r\n  candidate?: RTCIceCandidateInit;\r\n}\r\n\r\nexport class SocketService {\r\n  private io: Server | null = null;\r\n  private notificationEmitter: EventEmitter = new EventEmitter();\r\n  private sentNotifications: Set<string> = new Set();\r\n  private activeOffers: Map<string, CallOffer> = new Map();\r\n  private endedCalls: Set<string> = new Set();\r\n  private activeChats: Map<string, string> = new Map(); // userId -> chatKey\r\n  private contactsRepo: ContactRepository;\r\n  private groupRepo: GroupRepository;\r\n  private chatRepo: ChatRepository;\r\n  private userRepo: UserRepository;\r\n  private notificationService: NotificationService;\r\n\r\n  constructor() {\r\n    this.contactsRepo = new ContactRepository();\r\n    this.groupRepo = new GroupRepository();\r\n    this.chatRepo = new ChatRepository();\r\n    this.userRepo = new UserRepository();\r\n    this.notificationService = new NotificationService();\r\n  }\r\n\r\n  public initialize(io: Server): void {\r\n    this.io = io;\r\n    this.notificationService.initializeSocket(io);\r\n    logger.info('Socket.IO server initialized');\r\n\r\n    // Subscribe to task notifications\r\n    this.notificationEmitter.on('notification', (notification: TaskNotificationPayload) => {\r\n      this.emitTaskNotification(notification);\r\n    });\r\n\r\n    this.io.on('connection', (socket: Socket) => {\r\n      this.handleConnection(socket);\r\n    });\r\n  }\r\n\r\n  private handleConnection(socket: Socket): void {\r\n    const userId = socket.handshake.auth.userId as string;\r\n    socket.data.userId = userId;\r\n    logger.info(`New client connected: socketId=${socket.id}, userId=${userId}, auth=${JSON.stringify(socket.handshake.auth)}`);\r\n\r\n    socket.on('joinChats', (userId: string) => this.handleJoinChats(socket, userId));\r\n    socket.on('joinUserRoom', (userId: string) => this.handleJoinUserRoom(socket, userId));\r\n    socket.on('activeChat', (data: { userId: string; chatKey: string }) => this.handleActiveChat(data));\r\n    socket.on('sendMessage', (message: Message) => this.handleSendMessage(socket, message));\r\n    socket.on('typing', (data: TypingData) => this.handleTyping(socket, data));\r\n    socket.on('stopTyping', (data: TypingData) => this.handleStopTyping(socket, data));\r\n    socket.on('markAsRead', (data: MarkAsReadData) => this.handleMarkAsRead(socket, data));\r\n    socket.on('offer', (data: CallData) => this.handleOffer(socket, data));\r\n    socket.on('answer', (data: CallData) => this.handleAnswer(socket, data));\r\n    socket.on('ice-candidate', (data: CallData) => this.handleIceCandidate(socket, data));\r\n    socket.on('callEnded', (data: CallData) => this.handleCallEnded(socket, data));\r\n    socket.on('notification.read', (data: { notificationId: string; userId: string }) => this.handleNotificationRead(socket, data));\r\n    socket.on('leaveChat', (userId: string) => this.handleLeaveChat(userId));\r\n    socket.on('disconnect', () => this.handleDisconnect(socket));\r\n  }\r\n\r\n  private async handleJoinChats(socket: Socket, userId: string): Promise<void> {\r\n    try {\r\n      const contacts = await this.contactsRepo.findContactsByUserId(userId);\r\n      const rooms = Array.from(\r\n        new Set(\r\n          contacts\r\n            .map((contact) => {\r\n              if (contact.type === 'group' && contact.groupId) {\r\n                return `group_${contact.groupId._id.toString()}`;\r\n              } else if (contact.userId && contact.targetUserId) {\r\n                const ids = [contact.userId._id.toString(), contact.targetUserId._id.toString()].sort();\r\n                return `chat_${ids[0]}_${ids[1]}`;\r\n              }\r\n              return null;\r\n            })\r\n            .filter(Boolean)\r\n        )\r\n      ) as string[];\r\n\r\n      socket.join(rooms);\r\n      logger.info(`User ${userId} joined rooms: ${rooms.join(', ')}`);\r\n    } catch (error: any) {\r\n      logger.error(`Error joining chats for user ${userId}: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to join chats' });\r\n    }\r\n  }\r\n\r\n  private handleJoinUserRoom(socket: Socket, userId: string): void {\r\n    socket.join(`user_${userId}`);\r\n    logger.info(`User ${userId} joined personal room: user_${userId}, socketId=${socket.id}`);\r\n  }\r\n\r\n  private handleActiveChat(data: { userId: string; chatKey: string }): void {\r\n    const { userId, chatKey } = data;\r\n    this.activeChats.set(userId, chatKey);\r\n    logger.info(`User ${userId} set active chat: ${chatKey}`);\r\n  }\r\n\r\n  private async handleSendMessage(socket: Socket, message: Message): Promise<void> {\r\n    try {\r\n      const { senderId, targetId, type, content, contentType = 'text', collaborationId, userConnectionId, groupId, _id } = message;\r\n\r\n      if (!senderId || !targetId || !type || !content) {\r\n        logger.error(`Missing required fields in message: ${JSON.stringify(message)}`);\r\n        socket.emit('error', { message: 'Missing required fields' });\r\n        return;\r\n      }\r\n\r\n      const timestamp = new Date();\r\n      const timestampString = timestamp.toISOString();\r\n      let room: string;\r\n      let savedMessage: any;\r\n\r\n      const senderObjectId = new mongoose.Types.ObjectId(senderId);\r\n\r\n      if (contentType === 'text') {\r\n        if (type === 'group') {\r\n          const group = await this.groupRepo.getGroupById(targetId);\r\n          if (!group) {\r\n            logger.error(`Invalid group ID: ${targetId}`);\r\n            socket.emit('error', { message: 'Invalid group ID' });\r\n            return;\r\n          }\r\n          const isMember = await this.groupRepo.isUserInGroup(targetId, senderId);\r\n          if (!isMember) {\r\n            logger.error(`Sender not in group: senderId=${senderId}, groupId=${targetId}`);\r\n            socket.emit('error', { message: 'Sender not in group' });\r\n            return;\r\n          }\r\n          room = `group_${targetId}`;\r\n          savedMessage = await this.chatRepo.saveChatMessage({\r\n            senderId: senderObjectId,\r\n            groupId: new mongoose.Types.ObjectId(groupId || targetId),\r\n            content,\r\n            contentType,\r\n            timestamp,\r\n            isRead: false,\r\n            status: 'sent',\r\n          });\r\n        } else {\r\n          const contact = await this.contactsRepo.findContactByUsers(senderId, targetId);\r\n          if (!contact || !contact._id) {\r\n            logger.error(`Invalid contact for sender: ${senderId}, target: ${targetId}`);\r\n            socket.emit('error', { message: 'Invalid contact' });\r\n            return;\r\n          }\r\n          const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n          savedMessage = await this.chatRepo.saveChatMessage({\r\n            senderId: senderObjectId,\r\n            ...(type === 'user-mentor' && {\r\n              collaborationId: new mongoose.Types.ObjectId(collaborationId || contact.collaborationId?.toString()),\r\n            }),\r\n            ...(type === 'user-user' && {\r\n              userConnectionId: new mongoose.Types.ObjectId(userConnectionId || contact.userConnectionId?.toString()),\r\n            }),\r\n            content,\r\n            contentType,\r\n            timestamp,\r\n            isRead: false,\r\n            status: 'sent',\r\n          });\r\n        }\r\n      } else {\r\n        savedMessage = {\r\n          _id: _id || new mongoose.Types.ObjectId(),\r\n          ...message,\r\n          timestamp,\r\n        };\r\n        if (!_id) {\r\n          logger.error(`Non-text message requires saved message _id: ${JSON.stringify(message)}`);\r\n          socket.emit('error', { message: 'Non-text message requires saved message _id' });\r\n          return;\r\n        }\r\n        savedMessage = await this.chatRepo.findChatMessageById(_id);\r\n        if (!savedMessage) {\r\n          logger.error(`Invalid message ID for non-text message: ${_id}`);\r\n          socket.emit('error', { message: 'Invalid message ID' });\r\n          return;\r\n        }\r\n        if (type === 'group') {\r\n          room = `group_${targetId}`;\r\n        } else {\r\n          const contact = await this.contactsRepo.findContactByUsers(senderId, targetId);\r\n          const ids = [contact?.userId.toString(), contact?.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n        }\r\n      }\r\n\r\n      let recipientIds: string[] = [];\r\n      let chatKey: string | null = null;\r\n\r\n      if (savedMessage.groupId) {\r\n        chatKey = `group_${savedMessage.groupId.toString()}`;\r\n        const group = await Group.findById(savedMessage.groupId);\r\n        if (group) {\r\n          recipientIds = group.members\r\n            .filter((member) => member.userId.toString() !== senderId)\r\n            .map((member) => member.userId.toString());\r\n        }\r\n      } else if (savedMessage.collaborationId) {\r\n        chatKey = `user-mentor_${savedMessage.collaborationId.toString()}`;\r\n        const collab = await Collaboration.findById(savedMessage.collaborationId);\r\n        if (collab) {\r\n          recipientIds = [\r\n            collab.userId.toString() === senderId ? collab.mentorId.toString() : collab.userId.toString(),\r\n          ];\r\n        }\r\n      } else if (savedMessage.userConnectionId) {\r\n        chatKey = `user-user_${savedMessage.userConnectionId.toString()}`;\r\n        const connection = await UserConnection.findById(savedMessage.userConnectionId);\r\n        if (connection) {\r\n          recipientIds = [\r\n            connection.requester.toString() === senderId ? connection.recipient.toString() : connection.requester.toString(),\r\n          ];\r\n        }\r\n      }\r\n\r\n      if (chatKey && recipientIds.length > 0 && this.io) {\r\n        const socketsInRoom = await this.io.in(room).allSockets();\r\n        const connectedUserIds = new Set<string>();\r\n        for (const socketId of socketsInRoom) {\r\n          const s = this.io.sockets.sockets.get(socketId);\r\n          if (s && s.data.userId) {\r\n            connectedUserIds.add(s.data.userId);\r\n          }\r\n        }\r\n\r\n        for (const recipientId of recipientIds) {\r\n          try {\r\n            const notification = await this.notificationService.sendNotification(\r\n              recipientId,\r\n              'message',\r\n              senderId,\r\n              chatKey,\r\n              contentType\r\n            );\r\n            logger.info(`Emitted via notification emitter to user_${recipientId}: ${notification._id}`);\r\n          } catch (error: any) {\r\n            logger.warn(`Failed to send notification to user ${recipientId}: ${error.message}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!savedMessage) {\r\n        logger.error(`Failed to save message: ${JSON.stringify(message)}`);\r\n        socket.emit('error', { message: 'Failed to save message' });\r\n        return;\r\n      }\r\n\r\n      const messageData = {\r\n        senderId,\r\n        targetId,\r\n        type,\r\n        content,\r\n        contentType,\r\n        thumbnailUrl: savedMessage.thumbnailUrl,\r\n        fileMetadata: savedMessage.fileMetadata,\r\n        ...(type === 'group' && { groupId: groupId || targetId }),\r\n        ...(type === 'user-mentor' && { collaborationId: collaborationId || savedMessage?.collaborationId?.toString() }),\r\n        ...(type === 'user-user' && { userConnectionId: userConnectionId || savedMessage?.userConnectionId?.toString() }),\r\n        timestamp: timestampString,\r\n        _id: savedMessage._id,\r\n        status: savedMessage.status,\r\n        isRead: savedMessage.isRead || false,\r\n      };\r\n\r\n      socket.broadcast.to(room).emit('receiveMessage', messageData);\r\n      socket.emit('messageSaved', messageData);\r\n      logger.info(`Message broadcasted to room ${room}: ${JSON.stringify(messageData)}`);\r\n    } catch (error: any) {\r\n      logger.error(`Error sending message: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to send message' });\r\n    }\r\n  }\r\n\r\n  private handleTyping(socket: Socket, data: TypingData): void {\r\n    const { userId, targetId, type, chatKey } = data;\r\n    let room: string;\r\n    if (type === 'group') {\r\n      room = `group_${targetId}`;\r\n    } else {\r\n      const ids = [userId, targetId].sort();\r\n      room = `chat_${ids[0]}_${ids[1]}`;\r\n    }\r\n    socket.broadcast.to(room).emit('typing', { userId, chatKey });\r\n    logger.info(`Broadcasting typing to room ${room}: userId=${userId}, chatKey=${chatKey}`);\r\n  }\r\n\r\n  private handleStopTyping(socket: Socket, data: TypingData): void {\r\n    const { userId, targetId, type, chatKey } = data;\r\n    let room: string;\r\n    if (type === 'group') {\r\n      room = `group_${targetId}`;\r\n    } else {\r\n      const ids = [userId, targetId].sort();\r\n      room = `chat_${ids[0]}_${ids[1]}`;\r\n    }\r\n    socket.to(room).emit('stopTyping', { userId, chatKey });\r\n    logger.info(`Broadcasting stopTyping to room ${room}: userId=${userId}, chatKey=${chatKey}`);\r\n  }\r\n\r\n  private async handleMarkAsRead(socket: Socket, data: MarkAsReadData): Promise<void> {\r\n    try {\r\n      const { chatKey, userId, type } = data;\r\n      const updatedMessages = await this.chatRepo.markMessagesAsRead(chatKey, userId, type);\r\n      const notifications = await this.notificationService.getNotifications(userId);\r\n      const messageNotifications = notifications.filter(\r\n        (n) => n.type === 'message' && n.relatedId === chatKey && n.status === 'unread'\r\n      );\r\n\r\n      for (const notification of messageNotifications) {\r\n        const updatedNotification = await this.notificationService.markNotificationAsRead(notification._id.toString());\r\n        if (updatedNotification && this.io) {\r\n          this.io.to(`user_${userId}`).emit('notification.read', { notificationId: notification._id });\r\n        }\r\n      }\r\n\r\n      let room: string;\r\n      if (type === 'group') {\r\n        room = `group_${chatKey.replace('group_', '')}`;\r\n      } else {\r\n        const contact = await this.contactsRepo.findContactByUsers(userId, chatKey.replace(/^(user-mentor_|user-user_)/, ''));\r\n        const ids = [contact?.userId.toString(), contact?.targetUserId?.toString()].sort();\r\n        room = `chat_${ids[0]}_${ids[1]}`;\r\n      }\r\n\r\n      this.io?.to(room).emit('messagesRead', { chatKey, userId, messageIds: updatedMessages });\r\n      logger.info(`Marked messages as read for user ${userId} in chat ${chatKey}`);\r\n    } catch (error: any) {\r\n      logger.error(`Error marking messages as read: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to mark messages as read' });\r\n    }\r\n  }\r\n\r\n  private async handleOffer(socket: Socket, data: CallData): Promise<void> {\r\n    try {\r\n      const { userId, targetId, type, chatKey, offer, callType } = data;\r\n      logger.info(`Received ${callType} offer from ${userId} for chatKey: ${chatKey}`);\r\n      let room: string;\r\n      let recipientIds: string[] = [];\r\n\r\n      if (type === 'group') {\r\n        room = `group_${targetId}`;\r\n        const group = await this.groupRepo.getGroupById(targetId);\r\n        if (!group) {\r\n          logger.error(`Invalid group ID: ${targetId}`);\r\n          socket.emit('error', { message: 'Invalid group ID' });\r\n          return;\r\n        }\r\n        recipientIds = group.members\r\n          .filter((member) => member.userId.toString() !== userId)\r\n          .map((member) => member.userId.toString());\r\n      } else {\r\n        const contact = await this.contactsRepo.findContactByUsers(userId, targetId);\r\n        if (!contact) {\r\n          logger.error(`Invalid contact for offer: userId=${userId}, targetId=${targetId}`);\r\n          socket.emit('error', { message: 'Invalid contact' });\r\n          return;\r\n        }\r\n        const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n        room = `chat_${ids[0]}_${ids[1]}`;\r\n        recipientIds = [targetId];\r\n      }\r\n\r\n      const sender = await this.userRepo.findById(userId);\r\n      socket.broadcast.to(room).emit('offer', {\r\n        userId,\r\n        targetId,\r\n        type,\r\n        chatKey,\r\n        offer,\r\n        callType,\r\n        senderName: sender?.name,\r\n      });\r\n\r\n      const callId = `${chatKey}_${Date.now()}`;\r\n      const socketsInRoom = await this.io?.in(room).allSockets();\r\n      const connectedUserIds = new Set<string>();\r\n      if (socketsInRoom) {\r\n        for (const socketId of socketsInRoom) {\r\n          const s = this.io?.sockets.sockets.get(socketId);\r\n          if (s && s.data.userId) {\r\n            connectedUserIds.add(s.data.userId);\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const recipientId of recipientIds) {\r\n        try {\r\n          const notification = await this.notificationService.sendNotification(\r\n            recipientId,\r\n            'incoming_call',\r\n            userId,\r\n            chatKey,\r\n            callType,\r\n            callId\r\n          );\r\n          logger.info(`Created call notification for user ${recipientId}: ${notification._id}`);\r\n        } catch (error: any) {\r\n          logger.warn(`Failed to send call notification to user ${recipientId}: ${error.message}`);\r\n        }\r\n      }\r\n\r\n      const endTimeout = setTimeout(async () => {\r\n        const call = this.activeOffers.get(callId);\r\n        if (!call) return;\r\n\r\n        const socketsInRoom = await this.io?.in(room).allSockets();\r\n        const connectedUserIds = new Set<string>();\r\n        if (socketsInRoom) {\r\n          for (const socketId of socketsInRoom) {\r\n            const s = this.io?.sockets.sockets.get(socketId);\r\n            if (s && s.data.userId) {\r\n              connectedUserIds.add(s.data.userId);\r\n            }\r\n          }\r\n        }\r\n\r\n        for (const recipientId of recipientIds) {\r\n          if (!connectedUserIds.has(recipientId)) {\r\n            const notification = await this.notificationService.updateCallNotificationToMissed(\r\n              recipientId,\r\n              callId,\r\n              `Missed ${callType} call from ${userId}`\r\n            );\r\n            if (notification && this.io) {\r\n              this.io.to(`user_${recipientId}`).emit('notification.updated', notification);\r\n            } else {\r\n              logger.info(`No incoming call notification found for call ${callId}, creating new`);\r\n              const newNotification = await this.notificationService.sendNotification(\r\n                recipientId,\r\n                'missed_call',\r\n                userId,\r\n                chatKey,\r\n                callType,\r\n                callId\r\n              );\r\n              logger.info(`Emitted notification.new to user_${recipientId}: ${newNotification._id}`);\r\n            }\r\n          }\r\n        }\r\n\r\n        socket.to(room).emit('callEnded', { userId, targetId, type, chatKey, callType });\r\n        socket.emit('callEnded', { userId, targetId, type, chatKey, callType });\r\n        this.activeOffers.delete(callId);\r\n      }, 30000);\r\n\r\n      this.activeOffers.set(callId, { senderId: userId, targetId, type, chatKey, callType, recipientIds, endTimeout });\r\n    } catch (error: any) {\r\n      logger.error(`Error broadcasting offer: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to send offer' });\r\n    }\r\n  }\r\n\r\n  private async handleAnswer(socket: Socket, data: CallData): Promise<void> {\r\n    try {\r\n      const { userId, targetId, type, chatKey, answer, callType } = data;\r\n      logger.info(`Received ${callType} answer from ${userId} for chatKey: ${chatKey}`);\r\n      let room: string;\r\n\r\n      if (type === 'group') {\r\n        room = `group_${targetId}`;\r\n      } else {\r\n        const contact = await this.contactsRepo.findContactByUsers(userId, targetId);\r\n        if (!contact) {\r\n          logger.error(`Invalid contact for answer: userId=${userId}, targetId=${targetId}`);\r\n          socket.emit('error', { message: 'Invalid contact' });\r\n          return;\r\n        }\r\n        const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n        room = `chat_${ids[0]}_${ids[1]}`;\r\n      }\r\n\r\n      socket.broadcast.to(room).emit('answer', { userId, targetId, type, chatKey, answer, callType });\r\n\r\n      const callId = Array.from(this.activeOffers.keys()).find(\r\n        (id) => this.activeOffers.get(id)?.chatKey === chatKey && this.activeOffers.get(id)?.senderId === targetId\r\n      );\r\n      if (callId) {\r\n        const call = this.activeOffers.get(callId);\r\n        if (call) {\r\n          clearTimeout(call.endTimeout);\r\n          this.activeOffers.delete(callId);\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      logger.error(`Error broadcasting answer: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to send answer' });\r\n    }\r\n  }\r\n\r\n  private async handleIceCandidate(socket: Socket, data: CallData): Promise<void> {\r\n    try {\r\n      const { userId, targetId, type, chatKey, candidate, callType } = data;\r\n      logger.info(`Received ${callType} ICE candidate from ${userId} for chatKey: ${chatKey}`);\r\n      let room: string;\r\n\r\n      if (type === 'group') {\r\n        room = `group_${targetId}`;\r\n      } else {\r\n        const contact = await this.contactsRepo.findContactByUsers(userId, targetId);\r\n        if (!contact) {\r\n          logger.error(`Invalid contact for ICE candidate: userId=${userId}, targetId=${targetId}`);\r\n          socket.emit('error', { message: 'Invalid contact' });\r\n          return;\r\n        }\r\n        const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n        room = `chat_${ids[0]}_${ids[1]}`;\r\n      }\r\n\r\n      socket.broadcast.to(room).emit('ice-candidate', { userId, targetId, type, chatKey, candidate, callType });\r\n    } catch (error: any) {\r\n      logger.error(`Error broadcasting ICE candidate: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to send ICE candidate' });\r\n    }\r\n  }\r\n\r\n  private async handleCallEnded(socket: Socket, data: CallData): Promise<void> {\r\n    try {\r\n      const { userId, targetId, type, chatKey, callType } = data;\r\n      const callId = `${chatKey}_${Date.now()}`;\r\n      if (this.endedCalls.has(callId)) {\r\n        logger.info(`Ignoring duplicate callEnded for callId: ${callId}, chatKey: ${chatKey}`);\r\n        return;\r\n      }\r\n      logger.info(`Received callEnded from ${userId} for chatKey: ${chatKey}, callType: ${callType}`);\r\n      let room: string;\r\n\r\n      if (type === 'group') {\r\n        room = `group_${targetId}`;\r\n      } else {\r\n        const contact = await this.contactsRepo.findContactByUsers(userId, targetId);\r\n        if (!contact) {\r\n          logger.error(`Invalid contact for callEnded: userId=${userId}, targetId=${targetId}`);\r\n          socket.emit('error', { message: 'Invalid contact' });\r\n          return;\r\n        }\r\n        const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n        room = `chat_${ids[0]}_${ids[1]}`;\r\n      }\r\n\r\n      this.io?.to(room).emit('callEnded', { userId, targetId, type, chatKey, callType });\r\n      this.endedCalls.add(callId);\r\n      setTimeout(() => this.endedCalls.delete(callId), 60000);\r\n\r\n      const callIdToClear = Array.from(this.activeOffers.keys()).find(\r\n        (id) => this.activeOffers.get(id)?.chatKey === chatKey && this.activeOffers.get(id)?.senderId === userId\r\n      );\r\n      if (callIdToClear) {\r\n        const call = this.activeOffers.get(callIdToClear);\r\n        if (call) {\r\n          clearTimeout(call.endTimeout);\r\n          this.activeOffers.delete(callIdToClear);\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      logger.error(`Error handling callEnded: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to end call' });\r\n    }\r\n  }\r\n\r\n  private async handleNotificationRead(socket: Socket, data: { notificationId: string; userId: string }): Promise<void> {\r\n    try {\r\n      const { notificationId, userId } = data;\r\n      const notification = await this.notificationService.markNotificationAsRead(notificationId);\r\n      if (notification && this.io) {\r\n        this.io.to(`user_${userId}`).emit('notification.read', { notificationId });\r\n        logger.info(`Notification marked as read: ${notificationId} for user ${userId}`);\r\n      }\r\n    } catch (error: any) {\r\n      logger.error(`Error handling notification.read: ${error.message}`);\r\n      socket.emit('error', { message: 'Failed to mark notification as read' });\r\n    }\r\n  }\r\n\r\n  private handleLeaveChat(userId: string): void {\r\n    this.activeChats.delete(userId);\r\n    logger.info(`User ${userId} left active chat`);\r\n  }\r\n\r\n  private handleDisconnect(socket: Socket): void {\r\n    logger.info(`User disconnected: socketId=${socket.id}, userId=${socket.data.userId}`);\r\n  }\r\n\r\n  private emitTaskNotification(notification: TaskNotificationPayload): void {\r\n    if (!this.io) {\r\n      logger.error('Socket.IO server not initialized');\r\n      return;\r\n    }\r\n    if (this.sentNotifications.has(notification._id)) {\r\n      logger.info(`Skipping duplicate notification.new: ${notification._id}`);\r\n      return;\r\n    }\r\n    const room = `user_${notification.userId}`;\r\n    this.io.to(room).emit('notification.new', notification);\r\n    this.sentNotifications.add(notification._id);\r\n    logger.info(`Emitted notification.new to user_${notification.userId}: ${notification._id}`);\r\n    setTimeout(() => this.sentNotifications.delete(notification._id), 300 * 1000);\r\n  }\r\n}"]}