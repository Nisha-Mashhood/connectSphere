{"version":3,"file":"socket.js","sourceRoot":"","sources":["../../src/socket/socket.ts"],"names":[],"mappings":"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","sourcesContent":["import { Server, Socket } from \"socket.io\";\r\nimport { EventEmitter } from \"events\";\r\nimport { findContactByUsers, findContactsByUserId } from \"../repositories/contacts.repository.js\";\r\nimport { getGroupsByGroupId, isUserInGroup } from \"../repositories/group.repositry.js\";\r\nimport { findChatMessageById, markMessagesAsRead, saveChatMessage } from \"../repositories/chat.repository.js\";\r\nimport mongoose from \"mongoose\";\r\nimport Group from \"../models/group.model.js\";\r\nimport collaboration from \"../models/collaboration.js\";\r\nimport userConnectionModal from \"../models/userConnection.modal.js\";\r\nimport { getNotifications, initializeNotificationService, markNotificationAsRead, sendNotification, TaskNotificationPayload, updateCallNotificationToMissed } from \"../services/notification.service.js\";\r\nimport { findUserById } from \"../repositories/user.repositry.js\";\r\n\r\nlet io: Server;\r\nexport const notificationEmitter = new EventEmitter();\r\n\r\nconst initializeSocket = (_io: Server) => {\r\n  io = _io;\r\n  // Initialize notification service\r\n  initializeNotificationService(io);\r\n  console.log(\"Socket.IO server initialized\");\r\n\r\n  // Store active call offers with timeouts\r\n  const activeOffers = new Map<\r\n    string,\r\n    {\r\n      senderId: string;\r\n      targetId: string;\r\n      type: string;\r\n      chatKey: string;\r\n      callType: \"audio\" | \"video\";\r\n      recipientIds: string[];\r\n      endTimeout: NodeJS.Timeout;\r\n    }\r\n  >();\r\n  const endedCalls = new Set<string>();\r\n  const activeChats = new Map<string, string>(); // userId -> chatKey\r\n\r\n  // Subscribe to task notifications\r\n  notificationEmitter.on(\"notification\", (notification: TaskNotificationPayload) => {\r\n    emitTaskNotification(notification);\r\n  });\r\n\r\n  io.on(\"connection\", (socket: Socket) => {\r\n    socket.data.userId = socket.handshake.auth.userId;\r\n    socket.on(\"joinChats\", async (userId: string) => {\r\n      try {\r\n        const contacts = await findContactsByUserId(userId);\r\n        const rooms = Array.from(\r\n          new Set(\r\n            contacts.map((contact) => {\r\n              if (contact.type === \"group\" && contact.groupId) {\r\n                return `group_${contact.groupId._id.toString()}`;\r\n              } else if (contact.userId && contact.targetUserId) {\r\n                const ids = [contact.userId._id.toString(), contact.targetUserId._id.toString()].sort();\r\n                return `chat_${ids[0]}_${ids[1]}`;\r\n              }\r\n              return null;\r\n            }).filter(Boolean)\r\n          )\r\n        ) as string[];\r\n\r\n        socket.join(rooms);\r\n        console.log(`User ${userId} joined rooms:`, rooms);\r\n      } catch (error: any) {\r\n        console.error(`Error joining chats for user ${userId}:`, error.message);\r\n      }\r\n    });\r\n\r\n    socket.on(\"joinUserRoom\", (userId: string) => {\r\n      socket.join(`user_${userId}`);\r\n      console.log(`User ${userId} joined personal room: user_${userId}`);\r\n    });\r\n\r\n    socket.on(\"activeChat\", (data: { userId: string; chatKey: string }) => {\r\n      const { userId, chatKey } = data;\r\n      activeChats.set(userId, chatKey);\r\n      console.log(`User ${userId} set active chat: ${chatKey}`);\r\n    });\r\n\r\n    socket.on(\"sendMessage\", async (message: {\r\n      senderId: string;\r\n      targetId: string;\r\n      type: string;\r\n      content: string;\r\n      contentType?: string;\r\n      collaborationId?: string;\r\n      userConnectionId?: string;\r\n      groupId?: string;\r\n      _id?: string;\r\n      thumbnailUrl?: string;\r\n      fileMetadata?: { fileName: string; fileSize: number; mimeType: string };\r\n    }) => {\r\n      try {\r\n        console.log(\"Received sendMessage event:\", message);\r\n        const { senderId, targetId, type, content, contentType = \"text\", collaborationId, userConnectionId, groupId, _id} = message;\r\n\r\n        if (!senderId || !targetId || !type || !content) {\r\n          console.error(\"Missing required fields in message:\", message);\r\n          socket.emit(\"error\", { message: \"Missing required fields\" });\r\n          return;\r\n        }\r\n\r\n        const timestamp = new Date();\r\n        const timestampString = timestamp.toISOString();\r\n        let room: string;\r\n        let savedMessage;\r\n\r\n        const senderObjectId = new mongoose.Types.ObjectId(senderId);\r\n\r\n        if (contentType === \"text\") {\r\n          if (type === \"group\") {\r\n            const group = await getGroupsByGroupId(targetId);\r\n            if (!group) {\r\n              console.error(\"Invalid group ID:\", targetId);\r\n              socket.emit(\"error\", { message: \"Invalid group ID\" });\r\n              return;\r\n            }\r\n            const isMember = await isUserInGroup(targetId, senderId);\r\n            if (!isMember) {\r\n              console.error(\"Sender not in group:\", senderId, targetId);\r\n              socket.emit(\"error\", { message: \"Sender not in group\" });\r\n              return;\r\n            }\r\n            room = `group_${targetId}`;\r\n            savedMessage = await saveChatMessage({\r\n              senderId: senderObjectId,\r\n              groupId: new mongoose.Types.ObjectId(groupId || targetId),\r\n              content,\r\n              contentType,\r\n              timestamp,\r\n              isRead:false,\r\n              status: \"sent\",\r\n            });\r\n          } else {\r\n            const contact = await findContactByUsers(senderId, targetId);\r\n            if (!contact || !contact._id) {\r\n              console.error(\"Invalid contact for sender:\", senderId, \"target:\", targetId);\r\n              socket.emit(\"error\", { message: \"Invalid contact\" });\r\n              return;\r\n            }\r\n            const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n            room = `chat_${ids[0]}_${ids[1]}`;\r\n            savedMessage = await saveChatMessage({\r\n              senderId: senderObjectId,\r\n              ...(type === \"user-mentor\" && { collaborationId: new mongoose.Types.ObjectId(collaborationId || contact.collaborationId?.toString()) }),\r\n              ...(type === \"user-user\" && { userConnectionId: new mongoose.Types.ObjectId(userConnectionId || contact.userConnectionId?.toString()) }),\r\n              content,\r\n              contentType,\r\n              timestamp,\r\n              isRead:false,\r\n              status: 'sent',\r\n            });\r\n          }\r\n        } else {\r\n          savedMessage = { _id: _id || new mongoose.Types.ObjectId(), ...message, timestamp };\r\n          if (!_id) {\r\n            console.error(\"Non-text message requires saved message _id:\", message);\r\n            socket.emit(\"error\", { message: \"Non-text message requires saved message _id\" });\r\n            return;\r\n          }//check sending image vedio and files\r\n\r\n          // Validate the saved message\r\n          savedMessage = await findChatMessageById(_id);\r\n          if (!savedMessage) {\r\n            console.error(\"Invalid message ID for non-text message:\", _id);\r\n            socket.emit(\"error\", { message: \"Invalid message ID\" });\r\n            return;\r\n          }\r\n          if (type === \"group\") {\r\n            room = `group_${targetId}`;\r\n          } else {\r\n            const contact = await findContactByUsers(senderId, targetId);\r\n            const ids = [contact?.userId.toString(), contact?.targetUserId?.toString()].sort();\r\n            room = `chat_${ids[0]}_${ids[1]}`;\r\n          }\r\n        }\r\n\r\n        // Create notifications for both text and non-text messages\r\n        let recipientIds: string[] = [];\r\n        let chatKey: string | null = null;\r\n\r\n        if (savedMessage.groupId) {\r\n          chatKey = `group_${savedMessage.groupId.toString()}`;\r\n          const group = await Group.findById(savedMessage.groupId);\r\n          if (group) {\r\n            recipientIds = group.members\r\n              .filter(member => member.userId.toString() !== senderId)\r\n              .map(member => member.userId.toString());\r\n          }\r\n        } else if (savedMessage.collaborationId) {\r\n          chatKey = `user-mentor_${savedMessage.collaborationId.toString()}`;\r\n          const Collaboration = await collaboration.findById(savedMessage.collaborationId);\r\n          if (Collaboration) {\r\n            recipientIds = [\r\n              Collaboration.userId.toString() === senderId\r\n                ? Collaboration.mentorId.toString()\r\n                : Collaboration.userId.toString(),\r\n            ];\r\n          }\r\n        } else if (savedMessage.userConnectionId) {\r\n          chatKey = `user-user_${savedMessage.userConnectionId.toString()}`;\r\n          const connection = await userConnectionModal.findById(savedMessage.userConnectionId);\r\n          if (connection) {\r\n            recipientIds = [\r\n              connection.requester.toString() === senderId\r\n                ? connection.recipient.toString()\r\n                : connection.requester.toString(),\r\n            ];\r\n          }\r\n        }\r\n\r\n        if (chatKey && recipientIds.length > 0) {\r\n          // Check which recipients are not in the room\r\n          const socketsInRoom = await io.in(room).allSockets();\r\n          const connectedUserIds = new Set<string>();\r\n          for (const socketId of socketsInRoom) {\r\n            const s = io.sockets.sockets.get(socketId);\r\n            if (s && s.data.userId) {\r\n              connectedUserIds.add(s.data.userId);\r\n            }\r\n          }\r\n\r\n          for (const recipientId of recipientIds) {\r\n            if (!connectedUserIds.has(recipientId) || activeChats.get(recipientId) !== chatKey) {\r\n              const notification = await sendNotification(\r\n                recipientId,\r\n                'message',\r\n                senderId,\r\n                chatKey,\r\n                contentType\r\n              );\r\n              io.to(`user_${recipientId}`).emit('notification.new', notification);\r\n              console.log(`Emitted notification.new to user_${recipientId}:`, notification);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!savedMessage) {\r\n          console.error(\"Failed to save message:\", message);\r\n          socket.emit(\"error\", { message: \"Failed to save message\" });\r\n          return;\r\n        }\r\n\r\n        const messageData = {\r\n          senderId,\r\n          targetId,\r\n          type,\r\n          content,\r\n          contentType,\r\n          thumbnailUrl: savedMessage.thumbnailUrl,\r\n          fileMetadata: savedMessage.fileMetadata,\r\n          ...(type === \"group\" && { groupId: groupId || targetId }),\r\n          ...(type === \"user-mentor\" && { collaborationId: collaborationId || savedMessage?.collaborationId?.toString() }),\r\n          ...(type === \"user-user\" && { userConnectionId: userConnectionId || savedMessage?.userConnectionId?.toString() }),\r\n          timestamp: timestampString,\r\n          _id: savedMessage._id,\r\n          status: savedMessage.status,\r\n        };\r\n\r\n        socket.broadcast.to(room).emit(\"receiveMessage\", messageData);\r\n        socket.emit(\"messageSaved\", messageData);\r\n        console.log(`Message broadcasted to room ${room}:`, messageData);\r\n      } catch (error: any) {\r\n        console.error(\"Error sending message:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to send message\" });\r\n      }\r\n    });\r\n\r\n    socket.on(\"typing\", (data: { userId: string; targetId: string; type: \"group\" | \"user-mentor\" | \"user-user\"; chatKey: string }) => {\r\n      const { userId, targetId, type, chatKey } = data;\r\n      let room: string;\r\n      if (type === \"group\") {\r\n        room = `group_${targetId}`;\r\n      } else {\r\n        const ids = [userId, targetId].sort();\r\n        room = `chat_${ids[0]}_${ids[1]}`;\r\n      }\r\n      socket.broadcast.to(room).emit(\"typing\", { userId, chatKey });\r\n    });\r\n\r\n    socket.on(\"stopTyping\", (data: { userId: string; targetId: string; type: \"group\" | \"user-mentor\" | \"user-user\"; chatKey: string }) => {\r\n      const { userId, targetId, type, chatKey } = data;\r\n  let room: string;\r\n  if (type === \"group\") {\r\n    room = `group_${targetId}`;\r\n  } else {\r\n    const ids = [userId, targetId].sort();\r\n    room = `chat_${ids[0]}_${ids[1]}`;\r\n  }\r\n  console.log(`Broadcasting stopTyping to room ${room} (excluding sender ${socket.id}):`, { userId, chatKey });\r\n  socket.to(room).emit(\"stopTyping\", { userId, chatKey });\r\n    });\r\n\r\n    socket.on(\"markAsRead\", async (data: { chatKey: string; userId: string; type: \"group\" | \"user-mentor\" | \"user-user\" }) => {\r\n      try {\r\n        const { chatKey, userId, type } = data;\r\n        //mark message as read\r\n        const updatedMessages = await markMessagesAsRead(chatKey, userId, type);\r\n        //mark notifications as read\r\n        const notifications = await getNotifications(userId);\r\n        const messageNotifications = notifications.filter(\r\n          n => n.type === 'message' && n.relatedId === chatKey && n.status === 'unread'\r\n        );\r\n        for (const notification of messageNotifications) {\r\n          const updatedNotification = await markNotificationAsRead(notification._id);\r\n          if (updatedNotification) {\r\n            io.to(`user_${userId}`).emit('notification.read', { notificationId: notification._id });\r\n          }\r\n        }\r\n        let room: string;\r\n        if (type === \"group\") {\r\n          room = `group_${chatKey.replace(\"group_\", \"\")}`;\r\n        } else {\r\n          const contact = await findContactByUsers(userId, chatKey.replace(/^(user-mentor_|user-user_)/, \"\"));\r\n          const ids = [contact?.userId.toString(), contact?.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n        }\r\n        io.to(room).emit(\"messagesRead\", { chatKey, userId, messageIds: updatedMessages });\r\n      } catch (error: any) {\r\n        console.error(\"Error marking messages as read:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to mark messages as read\" });\r\n      }\r\n    });\r\n\r\n    // WebRTC signaling handlers\r\n    socket.on(\"offer\", async (data: { userId: string; targetId: string; type: string; chatKey: string; offer: RTCSessionDescriptionInit; callType: \"audio\" | \"video\" }) => {\r\n      try {\r\n        const { userId, targetId, type, chatKey, offer, callType } = data;\r\n        console.log(`Received ${callType} offer from ${userId} for chatKey: ${chatKey}`);\r\n        let room: string;\r\n        let recipientIds: string[] = [];\r\n        if (type === \"group\") {\r\n          room = `group_${targetId}`;\r\n          //get teh recipient Ids\r\n          const group = await getGroupsByGroupId(targetId);\r\n          if (!group) {\r\n            console.error(\"Invalid group ID:\", targetId);\r\n            socket.emit(\"error\", { message: \"Invalid group ID\" });\r\n            return;\r\n          }\r\n          recipientIds = group.members\r\n            .filter(member => member.userId.toString() !== userId)\r\n            .map(member => member.userId.toString());\r\n        } else {\r\n          const contact = await findContactByUsers(userId, targetId);\r\n          if (!contact) {\r\n            console.error(\"Invalid contact for offer:\", userId, targetId);\r\n            socket.emit(\"error\", { message: \"Invalid contact\" });\r\n            return;\r\n          }\r\n          const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n          recipientIds = [targetId];\r\n        }\r\n        const sender = await findUserById(userId);\r\n        socket.broadcast.to(room).emit(\"offer\", { userId, targetId, type, chatKey, offer, callType, senderName: sender?.name });\r\n        // Create call notifications for recipients not in the room\r\n        const callId = `${chatKey}_${Date.now()}`;\r\n        const socketsInRoom = await io.in(room).allSockets();\r\n        const connectedUserIds = new Set<string>();\r\n        for (const socketId of socketsInRoom) {\r\n          const s = io.sockets.sockets.get(socketId);\r\n          if (s && s.data.userId) {\r\n            connectedUserIds.add(s.data.userId);\r\n          }\r\n        }\r\n\r\n        for (const recipientId of recipientIds) {\r\n          if (!connectedUserIds.has(recipientId) || activeChats.get(recipientId) !== chatKey) {\r\n            const notification = await sendNotification(\r\n              recipientId,\r\n              'incoming_call',\r\n              userId,\r\n              chatKey,\r\n              callType,\r\n              callId\r\n            );\r\n            io.to(`user_${recipientId}`).emit('notification.new', notification);\r\n          }\r\n        }\r\n\r\n        // Track the offer for auto-end and missed call notification\r\n        const endTimeout = setTimeout(async () => {\r\n          const call = activeOffers.get(callId);\r\n          if (!call) return;\r\n\r\n          //send missed call notifications\r\n          const socketsInRoom = await io.in(room).allSockets();\r\n          const connectedUserIds = new Set<string>();\r\n          for (const socketId of socketsInRoom) {\r\n            const s = io.sockets.sockets.get(socketId);\r\n            if (s && s.data.userId) {\r\n              connectedUserIds.add(s.data.userId);\r\n            }\r\n          }\r\n\r\n          for (const recipientId of recipientIds) {\r\n            if (!connectedUserIds.has(recipientId)) {\r\n              const notification = await updateCallNotificationToMissed(\r\n                recipientId,\r\n                callId,\r\n                `Missed ${callType} call from ${userId}`\r\n              );\r\n              if (notification) {\r\n                io.to(`user_${recipientId}`).emit(\"notification.updated\", notification);\r\n              } else {\r\n                console.log(`No incoming call notification found for call ${callId}, creating new`);\r\n                const newNotification = await sendNotification(\r\n                  recipientId,\r\n                  \"missed_call\",\r\n                  userId,\r\n                  chatKey,\r\n                  callType,\r\n                  callId\r\n                );\r\n                io.to(`user_${recipientId}`).emit(\"notification.new\", newNotification);\r\n                console.log(`Emitted notification.new to user_${recipientId}:`, newNotification);\r\n              }\r\n            }\r\n          }\r\n\r\n          socket.to(room).emit(\"callEnded\", { userId, targetId, type, chatKey, callType });\r\n          socket.emit(\"callEnded\", { userId, targetId, type, chatKey, callType });\r\n          activeOffers.delete(callId);\r\n        }, 30000);\r\n\r\n        activeOffers.set(callId, {\r\n          senderId: userId,\r\n          targetId,\r\n          type,\r\n          chatKey,\r\n          callType,\r\n          recipientIds,\r\n          endTimeout,\r\n        });\r\n\r\n      } catch (error: any) {\r\n        console.error(\"Error broadcasting offer:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to send offer\" });\r\n      }\r\n    });\r\n\r\n    socket.on(\"answer\", async (data: { userId: string; targetId: string; type: string; chatKey: string; answer: RTCSessionDescriptionInit; callType: \"audio\" | \"video\" }) => {\r\n      try {\r\n        const { userId, targetId, type, chatKey, answer, callType } = data;\r\n        console.log(`Received ${callType} answer from ${userId} for chatKey: ${chatKey}`);\r\n        let room: string;\r\n        if (type === \"group\") {\r\n          room = `group_${targetId}`;\r\n        } else {\r\n          const contact = await findContactByUsers(userId, targetId);\r\n          if (!contact) {\r\n            console.error(\"Invalid contact for answer:\", userId, targetId);\r\n            socket.emit(\"error\", { message: \"Invalid contact\" });\r\n            return;\r\n          }\r\n          const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n        }\r\n        socket.broadcast.to(room).emit(\"answer\", { userId, targetId, type, chatKey, answer, callType });\r\n\r\n        // Clear timeout for this call\r\n        const callId = Array.from(activeOffers.keys()).find(\r\n          (id) => activeOffers.get(id)?.chatKey === chatKey && activeOffers.get(id)?.senderId === targetId\r\n        );\r\n        if (callId) {\r\n          const call = activeOffers.get(callId);\r\n          if (call) {\r\n            clearTimeout(call.endTimeout);\r\n            activeOffers.delete(callId);\r\n          }\r\n        }\r\n\r\n      } catch (error: any) {\r\n        console.error(\"Error broadcasting answer:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to send answer\" });\r\n      }\r\n    });\r\n\r\n    socket.on(\"ice-candidate\", async (data: { userId: string; targetId: string; type: string; chatKey: string; candidate: RTCIceCandidateInit; callType: \"audio\" | \"video\" }) => {\r\n      try {\r\n        const { userId, targetId, type, chatKey, candidate, callType } = data;\r\n        console.log(`Received ${callType} ICE candidate from ${userId} for chatKey: ${chatKey}`);\r\n        let room: string;\r\n        if (type === \"group\") {\r\n          room = `group_${targetId}`;\r\n        } else {\r\n          const contact = await findContactByUsers(userId, targetId);\r\n          if (!contact) {\r\n            console.error(\"Invalid contact for ICE candidate:\", userId, targetId);\r\n            socket.emit(\"error\", { message: \"Invalid contact\" });\r\n            return;\r\n          }\r\n          const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n        }\r\n        socket.broadcast.to(room).emit(\"ice-candidate\", { userId, targetId, type, chatKey, candidate, callType });\r\n      } catch (error: any) {\r\n        console.error(\"Error broadcasting ICE candidate:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to send ICE candidate\" });\r\n      }\r\n    });\r\n\r\n    socket.on(\"callEnded\", async (data: { userId: string; targetId: string; type: string; chatKey: string; callType: \"audio\" | \"video\" }) => {\r\n      try {\r\n        const { userId, targetId, type, chatKey, callType } = data;\r\n        const callId = `${chatKey}_${Date.now()}`;\r\n        if (endedCalls.has(callId)) {\r\n          console.log(`Ignoring duplicate callEnded for callId: ${callId}, chatKey: ${chatKey}`);\r\n          return;\r\n        }\r\n        console.log(`Received callEnded from ${userId} for chatKey: ${chatKey}, callType: ${callType}`);\r\n        let room: string;\r\n\r\n        if (type === \"group\") {\r\n          room = `group_${targetId}`;\r\n        } else {\r\n          const contact = await findContactByUsers(userId, targetId);\r\n          if (!contact) {\r\n            console.error(\"Invalid contact for callEnded:\", userId, targetId);\r\n            socket.emit(\"error\", { message: \"Invalid contact\" });\r\n            return;\r\n          }\r\n          const ids = [contact.userId.toString(), contact.targetUserId?.toString()].sort();\r\n          room = `chat_${ids[0]}_${ids[1]}`;\r\n        }\r\n\r\n        io.to(room).emit(\"callEnded\", { userId, targetId, type, chatKey, callType });\r\n        endedCalls.add(callId);\r\n        setTimeout(() => endedCalls.delete(callId), 60000); // Clear after 60s\r\n\r\n        const callIdToClear = Array.from(activeOffers.keys()).find(\r\n          (id) => activeOffers.get(id)?.chatKey === chatKey && activeOffers.get(id)?.senderId === userId\r\n        );\r\n        if (callIdToClear) {\r\n          const call = activeOffers.get(callIdToClear);\r\n          if (call) {\r\n            clearTimeout(call.endTimeout);\r\n            activeOffers.delete(callIdToClear);\r\n          }\r\n        }\r\n\r\n      } catch (error: any) {\r\n        console.error(\"Error handling callEnded:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to end call\" });\r\n      }\r\n    });\r\n\r\n    socket.on(\"notification.read\", async (data: { notificationId: string; userId: string }) => {\r\n      try {\r\n        const { notificationId, userId } = data;\r\n        const notification = await markNotificationAsRead(notificationId);\r\n        if (notification) {\r\n          io.to(`user_${userId}`).emit('notification.read', { notificationId });\r\n        }\r\n      } catch (error: any) {\r\n        console.error(\"Error handling notification.read:\", error.message);\r\n        socket.emit(\"error\", { message: \"Failed to mark notification as read\" });\r\n      }\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(`User disconnected: ${socket.id}`);\r\n    });\r\n  });\r\n};\r\n\r\n//emit task notifications\r\nconst emitTaskNotification = (notification: TaskNotificationPayload) => {\r\n  if (!io) {\r\n    console.error(\"Socket.IO server not initialized\");\r\n    return;\r\n  }\r\n  console.log(`Received notification event for user ${notification.userId}:`, notification);\r\n  const room = `user_${notification.userId}`;\r\n  io.to(room).emit(\"notification.new\", notification);\r\n  console.log(`Emitted notification.new to user_${notification.userId}:`, notification);\r\n};\r\n\r\nexport default initializeSocket;"]}