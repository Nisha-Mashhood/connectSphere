{"version":3,"file":"BaseController.js","sourceRoot":"","sources":["../../../src/core/Controller/BaseController.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACpF,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAExC,MAAM,OAAgB,cAAc;IAClC,WAAW,GAAG,CAAC,GAAa,EAAE,IAAS,EAAE,UAAkB,SAAS,EAAE,aAAqB,GAAG,EAAQ,EAAE;QACtG,MAAM,CAAC,IAAI,CAAC,qBAAqB,OAAO,EAAE,CAAC,CAAC;QAC5C,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;YAC1B,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,IAAI;SACL,CAAC,CAAC;IACL,CAAC,CAAA;IAED,WAAW,GAAG,CAAC,GAAa,EAAE,IAAS,EAAE,UAAkB,SAAS,EAAQ,EAAE;QAC5E,MAAM,CAAC,IAAI,CAAC,6BAA6B,OAAO,EAAE,CAAC,CAAC;QACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,IAAI;SACL,CAAC,CAAC;IACL,CAAC,CAAA;IAED,aAAa,GAAG,CAAC,GAAa,EAAE,UAAkB,SAAS,EAAQ,EAAE;QACnE,MAAM,CAAC,IAAI,CAAC,gCAAgC,OAAO,EAAE,CAAC,CAAC;QACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC,CAAA;IAED,WAAW,GAAG,CAAC,KAAU,EAAE,GAAa,EAAQ,EAAE;QAChD,IAAI,KAAK,YAAY,SAAS,EAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,eAAe,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;YAClE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;gBAChC,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAC,CAAC;QACL,CAAC;aAAM,IAAI,KAAK,YAAY,YAAY,IAAI,KAAK,YAAY,eAAe,EAAE,CAAC;YAC7E,MAAM,CAAC,KAAK,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,KAAK,CAAC,qBAAqB,KAAK,CAAC,OAAO,IAAI,KAAK,EAAE,CAAC,CAAC;YAC5D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,uBAAuB;aACjC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAA;IAED,UAAU,GAAG,CAAC,UAAkB,EAAE,OAAe,EAAS,EAAE;QAC1D,MAAM,CAAC,IAAI,CAAC,wBAAwB,OAAO,KAAK,UAAU,GAAG,CAAC,CAAC;QAC/D,MAAM,IAAI,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAA;CACF","sourcesContent":["import { Response } from 'express';\r\nimport { IBaseController } from '../Interfaces/IBaseController.js';\r\nimport { HttpError, RepositoryError, ServiceError } from '../Utils/ErrorHandler.js';\r\nimport logger from '../Utils/Logger.js';\r\n\r\nexport abstract class BaseController implements IBaseController {\r\n  sendSuccess = (res: Response, data: any, message: string = 'Success', statusCode: number = 200): void => {\r\n    logger.info(`Sending response: ${message}`);\r\n    res.status(statusCode).json({\r\n      status: 'success',\r\n      message,\r\n      data,\r\n    });\r\n  }\r\n\r\n  sendCreated = (res: Response, data: any, message: string = 'Created'): void => {\r\n    logger.info(`Sending created response: ${message}`);\r\n    res.status(201).json({\r\n      status: 'success',\r\n      message,\r\n      data,\r\n    });\r\n  }\r\n\r\n  sendNoContent = (res: Response, message: string = 'Deleted'): void => {\r\n    logger.info(`Sending no content response: ${message}`);\r\n    res.status(204).send();\r\n  }\r\n\r\n  handleError = (error: any, res: Response): void => {\r\n    if (error instanceof HttpError) {\r\n      logger.warn(`HTTP error: ${error.message} [${error.statusCode}]`);\r\n      res.status(error.statusCode).json({\r\n        status: 'error',\r\n        message: error.message,\r\n      });\r\n    } else if (error instanceof ServiceError || error instanceof RepositoryError) {\r\n      logger.error(`Application error: ${error.message}`);\r\n      res.status(400).json({\r\n        status: 'error',\r\n        message: error.message,\r\n      });\r\n    } else {\r\n      logger.error(`Unexpected error: ${error.message || error}`);\r\n      res.status(500).json({\r\n        status: 'error',\r\n        message: 'Internal Server Error',\r\n      });\r\n    }\r\n  }\r\n\r\n  throwError = (statusCode: number, message: string): never => {\r\n    logger.warn(`Throwing HTTP error: ${message} [${statusCode}]`);\r\n    throw new HttpError(statusCode, message);\r\n  }\r\n}\r\n"]}