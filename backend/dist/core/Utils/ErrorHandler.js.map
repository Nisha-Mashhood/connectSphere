{"version":3,"file":"ErrorHandler.js","sourceRoot":"","sources":["../../../src/core/Utils/ErrorHandler.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,aAAa,CAAC;AAGjC,0BAA0B;AAC1B,MAAM,OAAO,SAAU,SAAQ,KAAK;IACf;IAAnB,YAAmB,UAAkB,EAAE,OAAe;QACpD,KAAK,CAAC,OAAO,CAAC,CAAC;QADE,eAAU,GAAV,UAAU,CAAQ;QAEnC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,MAAM,CAAC,KAAK,CAAC,cAAc,OAAO,aAAa,UAAU,GAAG,CAAC,CAAC;IAChE,CAAC;CACF;AAED,gBAAgB;AAChB,MAAM,OAAO,YAAa,SAAQ,KAAK;IACrC,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;QAC3B,MAAM,CAAC,KAAK,CAAC,iBAAiB,OAAO,EAAE,CAAC,CAAC;IAC3C,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,eAAgB,SAAQ,KAAK;IACxC,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,oBAAoB,OAAO,EAAE,CAAC,CAAC;IAC9C,CAAC;CACF;AAED,2DAA2D;AAC3D,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,KAAY,EACZ,IAAS,EACT,GAAa,EACb,IAAS,EACT,EAAE;IACF,IAAI,KAAK,YAAY,SAAS,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,eAAe,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,UAAU,IAAI,CAAC,CAAC;QACnE,GAAG;aACA,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;aACxB,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACrD,OAAO;IACT,CAAC;SAAM,IACL,KAAK,YAAY,YAAY;QAC7B,KAAK,YAAY,eAAe,EAChC,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAClE,OAAO;IACT,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,KAAK,CAAC,qBAAqB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAC9E,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import logger from \"./Logger.js\";\r\nimport { Response } from \"express\";\r\n\r\n// HTTP Error (Controller)\r\nexport class HttpError extends Error {\r\n  constructor(public statusCode: number, message: string) {\r\n    super(message);\r\n    this.name = \"HttpError\";\r\n    logger.error(`HttpError: ${message} (Status: ${statusCode})`);\r\n  }\r\n}\r\n\r\n// Service Error\r\nexport class ServiceError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"ServiceError\";\r\n    logger.error(`ServiceError: ${message}`);\r\n  }\r\n}\r\n\r\n// Repository Error\r\nexport class RepositoryError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"RepositoryError\";\r\n    logger.error(`RepositoryError: ${message}`);\r\n  }\r\n}\r\n\r\n// Middleware to handle errors and send formatted responses\r\nexport const errorHandler = (\r\n  error: Error,\r\n  _req: any,\r\n  res: Response,\r\n  next: any\r\n) => {\r\n  if (error instanceof HttpError) {\r\n    logger.warn(`HTTP error: ${error.message} [${error.statusCode}] `);\r\n    res\r\n      .status(error.statusCode)\r\n      .json({ status: \"error\", message: error.message });\r\n    return;\r\n  } else if (\r\n    error instanceof ServiceError ||\r\n    error instanceof RepositoryError\r\n  ) {\r\n    logger.error(`Application error: ${error.message}`);\r\n    res.status(400).json({ status: \"error\", message: error.message });\r\n    return;\r\n  } else {\r\n    logger.error(`Unexpected error: ${error.message}`);\r\n    res.status(500).json({ status: \"error\", message: \"Internal server error\" });\r\n  }\r\n  next();\r\n};\r\n"]}