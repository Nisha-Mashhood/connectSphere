{"version":3,"file":"IdGenerator.js","sourceRoot":"","sources":["../../../src/core/Utils/IdGenerator.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,gCAAgC,CAAC;AAErD,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,cAAsB,EAAE,MAAc,EAAmB,EAAE;IAChG,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAC5C,EAAE,GAAG,EAAE,cAAc,EAAE,EACvB,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EACzB,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAC5B,CAAC;IACF,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;AACxC,CAAC,CAAC","sourcesContent":["import Counter from \"../../models/counters.model.js\";\r\n\r\nexport const generateCustomId = async (collectionName: string, prefix: string): Promise<string> => {\r\n  const counter = await Counter.findOneAndUpdate(\r\n    { _id: collectionName },\r\n    { $inc: { sequence: 1 } },\r\n    { upsert: true, new: true }\r\n  );\r\n  return `${prefix}${counter.sequence}`;\r\n};"]}