{"version":3,"file":"Cloudinary.js","sourceRoot":"","sources":["../../../src/core/Utils/Cloudinary.ts"],"names":[],"mappings":"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","sourcesContent":["import { v2 as cloudinary } from \"cloudinary\";\r\nimport  config  from '../../config/env.config.js';\r\nimport fs from \"fs/promises\";\r\n\r\ncloudinary.config({\r\n  cloud_name: config.cloudinaryCloudName,\r\n  api_key: config.cloudinaryApiKey,\r\n  api_secret: config.cloudinaryApiSecret,\r\n});\r\n\r\nexport const uploadMedia = async (filePath: string, \r\n  folder?: string, \r\n  fileSize: number = 0,\r\n  contentType?: \"image\" | \"video\" | \"file\"\r\n) => {\r\n  const maxSize = 10 * 1024 * 1024;\r\n  try {\r\n    const baseTransformations = fileSize > maxSize\r\n      ? [\r\n          { width: 1024, height: 1024, crop: \"limit\" }, // Images/videos: max 1024x1024\r\n          { quality: \"auto:low\" }, // Reduce quality for images/videos\r\n          { fetch_format: \"auto\" }, // Optimize format\r\n        ]\r\n      : [\r\n          { width: 1024, height: 1024, crop: \"limit\" }, // Still limit size\r\n          { quality: \"auto\" }, // Default optimization\r\n          { fetch_format: \"auto\" },\r\n        ];\r\n\r\n        let uploadOptions: any = {\r\n          folder,\r\n          resource_type: \"auto\",\r\n          transformation: baseTransformations,\r\n        };\r\n\r\n        if (contentType === \"video\") {\r\n          uploadOptions.eager = baseTransformations; \r\n          uploadOptions.eager_async = true; \r\n        }\r\n\r\n        const result = await cloudinary.uploader.upload(filePath, uploadOptions);\r\n\r\n    //For thumbnail\r\n    let thumbnailUrl: string | undefined;\r\n    if (contentType === \"video\") {\r\n      thumbnailUrl = cloudinary.url(result.public_id, {\r\n        resource_type: \"video\",\r\n        transformation: [\r\n          { width: 200, height: 200, crop: \"fill\" },\r\n          { fetch_format: \"jpg\" },\r\n        ],\r\n      });\r\n    } else if (contentType === \"file\") {\r\n      thumbnailUrl = cloudinary.url(result.public_id, {\r\n        resource_type: \"image\",\r\n        transformation: [\r\n          { width: 200, height: 200, crop: \"fill\" },\r\n          { fetch_format: \"jpg\" },\r\n          { default_image: \"file_thumbnail.jpg\" },\r\n        ],\r\n      });\r\n    }\r\n\r\n    await fs.unlink(filePath); // Remove the file from local storage\r\n    console.log(`Deleted local file: ${filePath}`);\r\n    return { url: result.secure_url, thumbnailUrl };\r\n  } catch (error) {\r\n    console.error(`Failed to upload image or delete file: ${filePath}`, error);\r\n    throw error;\r\n  }\r\n};\r\n"]}