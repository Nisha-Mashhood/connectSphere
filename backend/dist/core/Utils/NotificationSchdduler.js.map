{"version":3,"file":"NotificationSchdduler.js","sourceRoot":"","sources":["../../../src/core/Utils/NotificationSchdduler.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,MAAM,MAAM,aAAa,CAAC;AACjC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AAEvE,MAAM,OAAO,gBAAgB;IACnB,WAAW,CAAoB;IAEvC;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,EAAE,CAAC;IAC7C,CAAC;IAEM,KAAK;QACV,yEAAyE;QACzE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACpC,MAAM,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YAC3D,IAAI,CAAC;gBACH,iCAAiC;gBACjC,MAAM,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC;gBAClC,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBAEtD,oCAAoC;gBACpC,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;gBAC3F,MAAM,CAAC,IAAI,CAAC,oBAAoB,oBAAoB,6BAA6B,CAAC,CAAC;gBAEnF,qCAAqC;gBACrC,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;gBAC7F,MAAM,CAAC,IAAI,CAAC,oBAAoB,qBAAqB,8BAA8B,CAAC,CAAC;gBAErF,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;YAC3D,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,CAAC,KAAK,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC5D,MAAM,IAAI,eAAe,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;IACxD,CAAC;CACF","sourcesContent":["import cron from 'node-cron';\r\nimport logger from './Logger.js';\r\nimport { RepositoryError } from './ErrorHandler.js';\r\nimport { CleanupRepository } from '../Repositries/CleanUpRepositry.js';\r\n\r\nexport class CleanupScheduler {\r\n  private cleanupRepo: CleanupRepository;\r\n\r\n  constructor() {\r\n    this.cleanupRepo = new CleanupRepository();\r\n  }\r\n\r\n  public start(): void {\r\n    // Cleanup old GroupRequest and MentorRequest documents daily at midnight\r\n    cron.schedule('0 0 * * *', async () => {\r\n      logger.info('Running daily cleanup task for old requests');\r\n      try {\r\n        // Calculate the date 15 days ago\r\n        const fifteenDaysAgo = new Date();\r\n        fifteenDaysAgo.setDate(fifteenDaysAgo.getDate() - 15);\r\n\r\n        // Delete old GroupRequest documents\r\n        const deletedGroupRequests = await this.cleanupRepo.deleteOldGroupRequests(fifteenDaysAgo);\r\n        logger.info(`Cleanup: Deleted ${deletedGroupRequests} old GroupRequest documents`);\r\n\r\n        // Delete old MentorRequest documents\r\n        const deletedMentorRequests = await this.cleanupRepo.deleteOldMentorRequests(fifteenDaysAgo);\r\n        logger.info(`Cleanup: Deleted ${deletedMentorRequests} old MentorRequest documents`);\r\n\r\n        logger.info('Daily cleanup task completed successfully');\r\n      } catch (error: any) {\r\n        logger.error(`Daily cleanup task failed: ${error.message}`);\r\n        throw new RepositoryError(`Daily cleanup task failed: ${error.message}`);\r\n      }\r\n    });\r\n\r\n    logger.info('âœ… Node-cron cleanup scheduler started.');\r\n  }\r\n}"]}