{"version":3,"file":"BaseRepositry.js","sourceRoot":"","sources":["../../../src/core/Repositries/BaseRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Document, FilterQuery } from 'mongoose';\r\nimport { IBaseRepository } from '../Interfaces/IBaseRepositry.js'; \r\nimport logger from '../Utils/Logger.js'; \r\nimport { RepositoryError } from '../Utils/ErrorHandler.js'; \r\n\r\n//Base class for Basic DataBase Operations\r\nexport abstract class BaseRepository<T extends Document> implements IBaseRepository<T> {\r\n  protected model: Model<T>;\r\n\r\n  //Constructor for Initializing the Modal\r\n  constructor(model: Model<T>) {\r\n    this.model = model;\r\n    logger.debug(`Initialized repository for model: ${model.modelName}`);\r\n  }\r\n\r\n  // Create a new entity\r\n  async create(data: Partial<T>): Promise<T> {\r\n    try {\r\n      const entity = new this.model(data);\r\n      const result = await entity.save();\r\n      logger.info(`Created entity in ${this.model.modelName}: ${result._id}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error creating entity in ${this.model.modelName}: ${error}`);\r\n      throw new RepositoryError(`Failed to create entity in ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  // Find an entity by ID\r\n  async findById(id: string): Promise<T | null> {\r\n    try {\r\n      const result = await this.model.findById(id).exec();\r\n      logger.debug(`Found entity in ${this.model.modelName} by ID: ${id}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error finding entity in ${this.model.modelName} by ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to find entity by ID ${id} in ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  // Find one entity matching the query\r\n  async findOne(query: FilterQuery<T>): Promise<T | null> {\r\n    try {\r\n      const result = await this.model.findOne(query).exec();\r\n      logger.debug(`Found entity in ${this.model.modelName} with query: ${JSON.stringify(query)}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error finding entity in ${this.model.modelName} with query ${JSON.stringify(query)}: ${error}`);\r\n      throw new RepositoryError(`Failed to find entity with query in ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  // Find all entities\r\n  async findAll(): Promise<T[]> {\r\n    try {\r\n      const result = await this.model.find().exec();\r\n      logger.debug(`Retrieved ${result.length} entities from ${this.model.modelName}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error retrieving entities from ${this.model.modelName}: ${error}`);\r\n      throw new RepositoryError(`Failed to retrieve entities from ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  // Update an entity by ID\r\n  async update(id: string, data: Partial<T>): Promise<T | null> {\r\n    try {\r\n      const result = await this.model.findByIdAndUpdate(id, data, { new: true }).exec();\r\n      logger.info(`Updated entity in ${this.model.modelName}: ${id}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error updating entity in ${this.model.modelName} with ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to update entity with ID ${id} in ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  // Delete an entity by ID\r\n  async delete(id: string): Promise<boolean> {\r\n    try {\r\n      const result = await this.model.findByIdAndDelete(id).exec();\r\n      logger.info(`Deleted entity in ${this.model.modelName}: ${id}`);\r\n      return !!result;\r\n    } catch (error) {\r\n      logger.error(`Error deleting entity in ${this.model.modelName} with ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to delete entity with ID ${id} in ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  // Update an entity by ID \r\n  async findByIdAndUpdate(id: string, update: any, options: { new?: boolean } = { new: true }): Promise<T | null> {\r\n    try {\r\n      const result = await this.model.findByIdAndUpdate(id, update, options).exec();\r\n      logger.info(`Updated entity in ${this.model.modelName} with ID ${id}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error updating entity in ${this.model.modelName} with ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to update entity with ID ${id} in ${this.model.modelName}`);\r\n    }\r\n  }\r\n\r\n  //Delete an entity by Id\r\n  async findByIdAndDelete(id: string): Promise<T | null> {\r\n    try {\r\n      const result = await this.model.findByIdAndDelete(id).exec();\r\n      logger.info(`Deleted entity in ${this.model.modelName}: ${id}`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error deleting entity in ${this.model.modelName} with ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to delete entity with ID ${id} in ${this.model.modelName}`);\r\n    }\r\n  }\r\n}"]}