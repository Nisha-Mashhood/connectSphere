{"version":3,"file":"CleanUpRepositry.js","sourceRoot":"","sources":["../../../src/core/Repositries/CleanUpRepositry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3D,OAAO,MAAM,MAAM,oBAAoB,CAAC;AACxC,OAAO,YAAY,MAAM,oCAAoC,CAAC;AAC9D,OAAO,aAAa,MAAM,+BAA+B,CAAC;AAE1D,MAAM,OAAO,iBAAiB;IAE5B,KAAK,CAAC,sBAAsB,CAAC,UAAgB;QAC3C,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,8CAA8C,UAAU,EAAE,CAAC,CAAC;YACzE,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC;gBAC3C,SAAS,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE;aAC/B,CAAC,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC,WAAW,MAAM,CAAC,YAAY,6BAA6B,CAAC,CAAC;YACzE,OAAO,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC;QAClC,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,gDAAgD,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC9E,MAAM,IAAI,eAAe,CAAC,gDAAgD,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC7F,CAAC;IACH,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,UAAgB;QAC5C,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,+CAA+C,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,UAAU,CAAC;gBAC5C,SAAS,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE;aAC/B,CAAC,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC,WAAW,MAAM,CAAC,YAAY,8BAA8B,CAAC,CAAC;YAC1E,OAAO,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC;QAClC,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,iDAAiD,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/E,MAAM,IAAI,eAAe,CAAC,iDAAiD,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC;CACF","sourcesContent":["import { RepositoryError } from '../Utils/ErrorHandler.js';\r\nimport logger from '../Utils/Logger.js';\r\nimport GroupRequest from '../../models/groupRequest.model.js';\r\nimport MentorRequest from '../../models/mentorRequset.js';\r\n\r\nexport class CleanupRepository {\r\n  \r\n  async deleteOldGroupRequests(cutoffDate: Date): Promise<number> {\r\n    try {\r\n      logger.debug(`Deleting GroupRequest documents older than ${cutoffDate}`);\r\n      const result = await GroupRequest.deleteMany({\r\n        updatedAt: { $lt: cutoffDate },\r\n      }).exec();\r\n      logger.info(`Deleted ${result.deletedCount} old GroupRequest documents`);\r\n      return result.deletedCount || 0;\r\n    } catch (error: any) {\r\n      logger.error(`Failed to delete old GroupRequest documents: ${error.message}`);\r\n      throw new RepositoryError(`Failed to delete old GroupRequest documents: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async deleteOldMentorRequests(cutoffDate: Date): Promise<number> {\r\n    try {\r\n      logger.debug(`Deleting MentorRequest documents older than ${cutoffDate}`);\r\n      const result = await MentorRequest.deleteMany({\r\n        updatedAt: { $lt: cutoffDate },\r\n      }).exec();\r\n      logger.info(`Deleted ${result.deletedCount} old MentorRequest documents`);\r\n      return result.deletedCount || 0;\r\n    } catch (error: any) {\r\n      logger.error(`Failed to delete old MentorRequest documents: ${error.message}`);\r\n      throw new RepositoryError(`Failed to delete old MentorRequest documents: ${error.message}`);\r\n    }\r\n  }\r\n}"]}