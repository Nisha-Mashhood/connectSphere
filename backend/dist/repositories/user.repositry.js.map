{"version":3,"file":"user.repositry.js","sourceRoot":"","sources":["../../src/repositories/user.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,IAAuB,MAAM,yBAAyB,CAAC;AAE9D,oBAAoB;AACpB,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,QAAgC,EAAE,EAAE;IACnE,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IACrD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,oBAAoB;AACpB,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IAC/C,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF,gBAAgB;AAChB,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,EAAU,EACV,UAAkC,EAClC,EAAE;IACF,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,iBAAiB;AACjB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,QAAgB,EAAE,EAAE,CACnE,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAE1D,sCAAsC;AACtC,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,YAAoB,EAAE,EAAE;IAC/E,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/E,CAAC,CAAC;AAEF,gCAAgC;AAChC,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IACzD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACrF,CAAC,CAAC","sourcesContent":["import User, { UserInterface } from \"../models/user.model.js\";\r\n\r\n// Create a new user\r\nexport const createUser = async (userData: Partial<UserInterface>) => {\r\n  return await User.create(userData);\r\n};\r\n\r\n// Find a user by email\r\nexport const findUserByEmail = async (email: string) => {\r\n  return await User.findOne({ email });\r\n};\r\n\r\n// Find a user by ID\r\nexport const findUserById = async (id: string) => {\r\n  return await User.findById(id);\r\n};\r\n\r\n// Update a user\r\nexport const updateUser = async (\r\n  id: string,\r\n  updateData: Partial<UserInterface>\r\n) => {\r\n  return await User.findByIdAndUpdate(id, updateData, { new: true });\r\n};\r\n\r\n//update password\r\nexport const updatePassword = async (id: string, password: string) =>\r\n  User.findByIdAndUpdate(id, { password }, { new: true });\r\n\r\n// Update the refresh token for a user\r\nexport const updateRefreshToken = async (userId: string, refreshToken: string) => {\r\n  return await User.findByIdAndUpdate(userId, { refreshToken }, { new: true });\r\n};\r\n\r\n// Remove refresh token (logout)\r\nexport const removeRefreshToken = async (userId: string) => {\r\n  return await User.findByIdAndUpdate(userId, { refreshToken: null }, { new: true });\r\n};"]}