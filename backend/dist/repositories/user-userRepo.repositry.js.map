{"version":3,"file":"user-userRepo.repositry.js","sourceRoot":"","sources":["../../src/repositories/user-userRepo.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,cAAmC,MAAM,mCAAmC,CAAC;AAEpF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,WAAmB,EAAE,WAAmB,EAA4B,EAAE;IAC/G,MAAM,aAAa,GAAG,IAAI,cAAc,CAAC;QACvC,SAAS,EAAE,WAAW;QACtB,SAAS,EAAE,WAAW;KACvB,CAAC,CAAC;IACH,OAAO,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;AACpC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,KAAK,EAAE,YAAoB,EAAE,MAA+B,EAAmC,EAAE;IACzI,MAAM,YAAY,GAAQ,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC;IACpD,IAAI,MAAM,KAAK,UAAU;QAAE,YAAY,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC;IAEvE,OAAO,MAAM,cAAc,CAAC,iBAAiB,CAAC,YAAY,EAAE,YAAY,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3F,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,YAAoB,EAAE,MAAc,EAAmC,EAAE;IACtH,OAAO,MAAM,cAAc,CAAC,iBAAiB,CAC3C,YAAY,EACZ;QACE,gBAAgB,EAAE,cAAc;QAChC,cAAc,EAAE,IAAI,IAAI,EAAE;QAC1B,mBAAmB,EAAE,MAAM;KAC5B,EACD,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAA8B,EAAE;IACrF,OAAO,MAAM,cAAc,CAAC,IAAI,CAAC;QAC/B,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;KACpD,CAAC,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;AACrC,CAAC,CAAC","sourcesContent":["import UserConnection, { IUserConnection } from \"../models/userConnection.modal.js\";\r\n\r\nexport const createUserConnection = async (requesterId: string, recipientId: string): Promise<IUserConnection> => {\r\n  const newConnection = new UserConnection({\r\n    requester: requesterId,\r\n    recipient: recipientId,\r\n  });\r\n  return await newConnection.save();\r\n};\r\n\r\nexport const updateUserConnectionStatus = async (connectionId: string, status: \"Accepted\" | \"Rejected\"): Promise<IUserConnection | null> => {\r\n  const updateFields: any = { requestStatus: status };\r\n  if (status === \"Accepted\") updateFields.requestAcceptedAt = new Date();\r\n\r\n  return await UserConnection.findByIdAndUpdate(connectionId, updateFields, { new: true });\r\n};\r\n\r\nexport const disconnectUserConnection = async (connectionId: string, reason: string): Promise<IUserConnection | null> => {\r\n  return await UserConnection.findByIdAndUpdate(\r\n    connectionId,\r\n    {\r\n      connectionStatus: \"Disconnected\",\r\n      disconnectedAt: new Date(),\r\n      disconnectionReason: reason,\r\n    },\r\n    { new: true }\r\n  );\r\n};\r\n\r\nexport const getUserConnections = async (userId: string): Promise<IUserConnection[]> => {\r\n  return await UserConnection.find({\r\n    $or: [{ requester: userId }, { recipient: userId }],\r\n  }).populate(\"requester recipient\");\r\n};"]}