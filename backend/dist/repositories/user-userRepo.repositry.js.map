{"version":3,"file":"user-userRepo.repositry.js","sourceRoot":"","sources":["../../src/repositories/user-userRepo.repositry.ts"],"names":[],"mappings":"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","sourcesContent":["import UserConnection, { IUserConnection } from \"../models/userConnection.modal.js\";\r\n\r\nexport const createUserConnection = async (requesterId: string, recipientId: string): Promise<IUserConnection> => {\r\n  const newConnection = new UserConnection({\r\n    requester: requesterId,\r\n    recipient: recipientId,\r\n  });\r\n  return await newConnection.save();\r\n};\r\n\r\nexport const updateUserConnectionStatus = async (\r\n  connectionId: string,\r\n  status: \"Accepted\" | \"Rejected\"\r\n): Promise<IUserConnection | null> => {\r\n  const updateFields: any = {\r\n    requestStatus: status,\r\n    connectionStatus: status === \"Accepted\" ? \"Connected\" : \"Disconnected\", \r\n  };\r\n\r\n  if (status === \"Accepted\") {\r\n    updateFields.requestAcceptedAt = new Date();\r\n  } else if (status === \"Rejected\") {\r\n    updateFields.requestRejectedAt = new Date();\r\n  }\r\n\r\n  return await UserConnection.findByIdAndUpdate(connectionId, updateFields, { new: true });\r\n};\r\n\r\nexport const disconnectUserConnection = async (connectionId: string, reason: string): Promise<IUserConnection | null> => {\r\n  return await UserConnection.findByIdAndUpdate(\r\n    connectionId,\r\n    {\r\n      connectionStatus: \"Disconnected\",\r\n      disconnectedAt: new Date(),\r\n      disconnectionReason: reason,\r\n    },\r\n    { new: true }\r\n  );\r\n};\r\n\r\nexport const getUserConnections = async (userId: string): Promise<IUserConnection[]> => {\r\n  return await UserConnection.find({\r\n    $or: [{ requester: userId }, { recipient: userId }],\r\n    requestStatus: \"Accepted\", \r\n  }).populate(\"requester recipient\");\r\n};\r\n\r\n\r\n// Fetch sent and received requests\r\nexport const getUserRequests = async (userId: string) => {\r\n    const sentRequests = await UserConnection.find({ requester: userId })\r\n      .populate(\"recipient\")\r\n      .sort({ requestSentAt: -1 });\r\n  \r\n    const receivedRequests = await UserConnection.find({ recipient: userId, requestStatus: \"Pending\" })\r\n      .populate(\"requester\")\r\n      .sort({ requestSentAt: -1 });\r\n  \r\n    return { sentRequests, receivedRequests };\r\n  };\r\n\r\n  //FOR ADMIN\r\n//Get All user-user collaborations\r\nexport const getAllUserConnections = async (): Promise<IUserConnection[]> => {\r\n  return await UserConnection.find().populate(\"requester recipient\");\r\n};\r\n\r\n//Get the user connection details with connection Id\r\nexport const getUserConnectionWithId = async (connectionId:string): Promise<IUserConnection> => {\r\n try {\r\n  const userConnection = await UserConnection.findById(connectionId).populate(\"requester recipient\");\r\n  if(!userConnection){\r\n    throw new Error(\"no user connection found for this Id\");\r\n  }\r\n  return userConnection;\r\n } catch (error) {\r\n  throw new Error(\"Error retrieving  details from the database\");\r\n }\r\n};\r\n"]}