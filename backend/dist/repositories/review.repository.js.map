{"version":3,"file":"review.repository.js","sourceRoot":"","sources":["../../src/repositories/review.repository.ts"],"names":[],"mappings":"AACA,OAAO,MAAM,MAAM,2BAA2B,CAAC;AAG/C,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,IAAyD,EAA2B,EAAE;IACvH,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QAChC,OAAO,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,yDAAyD,KAAK,EAAE,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,EAAE,QAAgB,EAA2B,EAAE;IAC1E,IAAI,CAAC;QACH,OAAO,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IACjF,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,8CAA8C,KAAK,EAAE,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,IAA+B,EAAE;IACjE,IAAI,CAAC;QACH,OAAO,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1F,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,gDAAgD,KAAK,EAAE,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,QAAgB,EAAE,OAAqD,EAA2B,EAAE;IACrI,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QACxH,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YACpD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,gDAAgD,KAAK,EAAE,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,IAA+B,EAAE;IACtE,IAAI,CAAC;QACH,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpF,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,yDAAyD,KAAK,EAAE,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { IReview } from '../Interfaces/models/IReview.js';\r\nimport Review from '../models/Review.modal.js';\r\n\r\n\r\nexport const createReview = async (data: { userId: string; rating: number; comment: string }): Promise<IReview | null> => {\r\n  try {\r\n    const review = new Review(data);\r\n    return await review.save();\r\n  } catch (error) {\r\n    console.log(`[Review Repository] Failed to create review document: ${error}`);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const findById = async (reviewId: string): Promise<IReview | null> => {\r\n  try {\r\n    return await Review.findOne({ reviewId }).populate('userId', 'email username');\r\n  } catch (error) {\r\n    console.log(`[Review Repository] Failed to find review: ${error}`);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getAllReviews = async (): Promise<IReview[] | null> => {\r\n  try {\r\n    return await Review.find().populate('userId', 'email username').sort({ createdAt: -1 });\r\n  } catch (error) {\r\n    console.log(`[Review Repository] Failed to fetch reviews: ${error}`);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const updateReview = async (reviewId: string, updates: { isApproved?: boolean; isSelect?: boolean }): Promise<IReview | null> => {\r\n  try {\r\n    const review = await Review.findOneAndUpdate({ reviewId }, updates, { new: true }).populate('userId', 'email username');\r\n    if (!review) {\r\n      console.log(`[Review Repository] Review not found`);\r\n      return null;\r\n    }\r\n    return review;\r\n  } catch (error) {\r\n    console.log(`[Review Repository] Failed to update review: ${error}`);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getSelectedReviews = async (): Promise<IReview[] | null> => {\r\n  try {\r\n    return await Review.find({ isSelect: true, isApproved: true }).populate('userId');\r\n  } catch (error) {\r\n    console.log(`[Review Repository] Failed to fetch selected reviews: ${error}`);\r\n    return null;\r\n  }\r\n};"]}