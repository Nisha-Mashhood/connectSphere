{"version":3,"file":"mentor.repositry.js","sourceRoot":"","sources":["../../src/repositories/mentor.repositry.ts"],"names":[],"mappings":"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","sourcesContent":["import Mentor, { IMentor } from \"../models/mentor.model.js\";\r\n\r\n// Submit mentor request\r\nexport const submitMentorRequest = async (data: Partial<IMentor>): Promise<IMentor> => {\r\n  return await Mentor.create(data);\r\n};\r\n\r\n//get all mentor request\r\nexport const getAllMentorRequests = async (\r\n  page: number = 1,\r\n  limit: number = 10,\r\n  search: string = \"\",\r\n  status: string = \"\",\r\n  sort: string = \"desc\"\r\n): Promise<{ mentors: IMentor[]; total: number }> => {\r\n  const query: any = {};\r\n  if (status) query.isApproved = status;\r\n\r\n  const mentors = await Mentor.find(query)\r\n    .populate(\"userId\", \"name email\")\r\n    .populate(\"skills\", \"name\")\r\n    .sort({ createdAt: sort === \"desc\" ? -1 : 1 });\r\n\r\n  // Filter in memory\r\n  const filteredMentors = search\r\n    ? mentors.filter((mentor) => {\r\n        const user = mentor.userId as any;\r\n        return (\r\n          (user?.name && user.name.toLowerCase().includes(search.toLowerCase())) ||\r\n          (user?.email && user.email.toLowerCase().includes(search.toLowerCase()))\r\n        );\r\n      })\r\n    : mentors;\r\n\r\n  const total = filteredMentors.length;\r\n  const paginatedMentors = filteredMentors.slice((page - 1) * limit, page * limit);\r\n\r\n  return { mentors: paginatedMentors, total };\r\n};\r\n\r\n//get All Mentors\r\nexport const getAllMentors = async (): Promise<IMentor[]> => { \r\n  const mentor = await Mentor.find({ isApproved: \"Completed\" })\r\n  .populate(\"userId\")\r\n  .populate(\"skills\");\r\n  return mentor\r\n}\r\n\r\n//Get mentor Details\r\nexport const getMentorDetails = async(id : string): Promise<IMentor | null> => {\r\n  const mentor =  await Mentor.findById(id)\r\n    .populate(\"userId\") \r\n    .populate(\"skills\"); \r\n    return mentor;\r\n }\r\n\r\n// Approve mentor request\r\nexport const approveMentorRequest = async (id: string): Promise<void> => {\r\n  await Mentor.findByIdAndUpdate(\r\n    id,\r\n    { isApproved: \"Completed\" },\r\n    { new: true }\r\n  );\r\n  return \r\n};\r\n\r\n// Reject mentor request\r\nexport const rejectMentorRequest = async (id: string): Promise<void> => {\r\n  await Mentor.findByIdAndUpdate(\r\n    id,\r\n    { isApproved: \"Rejected\" },\r\n    { new: true }\r\n  );\r\n  return \r\n};\r\n\r\n// Cancel mentorship\r\nexport const cancelMentorship = async (id: string) => {\r\n  return await Mentor.findByIdAndUpdate(\r\n    id,\r\n    { isApproved: \"Processing\" },\r\n    { new: true }  \r\n  );\r\n};\r\n\r\n// Get mentor by userId\r\nexport const getMentorById = async (id: string): Promise<IMentor | null> => {\r\n  const mentor =  await Mentor.findById(id)\r\n    .populate(\"userId\", \"name email\") \r\n    .populate(\"skills\", \"name\"); \r\n    return mentor;\r\n};\r\n\r\nexport const getMentorByUserId = async(id: string) :Promise<IMentor | null> => {\r\n  const mentor = await Mentor.findOne({ userId: id })\r\n  .populate(\"userId\")\r\n  .populate(\"skills\");\r\n  return mentor\r\n}\r\n\r\n// Update  for mentor with mentorId\r\nexport const updateMentorById = async (\r\n  mentorId: string,\r\n  updateData: Partial<IMentor>\r\n): Promise<IMentor | null> => {\r\n  return await Mentor.findByIdAndUpdate(mentorId, updateData, { new: true });\r\n};\r\n\r\n\r\n\r\n// Function to save a new mentor request (pending admin review)\r\nexport const saveMentorRequest = async (mentorData: any) => {\r\n  try {\r\n    const mentor = new Mentor(mentorData); \r\n    await mentor.save(); \r\n    return mentor; \r\n  } catch (error:any) {\r\n    throw new Error(\"Error saving mentor request: \" + error.message);\r\n  }\r\n}"]}