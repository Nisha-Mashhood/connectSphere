{"version":3,"file":"mentor.repositry.js","sourceRoot":"","sources":["../../src/repositories/mentor.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,MAAmB,MAAM,2BAA2B,CAAC;AAE5D,wBAAwB;AACxB,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,IAAsB,EAAoB,EAAE;IACpF,OAAO,MAAM,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF,0BAA0B;AAC1B,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,IAAwB,EAAE;IACjE,OAAO,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,yBAAyB;AACzB,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,EAAU,EAAiB,EAAE;IACtE,MAAM,MAAM,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3D,CAAC,CAAC;AAEF,wBAAwB;AACxB,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,EAAU,EAAiB,EAAE;IACrE,MAAM,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAAc,EAA2B,EAAE;IACjF,OAAO,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF,mCAAmC;AACnC,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EACnC,QAAgB,EAChB,UAA4B,EACH,EAAE;IAC3B,OAAO,MAAM,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7E,CAAC,CAAC","sourcesContent":["import Mentor, { IMentor } from \"../models/mentor.model.js\";\r\n\r\n// Submit mentor request\r\nexport const submitMentorRequest = async (data: Partial<IMentor>): Promise<IMentor> => {\r\n  return await Mentor.create(data);\r\n};\r\n\r\n// Get all mentor requests\r\nexport const getAllMentorRequests = async (): Promise<IMentor[]> => {\r\n  return await Mentor.find().populate(\"userId\", \"fullName email\");\r\n};\r\n\r\n// Approve mentor request\r\nexport const approveMentorRequest = async (id: string): Promise<void> => {\r\n  await Mentor.findByIdAndUpdate(id, { isApproved: true });\r\n};\r\n\r\n// Reject mentor request\r\nexport const rejectMentorRequest = async (id: string): Promise<void> => {\r\n  await Mentor.findByIdAndDelete(id);\r\n};\r\n\r\n// Get mentor by userId\r\nexport const getMentorByUserId = async (userId: string): Promise<IMentor | null> => {\r\n  return await Mentor.findOne({ userId });\r\n};\r\n\r\n// Update  for mentor with mentorId\r\nexport const updateMentorById = async (\r\n  mentorId: string,\r\n  updateData: Partial<IMentor>\r\n): Promise<IMentor | null> => {\r\n  return await Mentor.findByIdAndUpdate(mentorId, updateData, { new: true });\r\n};"]}