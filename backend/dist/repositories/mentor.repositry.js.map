{"version":3,"file":"mentor.repositry.js","sourceRoot":"","sources":["../../src/repositories/mentor.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAClD,OAAO,MAAmB,MAAM,2BAA2B,CAAC;AAE5D,wBAAwB;AACxB,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,IAAsB,EAAoB,EAAE;IACpF,OAAO,MAAM,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF,wBAAwB;AACxB,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,IAAwB,EAAE;IACjE,OAAO,MAAM,MAAM,CAAC,IAAI,EAAE;SACvB,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,wBAAwB;SACzD,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,6CAA6C;AAC9E,CAAC,CAAC;AAEF,yBAAyB;AACzB,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,EAAU,EAAiB,EAAE;IACtE,MAAM,MAAM,CAAC,iBAAiB,CAC5B,EAAE,EACF,EAAE,UAAU,EAAE,WAAW,EAAE,EAC3B,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC;IACF,OAAM;AACR,CAAC,CAAC;AAEF,wBAAwB;AACxB,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,EAAU,EAAiB,EAAE;IACrE,MAAM,MAAM,CAAC,iBAAiB,CAC5B,EAAE,EACF,EAAE,UAAU,EAAE,UAAU,EAAE,EAC1B,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC;IACF,OAAM;AACR,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,EAAU,EAA2B,EAAE;IAC7E,MAAM,MAAM,GAAI,MAAM,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;SACtC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC;SAChC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC5B,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC;AAEF,mCAAmC;AACnC,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EACnC,QAAgB,EAChB,UAA4B,EACH,EAAE;IAC3B,OAAO,MAAM,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,IAAG,EAAE;IACjC,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;AACnD,CAAC,CAAA;AAGD,+DAA+D;AAC/D,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,UAAe,EAAE,EAAE;IACzD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAS,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;AACH,CAAC,CAAA","sourcesContent":["import { Skill } from \"../models/skills.model.js\";\r\nimport Mentor, { IMentor } from \"../models/mentor.model.js\";\r\n\r\n// Submit mentor request\r\nexport const submitMentorRequest = async (data: Partial<IMentor>): Promise<IMentor> => {\r\n  return await Mentor.create(data);\r\n};\r\n\r\n//get all mentor request\r\nexport const getAllMentorRequests = async (): Promise<IMentor[]> => {\r\n  return await Mentor.find()\r\n    .populate(\"userId\", \"name email\") // Populate user details\r\n    .populate(\"skills\", \"name\"); // Populate skills with only the 'name' field\r\n};\r\n\r\n// Approve mentor request\r\nexport const approveMentorRequest = async (id: string): Promise<void> => {\r\n  await Mentor.findByIdAndUpdate(\r\n    id,\r\n    { isApproved: \"Completed\" },\r\n    { new: true }\r\n  );\r\n  return \r\n};\r\n\r\n// Reject mentor request\r\nexport const rejectMentorRequest = async (id: string): Promise<void> => {\r\n  await Mentor.findByIdAndUpdate(\r\n    id,\r\n    { isApproved: \"Rejected\" },\r\n    { new: true }\r\n  );\r\n  return \r\n};\r\n\r\n// Get mentor by userId\r\nexport const getMentorByUserId = async (id: string): Promise<IMentor | null> => {\r\n  const mentor =  await Mentor.findById(id)\r\n    .populate(\"userId\", \"name email\") \r\n    .populate(\"skills\", \"name\"); \r\n    return mentor;\r\n};\r\n\r\n// Update  for mentor with mentorId\r\nexport const updateMentorById = async (\r\n  mentorId: string,\r\n  updateData: Partial<IMentor>\r\n): Promise<IMentor | null> => {\r\n  return await Mentor.findByIdAndUpdate(mentorId, updateData, { new: true });\r\n};\r\n\r\nexport const getSkills = async() =>{\r\n  return await Skill.find({}, { name: 1, _id: 1 });\r\n}\r\n\r\n\r\n// Function to save a new mentor request (pending admin review)\r\nexport const saveMentorRequest = async (mentorData: any) => {\r\n  try {\r\n    const mentor = new Mentor(mentorData); \r\n    await mentor.save(); \r\n    return mentor; \r\n  } catch (error:any) {\r\n    throw new Error(\"Error saving mentor request: \" + error.message);\r\n  }\r\n}"]}