{"version":3,"file":"task.repositry.js","sourceRoot":"","sources":["../../src/repositories/task.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAEtD,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,QAAwB,EAAkB,EAAE;IAC/E,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,MAAc,EAAyB,EAAE;IAC1E,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,MAAc,EAAE,OAAuB,EAAyB,EAAE;IACjG,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACtE,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,MAAc,EAAiB,EAAE;IAChE,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,WAAmB,EAAE,SAAiB,EAAoB,EAAE;IACnG,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;QAC5B,GAAG,EAAE;YACH,EAAE,WAAW,EAAE,SAAS,EAAE;YAC1B,EAAE,cAAc,EAAE,SAAS,EAAE;YAC7B,EAAE,sBAAsB,EAAE,SAAS,EAAE;SACtC;KACF,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAEzB,OAAO,KAAK,CAAC;AACf,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,QAAmC,EAAyB,EAAE;IACrH,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,MAAc,EAAE,MAAiE,EAAyB,EAAE;IACjJ,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACzE,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,EAAE,MAAc,EAAE,OAAuB,EAAyB,EAAE;IAC/F,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACtE,CAAC,CAAA","sourcesContent":["import { ITask, Task } from '../models/task.modal.js';\r\n\r\nexport const createTaskRepo = async (taskData: Partial<ITask>): Promise<ITask> => {\r\n  const task = new Task(taskData);\r\n  return await task.save();\r\n}\r\n\r\nexport const findTaskById = async (taskId: string): Promise<ITask | null> => {\r\n  return await Task.findById(taskId);\r\n}\r\n\r\nexport const updateTask = async (taskId: string, updates: Partial<ITask>): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, updates, { new: true });\r\n}\r\n\r\nexport const deleteTask = async (taskId: string): Promise<void> => {\r\n  await Task.findByIdAndDelete(taskId);\r\n}\r\n\r\nexport const findTasksByContext = async (contextType: string, contextId: string): Promise<ITask[]> => {\r\n  const tasks = await Task.find({\r\n    $or: [\r\n      { contextType, contextId }, \r\n      { assignedGroups: contextId }, \r\n      { assignedCollaborations: contextId } \r\n    ]\r\n  }).populate('createdBy'); \r\n\r\n  return tasks;\r\n}\r\n\r\nexport const updateTaskPriority = async (taskId: string, priority: 'low' | 'medium' | 'high'): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, { priority }, { new: true });\r\n}\r\n\r\nexport const updateTaskStatus = async (taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'not-completed'): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, { status }, { new: true });\r\n}\r\n\r\nexport const editTask = async (taskId: string, updates: Partial<ITask>): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, updates, { new: true });\r\n}"]}