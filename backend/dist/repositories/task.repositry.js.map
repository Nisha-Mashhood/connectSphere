{"version":3,"file":"task.repositry.js","sourceRoot":"","sources":["../../src/repositories/task.repositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITask, Task } from '../models/task.modal.js';\r\n\r\nexport const createTaskRepo = async (taskData: Partial<ITask>): Promise<ITask> => {\r\n  const task = new Task(taskData);\r\n  return await task.save();\r\n}\r\n\r\nexport const findTaskById = async (taskId: string): Promise<ITask | null> => {\r\n  return await Task.findById(taskId);\r\n}\r\n\r\nexport const updateTask = async (taskId: string, updates: Partial<ITask>): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, updates, { new: true });\r\n}\r\n\r\nexport const deleteTask = async (taskId: string): Promise<void> => {\r\n  await Task.findByIdAndDelete(taskId);\r\n}\r\n\r\nexport const findTasksByContext = async (contextType: string, contextId: string, userId: string): Promise<ITask[]> => {\r\n  let query: any;\r\n  let populatePaths: any[];\r\n\r\n  if (contextType === \"profile\" && userId) {\r\n    // Profile context: tasks where user is creator, assignee, or contextId matches\r\n    query = {\r\n      contextType: \"profile\",\r\n      $or: [\r\n        { contextId },\r\n        { assignedUsers: userId },\r\n        { createdBy: userId },\r\n      ],\r\n    };\r\n    populatePaths = [\r\n      { path: \"createdBy\", model: \"User\" },\r\n      { path: \"assignedUsers\", model: \"User\" },\r\n      { path: \"contextId\", model: \"User\" },\r\n    ];\r\n  } else {\r\n    // Group or Collaboration context: tasks matching contextType and contextId\r\n    query = { contextType, contextId };\r\n    populatePaths = [\r\n      { path: \"createdBy\", model: \"User\" },\r\n      {\r\n        path: \"contextId\",\r\n        model: contextType === \"group\" ? \"Group\" : \"Collaboration\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  return await Task.find(query)\r\n    .populate(populatePaths)\r\n    .sort({ createdAt: -1 });\r\n}\r\n\r\nexport const updateTaskPriority = async (taskId: string, priority: 'low' | 'medium' | 'high'): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, { priority }, { new: true });\r\n}\r\n\r\nexport const updateTaskStatus = async (taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'not-completed'): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, { status }, { new: true });\r\n}\r\n\r\nexport const editTask = async (taskId: string, updates: Partial<ITask>): Promise<ITask | null> => {\r\n  return await Task.findByIdAndUpdate(taskId, updates, { new: true });\r\n}"]}