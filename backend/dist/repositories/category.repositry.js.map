{"version":3,"file":"category.repositry.js","sourceRoot":"","sources":["../../src/repositories/category.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAqB,MAAM,6BAA6B,CAAC;AAE1E,kBAAkB;AAClB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,IAAgC,EAAE,EAAE;IACvE,OAAO,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,qBAAqB;AACrB,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,IAAI,EAAE;IACzC,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC/B,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IAClD,OAAO,MAAM,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACrC,CAAC,CAAC;AAGF,oBAAoB;AACpB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,IAAgC,EAAE,EAAE;IACnF,OAAO,MAAM,QAAQ,CAAC,iBAAiB,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACnE,CAAC,CAAC;AAEF,oBAAoB;AACpB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IACjD,OAAO,MAAM,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,oCAAoC;AACpC,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,IAAY,EAAE,SAAkB,EAAoB,EAAE;IAClG,MAAM,MAAM,GAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,+CAA+C;IAC7E,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,wCAAwC;IAC3E,CAAC;IACD,MAAM,gBAAgB,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxD,OAAO,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,+DAA+D;AACzG,CAAC,CAAC","sourcesContent":["import { Category, CategoryInterface } from \"../models/category.model.js\";\r\n\r\n// Create Category\r\nexport const createCategory = async (data: Partial<CategoryInterface>) => {\r\n  return await Category.create(data);\r\n};\r\n\r\n// Get all categories\r\nexport const getAllCategories = async () => {\r\n  return await Category.find();\r\n};\r\n\r\n// Get a category by ID\r\nexport const getCategoryById = async (id: string) => {\r\n  return await Category.findById(id);\r\n};\r\n\r\n\r\n// Update a category\r\nexport const updateCategory = async (id: string, data: Partial<CategoryInterface>) => {\r\n  return await Category.findByIdAndUpdate(id, data, { new: true });\r\n};\r\n\r\n// Delete a category\r\nexport const deleteCategory = async (id: string) => {\r\n  return await Category.findByIdAndDelete(id);\r\n};\r\n\r\n// Check for duplicate category name\r\nexport const isDuplicateCategoryName = async (name: string, excludeId?: string): Promise<boolean> => {\r\n  const filter: any = { name }; // We are looking for a category with this name\r\n  if (excludeId) {\r\n    filter._id = { $ne: excludeId }; // Exclude a specific category by its ID\r\n  }\r\n  const existingCategory = await Category.findOne(filter);\r\n  return existingCategory ? true : false; // If a category is found, return true; otherwise, return false\r\n};\r\n\r\n\r\n"]}