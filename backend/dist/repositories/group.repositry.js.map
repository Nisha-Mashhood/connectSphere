{"version":3,"file":"group.repositry.js","sourceRoot":"","sources":["../../src/repositories/group.repositry.ts"],"names":[],"mappings":"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","sourcesContent":["import GroupRequest from \"../models/groupRequest.model.js\";\r\nimport Group from \"../models/group.model.js\";\r\n\r\nexport interface GroupFormData {\r\n    name: string;\r\n    bio: string;\r\n    price: number;\r\n    maxMembers: number;\r\n    availableSlots: { day: string; timeSlots: string[] }[];\r\n    profilePic?: string;\r\n    coverPic?: string;\r\n    adminId: string;\r\n    createdAt?: Date;\r\n    members?: string[];\r\n  }\r\n\r\nexport const createGroupRepository = async (groupData: GroupFormData) => {\r\n    // Create a new group \r\n    const newGroup = new Group(groupData);\r\n  \r\n    return await newGroup.save();\r\n  };\r\n\r\nexport const getGroupsByAdminId = async(adminId:string) =>{\r\ntry {\r\n    const groups = await Group.find({ adminId })\r\n    return groups;\r\n} catch (error:any) {\r\n    throw new Error(`Error fetching groups: ${error.message}`);\r\n}\r\n}\r\n\r\nexport const getGroups = async() =>{\r\n    try {\r\n        const groups = await Group.find()\r\n        return groups;\r\n    } catch (error:any) {\r\n        throw new Error(`Error fetching groups: ${error.message}`);\r\n    }\r\n    }\r\n\r\n    export const sendRequestToGroup = async (data: { groupId: string; userId: string }) => {\r\n        try {\r\n          const newRequest = await GroupRequest.create({\r\n            groupId: data.groupId,\r\n            userId: data.userId,\r\n            status: \"Pending\",\r\n            paymentStatus: \"Pending\",\r\n          });\r\n      \r\n          return newRequest;\r\n        } catch (error:any) {\r\n          throw new Error(\"Error creating group request: \" + error.message);\r\n        }\r\n      };\r\n\r\n      export const getGroupRequestsByGroupId = async (groupId: string) => {\r\n        try {\r\n          return await GroupRequest.find({ groupId })\r\n          .populate(\"groupId\")\r\n          .populate(\"userId\")\r\n        } catch (error:any) {\r\n          throw new Error(\"Error fetching group requests: \" + error.message);\r\n        }\r\n      };\r\n\r\n      export const getGroupRequestsByAdminId = async (adminId: string) => {\r\n        try {\r\n          return await GroupRequest.find({ adminId })\r\n          .populate(\"groupId\")\r\n          .populate(\"userId\")\r\n        } catch (error:any) {\r\n          throw new Error(\"Error fetching group requests: \" + error.message);\r\n        }\r\n      };\r\n      export const getGroupRequestsByuserId = async (userId: string) => {\r\n        try {\r\n          return await GroupRequest.find({ userId })\r\n          .populate(\"groupId\")\r\n          .populate(\"userId\")\r\n        } catch (error:any) {\r\n          throw new Error(\"Error fetching group requests: \" + error.message);\r\n        }\r\n      };\r\n\r\n      export const updateGroupRequestStatus = async (requestId: string, status: \"Approved\" | \"Rejected\") => {\r\n        try {\r\n          return await GroupRequest.findByIdAndUpdate(requestId, { status }, { new: true });\r\n        } catch (error:any) {\r\n          throw new Error(\"Error updating request status: \" + error.message);\r\n        }\r\n      };"]}