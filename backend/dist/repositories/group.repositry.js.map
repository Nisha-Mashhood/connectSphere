{"version":3,"file":"group.repositry.js","sourceRoot":"","sources":["../../src/repositories/group.repositry.ts"],"names":[],"mappings":"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","sourcesContent":["import GroupRequest from \"../models/groupRequest.model.js\";\r\nimport Group, { GroupDocument } from \"../models/group.model.js\";\r\nimport mongoose from \"mongoose\";\r\n\r\n\r\nexport interface GroupFormData {\r\n  name: string;\r\n  bio: string;\r\n  price: number;\r\n  maxMembers: number;\r\n  availableSlots: { day: string; timeSlots: string[] }[];\r\n  profilePic?: string;\r\n  coverPic?: string;\r\n  startDate?: string; \r\n  adminId: string;\r\n  createdAt?: Date;\r\n  members?: string[];\r\n}\r\n\r\nexport const createGroupRepository = async (groupData: GroupFormData):Promise<GroupDocument> => {\r\n  const newGroup = new Group(groupData);\r\n  return await newGroup.save();\r\n};\r\n\r\nexport const getGroupsByAdminId = async (adminId: string) => {\r\n  try {\r\n    const groups = await Group.find({ adminId });\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching groups: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const getGroupsByGroupId = async(groupId : string) =>{\r\n  try {\r\n    const groups = await Group.findById(groupId)\r\n    .populate(\"members.userId\")\r\n    .populate(\"adminId\")\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching groups: ${error.message}`);\r\n  }\r\n}\r\n\r\nexport const getGroups = async () => {\r\n  try {\r\n    const groups = await Group.find();\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching groups: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const sendRequestToGroup = async (data: {\r\n  groupId: string;\r\n  userId: string;\r\n}) => {\r\n  try {\r\n    const newRequest = await GroupRequest.create({\r\n      groupId: data.groupId,\r\n      userId: data.userId,\r\n      status: \"Pending\",\r\n      paymentStatus: \"Pending\",\r\n    });\r\n\r\n    return newRequest;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error creating group request: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const getGroupRequestsByGroupId = async (groupId: string) => {\r\n  try {\r\n    return await GroupRequest.find({ groupId })\r\n      .populate({\r\n        path: \"groupId\",\r\n        populate: {\r\n          path: \"members.userId\", // Populating userId inside members array\r\n          model: \"User\", \r\n        },\r\n      })\r\n      .populate(\"userId\"); // Populating the user who made the request\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching group requests: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const getGroupRequestsByAdminId = async (adminId: string) => {\r\n  try {\r\n    return await GroupRequest.find({ adminId })\r\n      .populate(\"groupId\")\r\n      .populate(\"userId\");\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching group requests: \" + error.message);\r\n  }\r\n};\r\nexport const getGroupRequestsByuserId = async (userId: string) => {\r\n  try {\r\n    return await GroupRequest.find({ userId })\r\n      .populate(\"groupId\")\r\n      .populate(\"userId\");\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching group requests: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const findRequestById = async (id: string) => {\r\n  try {\r\n    return await GroupRequest.findById(id);\r\n    \r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching group request by ID: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const findGrouptById = async (id:any) => {\r\n  try {\r\n    return await Group.findById(id)\r\n    .populate(\"members.userId\")\r\n     .populate(\"adminId\");\r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching group  by ID: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const updateGroupReqStatus = async (requestId: string, status: \"Accepted\" | \"Rejected\") => {\r\n  try {\r\n    const request = await GroupRequest.findById(requestId);\r\n    if (!request) {\r\n      throw new Error(\"Request not found\");\r\n    }\r\n\r\n    request.status = status;\r\n    await request.save();\r\n    return request;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error updating request status: \" + error.message);\r\n  }\r\n};\r\n\r\n\r\n// Function to update payment status after successful payment\r\nexport const updateGroupPaymentStatus = async (\r\n  requestId: string,\r\n  amountPaid: number\r\n) => {\r\n  try {\r\n    const request = await GroupRequest.findById(requestId);\r\n    if (!request) {\r\n      throw new Error(\"Request not found\");\r\n    }\r\n\r\n    request.paymentStatus = \"Completed\";\r\n    request.amountPaid = amountPaid;\r\n    await request.save();\r\n\r\n    // Add the user to the group as a member\r\n    await addMemberToGroup(request.groupId.toString(), request.userId.toString());\r\n    \r\n    // Delete the group request since payment is completed\r\n    await deleteGroupRequest(requestId);\r\n  } catch (error: any) {\r\n    throw new Error(\"Error updating payment status: \" + error.message);\r\n  }\r\n};\r\n\r\n// Function to add a user to a group if they are not already a member\r\nexport const addMemberToGroup = async (groupId: string, userId: string) => {\r\n  try {\r\n    const group = await Group.findById(groupId);\r\n    if (!group) {\r\n      throw new Error(\"Group not found\");\r\n    }\r\n\r\n    // Check if the user is already a member of the group\r\n    const isUserAlreadyInGroup = group.members.some(\r\n      (member: any) => member.userId.toString() === userId.toString()\r\n    );\r\n    \r\n    if (!isUserAlreadyInGroup) {\r\n      group.members.push({ userId: new mongoose.Types.ObjectId(userId), joinedAt: new Date() });\r\n      await group.save();\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(\"Error adding member to group: \" + error.message);\r\n  }\r\n};\r\n\r\n// Function to delete a group request after it has been processed\r\nexport const deleteGroupRequest = async (requestId: string) => {\r\n  try {\r\n    await GroupRequest.findByIdAndDelete(requestId);\r\n  } catch (error: any) {\r\n    throw new Error(\"Error deleting group request: \" + error.message);\r\n  }\r\n};\r\n\r\n// Remove a user from the group's member list\r\nexport const removeGroupMemberById = async (groupId: string, userId: string) => {\r\n  return await Group.findByIdAndUpdate(\r\n    groupId,\r\n    { $pull: { members: { userId } } },\r\n    { new: true }\r\n  );\r\n};\r\n\r\n// Delete a group by ID\r\nexport const deleteGroupById = async (groupId: string) => {\r\n  return await Group.findByIdAndDelete(groupId);\r\n};\r\n\r\n// Delete all related group requests when deleting a group\r\nexport const deleteGroupRequestsByGroupId = async (groupId: string) => {\r\n  return await GroupRequest.deleteMany({ groupId });\r\n};\r\n\r\n//update group image\r\nexport const updateGroupImageRepositry = async (\r\n  groupId: string,\r\n  updateData: { profilePic?: string; coverPic?: string }\r\n) => {\r\n  return await Group.findByIdAndUpdate(groupId, updateData, { new: true });\r\n};\r\n\r\n//get the group details for group members\r\nexport const groupDetilsByUserId = async(userId: string) =>{\r\n  const userObjectId = new mongoose.Types.ObjectId(userId);\r\n  try {\r\n    const groupDetails = await Group.find( {\"members.userId\": userObjectId} )\r\n        .populate(\"members.userId\", \"name email jobTitle profilePic\")\r\n        .populate(\"adminId\")\r\n        .exec();\r\n        return groupDetails;\r\n  } catch (error) {\r\n    console.error(\"Error in GroupRepository:\", error);\r\n    throw new Error(\"Error retrieving group details from the database\");\r\n  }\r\n}\r\n\r\n//FOR ADMIN\r\nexport const getAllGrouprequsets = async() =>{\r\n  try {\r\n    const AllGrouprequsets = await GroupRequest.find()\r\n    .populate(\"groupId\")\r\n    .populate(\"userId\");\r\n    return AllGrouprequsets;\r\n  } catch (error:any) {\r\n    throw new Error(`Error fetching group Requsets: ${error.message}`);\r\n  }\r\n}\r\n\r\n//get the group requset details using requset Id\r\nexport const getGroupRequestById = async (requestId: string) => {\r\n  try {\r\n    const groupRequestDetails = await GroupRequest.findById(requestId)\r\n      .populate({\r\n        path: \"groupId\",\r\n        populate: [\r\n          {\r\n            path: \"adminId\",\r\n            model: \"User\", // adminId of the group\r\n          },\r\n          {\r\n            path: \"members.userId\",\r\n            model: \"User\", //userId of each member in the group\r\n          },\r\n        ],\r\n      })\r\n      .populate(\"userId\"); //the user who made the request\r\n\r\n    return groupRequestDetails;\r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching group request details: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Check if a user is a member of a group\r\nexport const isUserInGroup = async (groupId: string, userId: string): Promise<boolean> => {\r\n  try {\r\n    const group = await Group.findOne({\r\n      _id: groupId,\r\n      \"members.userId\": userId,\r\n    }).exec();\r\n    return !!group;\r\n  } catch (error: any) {\r\n    throw new Error(`Error checking group membership: ${error.message}`);\r\n  }\r\n};"]}