{"version":3,"file":"contactUs.repositry.js","sourceRoot":"","sources":["../../src/repositories/contactUs.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,cAAmC,MAAM,mCAAmC,CAAC;AAEpF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,IAI1C,EAA4B,EAAE;IAC7B,IAAI,CAAC;QACH,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;QAC5B,OAAO,cAAc,CAAC;IACxB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IACtE,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,IAAgC,EAAE;IAC1E,IAAI,CAAC;QACH,OAAO,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7D,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IACxE,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,gBAAwB,EAA4B,EAAE;IAC5F,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,gBAAgB,CACnD,EAAE,gBAAgB,EAAE,EACpB,EAAE,UAAU,EAAE,IAAI,EAAE,EACpB,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC;QACF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,iCAAiC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IACrE,CAAC;AACH,CAAC,CAAC","sourcesContent":["import ContactMessage, { IContactMessage } from \"../models/ContactMessage.modal.js\";\r\n\r\nexport const createContactMessage = async (data: {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}): Promise<IContactMessage> => {\r\n  try {\r\n    const contactMessage = new ContactMessage(data);\r\n    await contactMessage.save();\r\n    return contactMessage;\r\n  } catch (error: any) {\r\n    throw new Error(\"Failed to save contact message: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const getAllContactMessages = async (): Promise<IContactMessage[]> => {\r\n  try {\r\n    return await ContactMessage.find().sort({ createdAt: -1 });\r\n  } catch (error: any) {\r\n    throw new Error(\"Failed to fetch contact messages: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const updateReplyStatus = async (contactMessageId: string): Promise<IContactMessage> => {\r\n  try {\r\n    const message = await ContactMessage.findOneAndUpdate(\r\n      { contactMessageId },\r\n      { givenReply: true },\r\n      { new: true }\r\n    );\r\n    if (!message) {\r\n      throw new Error(\"Contact message not found\");\r\n    }\r\n    return message;\r\n  } catch (error: any) {\r\n    throw new Error(\"Failed to update reply status: \" + error.message);\r\n  }\r\n};"]}