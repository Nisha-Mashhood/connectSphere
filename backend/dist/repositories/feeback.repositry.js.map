{"version":3,"file":"feeback.repositry.js","sourceRoot":"","sources":["../../src/repositories/feeback.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,QAAuB,MAAM,6BAA6B,CAAC;AAClE,OAAO,QAAQ,MAAM,UAAU,CAAC;AAEhC,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,YAAgC,EACZ,EAAE;IACtB,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC5C,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EACzC,QAAgB,EACM,EAAE;IACxB,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC;QACzB,QAAQ,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC;KAChD,CAAC;SACC,QAAQ,CAAC,QAAQ,EAAE,iBAAiB,CAAC;SACrC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EACvC,MAAc,EACQ,EAAE;IACxB,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;SACxE,QAAQ,CAAC,UAAU,EAAE,iBAAiB,CAAC;SACvC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,KAAK,EAC/C,eAAuB,EACI,EAAE;IAC7B,OAAO,MAAM,QAAQ,CAAC,OAAO,CAAC;QAC5B,eAAe,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC;KAC9D,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EACzC,QAAgB,EACC,EAAE;IACnB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC;QACtC,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE;QAC/D;YACE,MAAM,EAAE;gBACN,GAAG,EAAE,IAAI;gBACT,aAAa,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;gBAClC,oBAAoB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE;gBAChD,gBAAgB,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE;gBACxC,kBAAkB,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE;aAC7C;SACF;KACF,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,IAAI,CAAC,CAAC;AACvC,CAAC,CAAC","sourcesContent":["import Feedback, { IFeedback } from \"../models/feedback.modal.js\";\r\nimport mongoose from \"mongoose\";\r\n\r\nexport const createFeedback = async (\r\n  feedbackData: Partial<IFeedback>\r\n): Promise<IFeedback> => {\r\n  const feedback = new Feedback(feedbackData);\r\n  return await feedback.save();\r\n};\r\n\r\nexport const getFeedbacksByMentorId = async (\r\n  mentorId: string\r\n): Promise<IFeedback[]> => {\r\n  return await Feedback.find({\r\n    mentorId: new mongoose.Types.ObjectId(mentorId),\r\n  })\r\n    .populate(\"userId\", \"name profilePic\")\r\n    .sort({ createdAt: -1 });\r\n};\r\n\r\nexport const getFeedbacksByUserId = async (\r\n  userId: string\r\n): Promise<IFeedback[]> => {\r\n  return await Feedback.find({ userId: new mongoose.Types.ObjectId(userId) })\r\n    .populate(\"mentorId\", \"name profilePic\")\r\n    .sort({ createdAt: -1 });\r\n};\r\n\r\nexport const getFeedbackByCollaborationId = async (\r\n  collaborationId: string\r\n): Promise<IFeedback | null> => {\r\n  return await Feedback.findOne({\r\n    collaborationId: new mongoose.Types.ObjectId(collaborationId),\r\n  });\r\n};\r\n\r\nexport const getMentorAverageRating = async (\r\n  mentorId: string\r\n): Promise<number> => {\r\n  const result = await Feedback.aggregate([\r\n    { $match: { mentorId: new mongoose.Types.ObjectId(mentorId) } },\r\n    {\r\n      $group: {\r\n        _id: null,\r\n        averageRating: { $avg: \"$rating\" },\r\n        averageCommunication: { $avg: \"$communication\" },\r\n        averageExpertise: { $avg: \"$expertise\" },\r\n        averagePunctuality: { $avg: \"$punctuality\" },\r\n      },\r\n    },\r\n  ]);\r\n  return result[0]?.averageRating || 0;\r\n};\r\n"]}