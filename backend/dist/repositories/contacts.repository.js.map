{"version":3,"file":"contacts.repository.js","sourceRoot":"","sources":["../../src/repositories/contacts.repository.ts"],"names":[],"mappings":"AAAA,OAAO,OAAqB,MAAM,6BAA6B,CAAC;AAChE,OAAO,QAAQ,MAAM,UAAU,CAAC;AAEhC,wCAAwC;AACxC,MAAM,UAAU,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEnE,mCAAmC;AACnC,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,WAA8B,EAAqB,EAAE;IACvF,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;YAC1B,GAAG,WAAW;YACd,MAAM,EAAE,WAAW,CAAC,MAAM,IAAI,OAAO,WAAW,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM;YAC1H,YAAY,EAAE,WAAW,CAAC,YAAY,IAAI,OAAO,WAAW,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,YAAY;YACxJ,eAAe,EAAE,WAAW,CAAC,eAAe,IAAI,OAAO,WAAW,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,eAAe;YACvK,gBAAgB,EAAE,WAAW,CAAC,gBAAgB,IAAI,OAAO,WAAW,CAAC,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,gBAAgB;YAC5K,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,OAAO,WAAW,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO;SAChI,CAAC,CAAC;QACH,OAAO,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC,CAAC;AAEF,gEAAgE;AAChE,MAAM,CAAC,MAAM,8BAA8B,GAAG,KAAK,EACjD,MAAc,EACd,YAAoB,EACpB,eAAuB,EACF,EAAE;IACvB,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;YACxC;gBACE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC;gBAC1B,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC;gBACtC,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC;gBAC5C,IAAI,EAAE,aAAa;aACpB;YACD;gBACE,MAAM,EAAE,UAAU,CAAC,YAAY,CAAC;gBAChC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC;gBAChC,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC;gBAC5C,IAAI,EAAE,aAAa;aACpB;SACF,CAAC,CAAC;QACH,OAAO,QAAsB,CAAC;IAChC,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,8CAA8C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACjF,CAAC;AACH,CAAC,CAAC","sourcesContent":["import Contact, { IContact } from \"../models/contacts.model.js\";\r\nimport mongoose from \"mongoose\";\r\n\r\n// Utility to convert string to ObjectId\r\nconst toObjectId = (id: string) => new mongoose.Types.ObjectId(id);\r\n\r\n// Create a single Contact document\r\nexport const createContact = async (contactData: Partial<IContact>): Promise<IContact> => {\r\n  try {\r\n    const contact = new Contact({\r\n      ...contactData,\r\n      userId: contactData.userId && typeof contactData.userId === \"string\" ? toObjectId(contactData.userId) : contactData.userId,\r\n      targetUserId: contactData.targetUserId && typeof contactData.targetUserId === \"string\" ? toObjectId(contactData.targetUserId) : contactData.targetUserId,\r\n      collaborationId: contactData.collaborationId && typeof contactData.collaborationId === \"string\" ? toObjectId(contactData.collaborationId) : contactData.collaborationId,\r\n      userConnectionId: contactData.userConnectionId && typeof contactData.userConnectionId === \"string\" ? toObjectId(contactData.userConnectionId) : contactData.userConnectionId,\r\n      groupId: contactData.groupId && typeof contactData.groupId === \"string\" ? toObjectId(contactData.groupId) : contactData.groupId,\r\n    });\r\n    return await contact.save();\r\n  } catch (error: any) {\r\n    throw new Error(`Error creating contact: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Create multiple Contact documents (e.g., for user and mentor)\r\nexport const createContactsForCollaboration = async (\r\n  userId: string,\r\n  mentorUserId: string,\r\n  collaborationId: string\r\n): Promise<IContact[]> => {\r\n  try {\r\n    const contacts = await Contact.insertMany([\r\n      {\r\n        userId: toObjectId(userId),\r\n        targetUserId: toObjectId(mentorUserId),\r\n        collaborationId: toObjectId(collaborationId),\r\n        type: \"user-mentor\",\r\n      },\r\n      {\r\n        userId: toObjectId(mentorUserId),\r\n        targetUserId: toObjectId(userId),\r\n        collaborationId: toObjectId(collaborationId),\r\n        type: \"user-mentor\",\r\n      },\r\n    ]);\r\n    return contacts as IContact[];\r\n  } catch (error: any) {\r\n    throw new Error(`Error creating contacts for collaboration: ${error.message}`);\r\n  }\r\n};"]}