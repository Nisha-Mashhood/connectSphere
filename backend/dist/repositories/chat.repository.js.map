{"version":3,"file":"chat.repository.js","sourceRoot":"","sources":["../../src/repositories/chat.repository.ts"],"names":[],"mappings":"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","sourcesContent":["import ChatMessage, { IChatMessage } from \"../models/chat.model.js\";\r\nimport mongoose from \"mongoose\";\r\n\r\nconst toObjectId = (id?: string): mongoose.Types.ObjectId | undefined => {\r\n  return id ? new mongoose.Types.ObjectId(id) : undefined;\r\n};\r\n\r\nexport const saveChatMessage = async (messageData: Partial<IChatMessage>): Promise<IChatMessage> => {\r\n  try {\r\n\r\n    const message = new ChatMessage({\r\n      ...messageData,\r\n      senderId: messageData.senderId,\r\n      collaborationId: messageData.collaborationId,\r\n      userConnectionId: messageData.userConnectionId,\r\n      groupId: messageData.groupId,\r\n    });\r\n    return await message.save();\r\n  } catch (error: any) {\r\n    throw new Error(`Error saving chat message: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const findChatMessagesByCollaborationId = async (collaborationId: string, page: number, limit: number) => {\r\n  try {\r\n    return await ChatMessage.find({ collaborationId: toObjectId(collaborationId) })\r\n      .sort({ timestamp: -1 })\r\n      .skip((page - 1) * limit)\r\n      .limit(limit)\r\n      .exec();\r\n  } catch (error: any) {\r\n    throw new Error(`Error finding chat messages by collaboration ID: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const findChatMessagesByUserConnectionId = async (userConnectionId: string, page: number, limit: number) => {\r\n  try {\r\n    return await ChatMessage.find({ userConnectionId: toObjectId(userConnectionId) })\r\n      .sort({ timestamp: -1 })\r\n      .skip((page - 1) * limit)\r\n      .limit(limit)\r\n      .exec();\r\n  } catch (error: any) {\r\n    throw new Error(`Error finding chat messages by user connection ID: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const findChatMessagesByGroupId = async (groupId: string, page: number, limit: number) => {\r\n  try {\r\n    return await ChatMessage.find({ groupId: toObjectId(groupId) })\r\n      .sort({ timestamp: -1 })\r\n      .skip((page - 1) * limit)\r\n      .limit(limit)\r\n      .exec();\r\n  } catch (error: any) {\r\n    throw new Error(`Error finding chat messages by group ID: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const countMessagesByCollaborationId = async (collaborationId: string): Promise<number> => {\r\n  return await ChatMessage.countDocuments({ collaborationId: toObjectId(collaborationId) });\r\n};\r\n\r\nexport const countMessagesByUserConnectionId = async (userConnectionId: string): Promise<number> => {\r\n  return await ChatMessage.countDocuments({ userConnectionId: toObjectId(userConnectionId) });\r\n};\r\n\r\nexport const countMessagesByGroupId = async (groupId: string): Promise<number> => {\r\n  return await ChatMessage.countDocuments({ groupId: toObjectId(groupId) });\r\n};"]}