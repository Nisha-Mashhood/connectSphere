{"version":3,"file":"notification.repositry.js","sourceRoot":"","sources":["../../src/repositories/notification.repositry.ts"],"names":[],"mappings":"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","sourcesContent":["import{ Task }from \"../models/task.modal.js\";\r\nimport collaboration from \"../models/collaboration.js\";\r\nimport Group from \"../models/group.model.js\";\r\nimport { IMentor } from \"../models/mentor.model.js\";\r\nimport { ObjectId } from \"mongoose\";\r\nimport { AppNotification, AppNotificationModel } from \"../models/notification.modal.js\";\r\nimport userConnectionModal from \"../models/userConnection.modal.js\";\r\n\r\ninterface CollaborationData {\r\n  userId: ObjectId;\r\n  mentorId: IMentor;\r\n}\r\n\r\ninterface UserIds {\r\n  userId: string;\r\n  mentorUserId: string | null;\r\n}\r\n\r\n\r\n\r\n//Get task details for notifications\r\nexport const getTasksForNotification = async (taskId: string) => {\r\n  const now = new Date();\r\n  return await Task.findOne({ \r\n    _id: taskId,\r\n    status: { $ne: \"completed\" }, // Task should not be completed\r\n    dueDate: { $gte: now }, // Due date is not passed\r\n    notificationDate: { $lte: now }, // Notification date has arrived\r\n  });\r\n};\r\n\r\n//Get tasks that need notifications\r\nexport const getAllTasksForNotification = async () => {\r\n  const now = new Date();\r\n  return await Task.find({ \r\n    status: { $ne: \"completed\" }, // Task should not be completed\r\n    dueDate: { $gte: now }, // Due date is not passed\r\n    notificationDate: { $lte: now }, // Notification date has arrived\r\n  });\r\n};\r\n\r\nexport const getGroupMembers = async (groupId:string) => {\r\n  const group = await Group.findById(groupId);\r\n  return group ? group.members : [];\r\n};\r\n\r\n\r\nexport const getMentorIdAndUserId = async (collaborationId: string): Promise<UserIds | null> => {\r\n  const collaborationData = await collaboration\r\n    .findById(collaborationId)\r\n    .populate<{ mentorId: IMentor }>({ \r\n      path: \"mentorId\", \r\n      select: \"userId\" \r\n    })\r\n    .select(\"userId mentorId\") as CollaborationData | null;\r\n\r\n  if (!collaborationData) return null;\r\n\r\n  return { \r\n    userId: collaborationData.userId.toString(), \r\n    mentorUserId: collaborationData.mentorId?.userId?.toString() || null \r\n  };\r\n};\r\n\r\nexport const getConnectionUserIds = async (connectionId: string): Promise<{ requester: string; recipient: string } | null> => {\r\n  try {\r\n    const connection = await userConnectionModal.findById(connectionId).select(\"requester recipient\");\r\n    if (!connection) {\r\n      console.log(`No connection found for ID ${connectionId}`);\r\n      return null;\r\n    }\r\n    return {\r\n      requester: connection.requester.toString(),\r\n      recipient: connection.recipient.toString(),\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error fetching connection ${connectionId}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n\r\n\r\n//Notification with socket.io\r\n\r\n  export const createNotification = async (notification: Omit<AppNotification, '_id'>): Promise<AppNotification> => {\r\n    return AppNotificationModel.create(notification);\r\n  }\r\n\r\n  export const findNotificationByUserId = async(userId: string): Promise<AppNotification[]> => {\r\n    return AppNotificationModel.find({ userId, status: 'unread' })\r\n      .sort({ createdAt: -1 })\r\n      .limit(50);\r\n  }\r\n\r\n  export const findNotificationByCallId = async (userId: string, callId: string) => {\r\n    return AppNotificationModel.findOne({ userId, callId, type: \"incoming_call\", status: \"unread\" });\r\n  };\r\n  \r\n  export const updateNotificationToMissed = async (userId: string, callId: string, content: string) => {\r\n    return AppNotificationModel.findOneAndUpdate(\r\n      { userId, callId, type: \"incoming_call\", status: \"unread\" },\r\n      { type: \"missed_call\", content, updatedAt: new Date() },\r\n      { new: true }\r\n    );\r\n  };\r\n\r\n  export const markNotificationAsRead = async (notificationId: string): Promise<AppNotification | null> =>{\r\n    return AppNotificationModel.findByIdAndUpdate(\r\n      notificationId,\r\n      { status: 'read', updatedAt: new Date() },\r\n      { new: true }\r\n    );\r\n  }\r\n\r\n  export const getNotificationUnreadCount = async(userId: string): Promise<number> =>{\r\n    return AppNotificationModel.countDocuments({ userId, status: 'unread' });\r\n  }\r\n"]}