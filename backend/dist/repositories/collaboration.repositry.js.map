{"version":3,"file":"collaboration.repositry.js","sourceRoot":"","sources":["../../src/repositories/collaboration.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,4BAA4B,CAAC;AACvD,OAAO,aAAiC,MAAM,4BAA4B,CAAC;AAE3E,qCAAqC;AACrC,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EAAE,IAAS,EAAE,EAAE;IACtD,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAAC,OAAO,KAAS,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACtE,CAAC;AACH,CAAC,CAAC;AAEF,wCAAwC;AAC1C,MAAM,CAAC,MAAM,2BAA2B,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;IACpE,IAAI,CAAC;QACH,OAAO,MAAM,aAAa,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC;aAC1C,QAAQ,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAA;IAC1C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACtE,CAAC;AACH,CAAC,CAAC;AAEF,4BAA4B;AAC5B,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IACxD,IAAI,CAAC;QACH,OAAO,MAAM,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,wCAAwC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC,CAAC;AAEF,0CAA0C;AAC1C,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,EAAU,EAAE,MAAc,EAAE,EAAE;IAC5E,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACjD,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,UAAU,GAAG,MAAM,CAAC;YAC5B,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACvC,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yCAAyC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5E,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IACzD,OAAO,MAAM,aAAa,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC;SACxC,QAAQ,CAAC;QACR,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,uBAAuB;SAChC;KACF,CAAC,CAAA;AACN,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,iBAA0C,EAA2B,EAAE;IAC/G,MAAM,mBAAmB,GAAG,IAAI,aAAa,CAAC,iBAAiB,CAAC,CAAC;IACjE,OAAO,MAAM,mBAAmB,CAAC,IAAI,EAAE,CAAC;AAC1C,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,SAAiB,EAAiB,EAAE;IAC5E,MAAM,aAAa,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["import MentorRequest from \"../models/mentorRequset.js\";\r\nimport Collaboration, { ICollaboration } from \"../models/collaboration.js\";\r\n\r\n//create a temporary requset document\r\nexport const createTemporaryRequest = async (data: any) => {\r\n    try {\r\n      const request = new MentorRequest(data);\r\n      return await request.save();\r\n    } catch (error:any) {\r\n      throw new Error(`Error saving temporary request: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Get mentor requests from the database\r\nexport const getMentorRequestsByMentorId = async (mentorId: string) => {\r\n  try {\r\n    return await MentorRequest.find({ mentorId })\r\n      .populate(\"userId\", \"name profilePic\") \r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching mentor requests: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Find mentor request by ID\r\nexport const findMentorRequestById = async (id: string) => {\r\n  try {\r\n    return await MentorRequest.findById(id);\r\n  } catch (error: any) {\r\n    throw new Error(`Error fetching mentor request by ID: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Update mentor request acceptance status\r\nexport const updateMentorRequestStatus = async (id: string, status: string) => {\r\n  try {\r\n    const request = await MentorRequest.findById(id);\r\n    if (request) {\r\n      request.isAccepted = status;\r\n      await request.save();\r\n      return request;\r\n    }\r\n    throw new Error(\"Request not found\");\r\n  } catch (error: any) {\r\n    throw new Error(`Error updating mentor request status: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const getRequestByUserId = async (userId: string) => {\r\n  return await MentorRequest.find({ userId })\r\n    .populate({\r\n      path: 'mentorId',  \r\n      populate: {\r\n        path: 'userId',\r\n        select: 'name email profilePic'\r\n      }\r\n    })\r\n};\r\n\r\nexport const createCollaboration = async (collaborationData: Partial<ICollaboration>): Promise<ICollaboration> => {\r\n  const collaborationResult = new Collaboration(collaborationData);\r\n  return await collaborationResult.save();\r\n};\r\n\r\n\r\nexport const deleteMentorRequest = async (requestId: string): Promise<void> => {\r\n  await MentorRequest.findByIdAndDelete(requestId);\r\n};"]}