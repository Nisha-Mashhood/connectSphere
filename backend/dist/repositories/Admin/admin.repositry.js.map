{"version":3,"file":"admin.repositry.js","sourceRoot":"","sources":["../../../src/repositories/Admin/admin.repositry.ts"],"names":[],"mappings":"AAAA,OAAO,KAAyB,MAAM,6BAA6B,CAAC;AAEpE,oBAAoB;AACpB,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,SAAkC,EAAE,EAAE;IACtE,OAAO,MAAM,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IACtD,OAAO,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,oBAAoB;AACpB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IACjD,OAAO,MAAM,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF,yCAAyC;AACzC,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,OAAY,EAAE,QAAgB,EAA2B,EAAE;IACjG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACtC,IAAI,KAAK,GAAE,MAAM,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,6CAA6C;QAC7C,KAAK,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC;YACzB,QAAQ,EAAE,OAAO,CAAC,WAAW;YAC7B,KAAK;YACL,QAAQ;YACR,UAAU,EAAE,OAAO,CAAC,EAAE;YACtB,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;YAC3D,IAAI,EAAE,MAAM;SACb,CAAC,CAAC;IACL,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,gBAAgB;AAChB,MAAM,CAAC,MAAM,WAAW,GAAE,KAAK,EAC7B,EAAU,EACV,UAAmC,EACnC,EAAE;IACF,OAAO,MAAM,KAAK,CAAC,iBAAiB,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,iBAAiB;AACjB,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,QAAgB,EAAE,EAAE,CACnE,KAAK,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAE3D,sCAAsC;AACtC,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAAe,EAAE,YAAoB,EAAE,EAAE;IAChF,OAAO,MAAM,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AACjF,CAAC,CAAC;AAEF,gCAAgC;AAChC,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,UAAkB,EAAE,EAAE;IAC3D,MAAM,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACjF,OAAM;AACR,CAAC,CAAC","sourcesContent":["import Admin, { AdminInterface } from \"../../models/admin.model.js\";\r\n\r\n// Create a new user\r\nexport const createAdmin = async (adminData: Partial<AdminInterface>) => {\r\n  return await Admin.create(adminData);\r\n};\r\n\r\n// Find a user by email\r\nexport const findAdminByEmail = async (email: string) => {\r\n  return await Admin.findOne({ email });\r\n};\r\n\r\n// Find a user by ID\r\nexport const findAdminrById = async (id: string) => {\r\n  return await Admin.findById(id);\r\n};\r\n\r\n// Find or create a user by OAuth profile\r\nexport const findOrCreateAdmin = async (profile: any, provider: string): Promise<AdminInterface> => {\r\n  if (!profile.email) {\r\n    throw new Error(\"Email is required to find or create a user\");\r\n  }\r\n  const email = profile.emails[0].value;\r\n  let admin= await findAdminByEmail(email);\r\n  if (!admin) {\r\n    // If admin does not exist, create a new user\r\n    admin = await Admin.create({\r\n      fullName: profile.displayName,\r\n      email,\r\n      provider,\r\n      providerId: profile.id,\r\n      profilePic: profile.photos ? profile.photos[0].value : null,\r\n      role: \"user\",\r\n    });\r\n  }\r\n  return admin;\r\n};\r\n\r\n// Update a user\r\nexport const updateAdmin= async (\r\n  id: string,\r\n  updateData: Partial<AdminInterface>\r\n) => {\r\n  return await Admin.findByIdAndUpdate(id, updateData, { new: true });\r\n};\r\n\r\n//update password\r\nexport const updatePassword = async (id: string, password: string) =>\r\n  Admin.findByIdAndUpdate(id, { password }, { new: true });\r\n\r\n// Update the refresh token for a user\r\nexport const updateRefreshToken = async (adminId: string, refreshToken: string) => {\r\n  return await Admin.findByIdAndUpdate(adminId, { refreshToken }, { new: true });\r\n};\r\n\r\n// Remove refresh token (logout)\r\nexport const removeRefreshToken = async (adminemail: string) => {\r\n    await Admin.updateOne({ email: adminemail }, { $unset: { refreshToken: \"\" } });\r\n  return \r\n};\r\n"]}