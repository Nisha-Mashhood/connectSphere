{"version":3,"file":"jwt.js","sourceRoot":"","sources":["../../src/utils/jwt.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,MAAM,MAAM,kBAAkB,CAAC;AAEtC,qBAAqB;AACrB,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,EAAE;IAC9C,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,mBAAmB;AACnB,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAa,EAAE,EAAE;IAC3C,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;AAC7C,CAAC,CAAC","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport config from '../config/env.js';\r\n\r\n// Generate JWT token\r\nexport const generateToken = (userId: string) => {\r\n  if (!config.jwtSecret) {\r\n    throw new Error('JWT secret is not defined!');\r\n  }\r\n\r\n  return jwt.sign({ userId }, config.jwtSecret, { expiresIn: '1h' });\r\n};\r\n\r\n// Verify JWT token\r\nexport const verifyToken = (token: string) => {\r\n  if (!config.jwtSecret) {\r\n    throw new Error('JWT secret is not defined!');\r\n  }\r\n\r\n  return jwt.verify(token, config.jwtSecret);\r\n};\r\n"]}