{"version":3,"file":"passport.utils.js","sourceRoot":"","sources":["../../src/utils/passport.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import passport from \"passport\";\r\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\r\nimport { Strategy as GitHubStrategy, Profile as GitHubProfile } from \"passport-github2\";\r\nimport { findUserById } from \"../repositories/user.repositry.js\"; \r\nimport { generateAccessToken, generateRefreshToken } from \"../utils/jwt.utils.js\";\r\nimport { UserInterface } from \"../models/user.model.js\";\r\nimport config from '../config/env.config.js';\r\nimport { findOrCreateUserforPassport } from \"../services/auth.service.js\";\r\n  \r\nconst configurePassport = () => {\r\n  // Google Strategy\r\n  passport.use(\r\n    new GoogleStrategy(\r\n      {\r\n        clientID: config.googleclientid as string,\r\n        clientSecret: config.githubclientsecret as string,\r\n        callbackURL: config.googlecallbackurl as string,\r\n      },\r\n      async (_accessToken, _refreshToken, profile, done) => {\r\n        try {\r\n          const user = await findOrCreateUserforPassport(profile, \"google\");\r\n        const jwtAccessToken = generateAccessToken({ id: user._id });\r\n        const jwtRefreshToken = generateRefreshToken({ id: user._id });\r\n\r\n        // Attach JWT tokens for use in the controller\r\n        user.accessToken = jwtAccessToken;\r\n        user.refreshToken = jwtRefreshToken;\r\n\r\n\r\n          if (!user) {\r\n            return done(null, false);\r\n          }\r\n\r\n          return done(null, user);\r\n        } catch (error) {\r\n          return done(error, undefined);\r\n        }\r\n      }\r\n    )\r\n  );\r\n\r\n  // GitHub Strategy\r\n  passport.use(\r\n    new GitHubStrategy(\r\n      {\r\n        clientID: config.githubclientid as string,\r\n        clientSecret: config.githubclientsecret as string,\r\n        callbackURL: config.githubcallbackurl as string,\r\n      },\r\n      async (_accessToken:string, _refreshToken:string, profile: GitHubProfile, done: (error: any, user?: any) => void) => {\r\n        try {\r\n          const user = await findOrCreateUserforPassport(profile, \"github\");\r\n        const jwtAccessToken = generateAccessToken({ id: user._id });\r\n        const jwtRefreshToken = generateRefreshToken({ id: user._id });\r\n\r\n        user.accessToken = jwtAccessToken;\r\n        user.refreshToken = jwtRefreshToken;\r\n\r\n          if (!user) {\r\n            return done(null, false);\r\n          }\r\n\r\n          return done(null, user);\r\n        } catch (error) {\r\n          return done(error, undefined);\r\n        }\r\n      }\r\n    )\r\n  );\r\n\r\n  // Serialize user to session\r\n  passport.serializeUser((user: any, done: (err: any, id?: string) => void) => {\r\n    done(null, user._id); // Save only the user ID in the session\r\n  });\r\n\r\n  // Deserialize user from session\r\n  passport.deserializeUser(async (id: string, done: (err: any, user?: UserInterface | null) => void) => {\r\n    try {\r\n      const user = await findUserById(id);\r\n      done(null, user);\r\n    } catch (error) {\r\n      done(error, null);\r\n    }\r\n  });\r\n};\r\n\r\nexport default configurePassport;\r\n"]}