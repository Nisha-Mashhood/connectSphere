{"version":3,"file":"jwt.utils.js","sourceRoot":"","sources":["../../src/utils/jwt.utils.ts"],"names":[],"mappings":"AAAA,kCAAkC;AAClC,gDAAgD;AAChD,WAAW;AACX,qBAAqB;AACrB,uDAAuD;AACvD,8CAA8C;AAC9C,sCAAsC;;AAEtC,yBAAyB;AACzB,wBAAwB;AACxB,IAAI;AAEJ,qDAAqD;AACrD,uCAAuC;AACvC,yBAAyB;AACzB,6BAA6B;AAC7B,SAAS;AACT,6BAA6B;AAC7B,qDAAqD;AACrD,MAAM;AACN,mCAAmC;AACnC,2DAA2D;AAC3D,yDAAyD;AACzD,MAAM;AACN,+DAA+D;AAC/D,KAAK;AAEL,6BAA6B;AAC7B,oEAAoE;AACpE,6BAA6B;AAC7B,qDAAqD;AACrD,MAAM;AAEN,UAAU;AACV,gEAAgE;AAChE,sBAAsB;AACtB,oDAAoD;AACpD,MAAM;AACN,KAAK;AAEL,iDAAiD;AACjD,iEAAiE;AACjE,6BAA6B;AAC7B,qDAAqD;AACrD,MAAM;AAEN,2DAA2D;AAC3D,yDAAyD;AACzD,MAAM;AACN,qEAAqE;AACrE,KAAK;AAEL,8BAA8B;AAC9B,qEAAqE;AACrE,6BAA6B;AAC7B,qDAAqD;AACrD,MAAM;AACN,UAAU;AACV,gEAAgE;AAChE,sBAAsB;AACtB,4DAA4D;AAC5D,MAAM;AACN,KAAK;AAEL,2BAA2B;AAC3B,sCAAsC;AACtC,mBAAmB;AACnB,yBAAyB;AACzB,yBAAyB;AACzB,SAAS;AACT,2DAA2D;AAC3D,6CAA6C;AAC7C,qCAAqC;AACrC,kEAAkE;AAClE,0CAA0C;AAC1C,wCAAwC;AACxC,QAAQ;AACR,+CAA+C;AAC/C,sBAAsB;AACtB,4BAA4B;AAC5B,0BAA0B;AAC1B,iDAAiD;AACjD,QAAQ;AACR,KAAK;AAEL,mBAAmB;AACnB,mDAAmD;AACnD,4EAA4E;AAC5E,6EAA6E;AAC7E,KAAK;AAEL,oDAAoD;AACpD,mEAAmE;AACnE,UAAU;AACV,mCAAmC;AACnC,qDAAqD;AACrD,mBAAmB;AACnB,2CAA2C;AAC3C,QAAQ;AACR,oDAAoD;AACpD,gEAAgE;AAChE,2BAA2B;AAC3B,yEAAyE;AACzE,MAAM;AACN,KAAK","sourcesContent":["// import jwt from \"jsonwebtoken\";\r\n// import config from \"../config/env.config.js\";\r\n// import {\r\n//   findUserByEmail,\r\n//   removeRefreshToken as removeRefreshTokenRepositry,\r\n// } from \"../repositories/user.repositry.js\";\r\n// import { Response } from \"express\";\r\n\r\n// interface JwtPayload {\r\n//   [key: string]: any;\r\n// }\r\n\r\n// // Generate JWT Access token (short-lived, 1 hour)\r\n// export const generateAccessToken = (\r\n//   payload: JwtPayload,\r\n//   expiresIn: string = \"1h\"\r\n// ) => {\r\n//   if (!config.jwtSecret) {\r\n//     throw new Error(\"JWT secret is not defined!\");\r\n//   }\r\n//   // Ensure payload is an object\r\n//   if (typeof payload !== \"object\" || payload === null) {\r\n//     throw new Error(\"Payload must be a plain object\");\r\n//   }\r\n//   return jwt.sign(payload, config.jwtSecret, { expiresIn });\r\n// };\r\n\r\n// // Verify JWT Access token\r\n// export const verifyAccessToken = (token: string): JwtPayload => {\r\n//   if (!config.jwtSecret) {\r\n//     throw new Error(\"JWT secret is not defined!\");\r\n//   }\r\n\r\n//   try {\r\n//     return jwt.verify(token, config.jwtSecret) as JwtPayload;\r\n//   } catch (error) {\r\n//     throw new Error(\"Invalid or expired token.\");\r\n//   }\r\n// };\r\n\r\n// // Generate Refresh Token (long-lived, 7 days)\r\n// export const generateRefreshToken = (payload: JwtPayload) => {\r\n//   if (!config.jwtSecret) {\r\n//     throw new Error(\"JWT secret is not defined!\");\r\n//   }\r\n\r\n//   if (typeof payload !== \"object\" || payload === null) {\r\n//     throw new Error(\"Payload must be a plain object\");\r\n//   }\r\n//   return jwt.sign(payload, config.jwtSecret, { expiresIn: \"7d\" });\r\n// };\r\n\r\n// // Verify JWT Refresh Token\r\n// export const verifyRefreshToken = (token: string): JwtPayload => {\r\n//   if (!config.jwtSecret) {\r\n//     throw new Error(\"JWT secret is not defined!\");\r\n//   }\r\n//   try {\r\n//     return jwt.verify(token, config.jwtSecret) as JwtPayload;\r\n//   } catch (error) {\r\n//     throw new Error(\"Invalid or expired refresh token.\");\r\n//   }\r\n// };\r\n\r\n// // Set Tokens in Cookies\r\n// export const setTokensInCookies = (\r\n//   res: Response,\r\n//   accessToken: string,\r\n//   refreshToken: string\r\n// ) => {\r\n//   const isProduction = config.node_env === \"production\";\r\n//   res.cookie(\"accessToken\", accessToken, {\r\n//     httpOnly: true, // Prevent XSS\r\n//     secure: isProduction, // Send only over HTTPS in production\r\n//     sameSite: \"strict\", // Prevent CSRF\r\n//     maxAge: 60 * 60 * 1000, // 1 hour\r\n//   });\r\n//   res.cookie(\"refreshToken\", refreshToken, {\r\n//     httpOnly: true,\r\n//     secure: isProduction,\r\n//     sameSite: \"strict\",\r\n//     maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n//   });\r\n// };\r\n\r\n// // Clear Cookies\r\n// export const clearCookies = (res: Response) => {\r\n//   res.clearCookie(\"accessToken\", { httpOnly: true, sameSite: \"strict\" });\r\n//   res.clearCookie(\"refreshToken\", { httpOnly: true, sameSite: \"strict\" });\r\n// };\r\n\r\n// // Function to handle token removal during logout\r\n// export const removeRefreshToken = async (useremail: string) => {\r\n//   try {\r\n//     // Find the user by their ID\r\n//     const user = await findUserByEmail(useremail);\r\n//     if (!user) {\r\n//       throw new Error(\"User not found\");\r\n//     }\r\n//     await removeRefreshTokenRepositry(useremail);\r\n//     return { message: \"Refresh token removed successfully\" };\r\n//   } catch (error: any) {\r\n//     throw new Error(\"Error removing refresh token: \" + error.message);\r\n//   }\r\n// };\r\n\r\n\r\n"]}