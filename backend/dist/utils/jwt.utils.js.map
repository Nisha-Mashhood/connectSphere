{"version":3,"file":"jwt.utils.js","sourceRoot":"","sources":["../../src/utils/jwt.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport config from '../config/env.config.js';\r\nimport { findUserById, removeRefreshToken as removeRefreshTokenRepositry } from '../repositories/user.repositry.js';\r\n\r\ninterface JwtPayload {\r\n  [key: string]: any; \r\n}\r\n\r\n// Generate JWT Access token (short-lived, 1 hour)\r\nexport const generateAccessToken = (payload: JwtPayload, expiresIn: string = '1h') => {\r\n  if (!config.jwtSecret) {\r\n    throw new Error('JWT secret is not defined!');\r\n  }\r\n  // Ensure payload is an object\r\n  if (typeof payload !== 'object' || payload === null) {\r\n    throw new Error('Payload must be a plain object');\r\n  }\r\n\r\n  return jwt.sign(payload, config.jwtSecret, { expiresIn });\r\n};\r\n\r\n// Verify JWT Access token\r\nexport const verifyAccessToken = (token: string): JwtPayload => {\r\n  if (!config.jwtSecret) {\r\n    throw new Error('JWT secret is not defined!');\r\n  }\r\n  \r\n\r\n  try {\r\n    return jwt.verify(token, config.jwtSecret) as JwtPayload;\r\n  } catch (error) {\r\n    throw new Error('Invalid or expired token.');\r\n  }\r\n};\r\n\r\n// Generate Refresh Token (long-lived, 7 days)\r\nexport const generateRefreshToken = (payload: JwtPayload) => {\r\n  if (!config.jwtSecret) {\r\n    throw new Error('JWT secret is not defined!');\r\n  }\r\n\r\n  if (typeof payload !== 'object' || payload === null) {\r\n    throw new Error('Payload must be a plain object');\r\n  }\r\n  return jwt.sign(payload, config.jwtSecret, { expiresIn: '7d' });\r\n};\r\n\r\n// Verify JWT Refresh Token\r\nexport const verifyRefreshToken = (token: string): JwtPayload => {\r\n  if (!config.jwtSecret) {\r\n    throw new Error('JWT secret is not defined!');\r\n  }\r\n\r\n  try {\r\n    return jwt.verify(token, config.jwtSecret) as JwtPayload;\r\n  } catch (error) {\r\n    throw new Error('Invalid or expired refresh token.');\r\n  }\r\n};\r\n\r\n// Function to handle token removal during logout\r\nexport const removeRefreshToken = async (userId: string) => {\r\n  try {\r\n    // Find the user by their ID\r\n    const user = await findUserById(userId);\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n    await removeRefreshTokenRepositry(userId);\r\n    return { message: 'Refresh token removed successfully' };\r\n  } catch (error:any) {\r\n    throw new Error('Error removing refresh token: ' + error.message);\r\n  }\r\n};"]}