{"version":3,"file":"node-cron.utils.js","sourceRoot":"","sources":["../../src/utils/node-cron.utils.ts"],"names":[],"mappings":"AAAA,gCAAgC;AAChC,8EAA8E;AAC9E,0FAA0F;AAC1F,mCAAmC;;AAEnC,mDAAmD;AACnD,uCAAuC;AACvC,sBAAsB;AACtB,YAAY;AACZ,oBAAoB;AACpB,sBAAsB;AACtB,OAAO;AACP,4CAA4C;AAC5C,IAAI;AAEJ,0DAA0D;AAC1D,kGAAkG;AAClG,mEAAmE;AACnE,6BAA6B;AAE7B,2EAA2E;AAC3E,yCAAyC;AACzC,2CAA2C;AAE3C,sDAAsD;AACtD,oDAAoD;AAEpD,+BAA+B;AAC/B,KAAK;AAEL,iCAAiC;AACjC,+CAA+C;AAC/C,6CAA6C;AAC7C,oDAAoD;AAEpD,sCAAsC;AACtC,YAAY;AACZ,qDAAqD;AACrD,0DAA0D;AAE1D,kCAAkC;AAClC,0DAA0D;AAC1D,kBAAkB;AAClB,UAAU;AAEV,oCAAoC;AACpC,0DAA0D;AAC1D,kEAAkE;AAClE,uFAAuF;AACvF,sBAAsB;AACtB,YAAY;AAEZ,wEAAwE;AAExE,wFAAwF;AACxF,kEAAkE;AAClE,yBAAyB;AACzB,2FAA2F;AAC3F,sBAAsB;AACtB,YAAY;AAEZ,6EAA6E;AAE7E,6EAA6E;AAC7E,qDAAqD;AAErD,sGAAsG;AAEtG,2EAA2E;AAC3E,oBAAoB;AAEpB,4EAA4E;AAC5E,yCAAyC;AACzC,sCAAsC;AAEtC,gEAAgE;AAChE,2BAA2B;AAC3B,0DAA0D;AAC1D,gDAAgD;AAChD,mBAAmB;AACnB,4CAA4C;AAC5C,wGAAwG;AACxG,gBAAgB;AAChB,qBAAqB;AACrB,sFAAsF;AACtF,cAAc;AACd,YAAY;AAEZ,sDAAsD;AACtD,mFAAmF;AACnF,YAAY;AACZ,UAAU;AACV,wBAAwB;AACxB,2EAA2E;AAC3E,QAAQ;AACR,QAAQ;AAER,sDAAsD;AACtD,KAAK","sourcesContent":["// import cron from \"node-cron\";\r\n// import * as notificationService from \"../services/notification.service.js\";\r\n// import { getAllTasksForNotification } from \"../repositories/notification.repositry.js\";\r\n// import mongoose from \"mongoose\";\r\n\r\n// // Type definition for notification subscription\r\n// interface NotificationSubscription {\r\n//   endpoint: string;\r\n//   keys: {\r\n//     auth: string;\r\n//     p256dh: string;\r\n//   };\r\n//   userId?: string; // Add optional userId\r\n// }\r\n\r\n// // Function to convert 12-hour format to 24-hour format\r\n// const convertTo24HourFormat = (time12h: string): { hours: number; minutes: number } | null => {\r\n//   const match = time12h.match(/^(\\d{1,2}):(\\d{2})\\s?(AM|PM)$/i);\r\n//   if (!match) return null;\r\n\r\n//   let hours = parseInt(match[1]);  // Convert extracted string to number\r\n//   const minutes = parseInt(match[2]); \r\n//   const period = match[3].toUpperCase();\r\n\r\n//   if (period === \"PM\" && hours !== 12) hours += 12;\r\n//   if (period === \"AM\" && hours === 12) hours = 0;\r\n\r\n//   return { hours, minutes };\r\n// };\r\n\r\n// // Schedule push notifications\r\n// export const scheduleNotifications = () => {\r\n//   cron.schedule(\"* * * * *\", async () => {\r\n//     console.log(\"Checking for notifications...\");\r\n\r\n//     const currentTime = new Date();\r\n//     try {\r\n//       // Fetch tasks that are due for notification\r\n//       const tasks = await getAllTasksForNotification();\r\n\r\n//       if (tasks.length === 0) {\r\n//         console.log(\"No tasks require notifications.\");\r\n//         return;\r\n//       }\r\n\r\n//       for (const task of tasks) {\r\n//         // Skip tasks without notification date or time\r\n//         if (!task.notificationDate || !task.notificationTime) {\r\n//           console.warn(`Skipping task ${task.name}: Missing notification details.`);\r\n//           continue;\r\n//         }\r\n\r\n//         const taskNotificationTime = new Date(task.notificationDate);\r\n\r\n//         const notificationTime: string = String(task.notificationTime ?? \"00:00 AM\");\r\n//         const time24 = convertTo24HourFormat(notificationTime);\r\n//         if (!time24) {\r\n//           console.warn(`Skipping task ${task.name}: Invalid notification time format.`);\r\n//           continue;\r\n//         }\r\n\r\n//         taskNotificationTime.setHours(time24.hours, time24.minutes, 0, 0);\r\n\r\n//         // Check if current time matches or exceeds task notification time\r\n//         if (currentTime >= taskNotificationTime) {\r\n\r\n//           const subscriptionWithUserId = task.notificationSubscription as NotificationSubscription;\r\n          \r\n//           if (subscriptionWithUserId && subscriptionWithUserId.userId) {\r\n//             try {\r\n              \r\n//               const taskId = task._id instanceof mongoose.Types.ObjectId \r\n//                 ? task._id.toString() \r\n//                 : String(task._id);\r\n\r\n//               await notificationService.sendPushNotification(\r\n//                 taskId, \r\n//                 `Reminder: ${task.name} is due soon!`, \r\n//                 subscriptionWithUserId.userId\r\n//               );\r\n//             } catch (notificationError) {\r\n//               console.error(`Failed to send notification for task ${task.name}:`, notificationError);\r\n//             }\r\n//           } else {\r\n//             console.warn(`No user ID found in subscription for task ${task.name}`);\r\n//           }\r\n//         }\r\n\r\n//         if (currentTime > new Date(task.dueDate)) {\r\n//           console.log(`Task ${task.name} is past due. Stopping notifications.`);\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"❌ Error checking tasks for notifications:\", error);\r\n//     }\r\n//   });\r\n\r\n//   console.log(\"✅ Notification scheduler started.\");\r\n// };\r\n\r\n\r\n"]}