{"version":3,"file":"node-cron.utils.js","sourceRoot":"","sources":["../../src/utils/node-cron.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import cron from \"node-cron\";\r\nimport * as notificationService from \"../services/notification.service.js\";\r\nimport * as notificationRepo from \"../repositories/notification.repositry.js\";\r\n\r\n// Function to convert 12-hour format to 24-hour format\r\nconst convertTo24HourFormat = (time12h: string): { hours: number; minutes: number } | null => {\r\n  const match = time12h.match(/^(\\d{1,2}):(\\d{2})\\s?(AM|PM)$/i);\r\n  if (!match) return null;\r\n\r\n  let hours = parseInt(match[1]);  // Convert extracted string to number\r\n  const minutes = parseInt(match[2]); \r\n  const period = match[3].toUpperCase();\r\n\r\n  if (period === \"PM\" && hours !== 12) hours += 12;\r\n  if (period === \"AM\" && hours === 12) hours = 0;\r\n\r\n  return { hours, minutes };\r\n};\r\n\r\n// Schedule push notifications\r\nexport const scheduleNotifications = () => {\r\n  cron.schedule(\"* * * * *\", async () => {\r\n    console.log(\"Checking for notifications...\");\r\n\r\n    const currentTime = new Date();\r\n    try {\r\n      const tasks = await notificationRepo.getTasksForNotification();\r\n      if (!tasks || tasks.length === 0) {\r\n        console.log(\"No tasks require notifications.\");\r\n        return;\r\n      }\r\n\r\n      for (const task of tasks) {\r\n        // Skip tasks without notification date\r\n        if (!task.notificationDate) {\r\n          console.warn(`Skipping task ${task.name}: No notification date.`);\r\n          continue;\r\n        }\r\n\r\n        const taskNotificationTime = new Date(task.notificationDate);\r\n\r\n        // Ensure notificationTime exists and is properly formatted\r\n        const notificationTime: string = String(task.notificationTime ?? \"00:00 AM\"); // ✅ Fix applied\r\n        const time24 = convertTo24HourFormat(notificationTime);\r\n        if (!time24) {\r\n          console.warn(`Skipping task ${task.name}: Invalid notification time format.`);\r\n          continue;\r\n        }\r\n\r\n        taskNotificationTime.setHours(time24.hours, time24.minutes, 0, 0);\r\n\r\n        if (currentTime >= taskNotificationTime) {\r\n          await notificationService.sendPushNotification(\r\n            `Reminder: ${task.name} is due soon!`\r\n          );\r\n        }\r\n\r\n        // Stop notifications when task is completed or due date is passed\r\n        if (currentTime > new Date(task.dueDate)) {\r\n          console.log(`Task ${task.name} is past due. Stopping notifications.`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error checking tasks for notifications:\", error);\r\n    }\r\n  });\r\n\r\n  console.log(\"✅ Notification scheduler started.\");\r\n};\r\n"]}