{"version":3,"file":"cloudinary.utils.js","sourceRoot":"","sources":["../../src/utils/cloudinary.utils.ts"],"names":[],"mappings":"AAAA,iDAAiD;AACjD,kDAAkD;AAClD,gCAAgC;;AAEhC,sBAAsB;AACtB,4CAA4C;AAC5C,sCAAsC;AACtC,4CAA4C;AAC5C,MAAM;AAEN,uDAAuD;AACvD,qBAAqB;AACrB,0BAA0B;AAC1B,6CAA6C;AAC7C,SAAS;AACT,sCAAsC;AACtC,UAAU;AACV,qDAAqD;AACrD,YAAY;AACZ,0FAA0F;AAC1F,yEAAyE;AACzE,yDAAyD;AACzD,YAAY;AACZ,YAAY;AACZ,8EAA8E;AAC9E,yDAAyD;AACzD,sCAAsC;AACtC,aAAa;AAEb,qCAAqC;AACrC,oBAAoB;AACpB,mCAAmC;AACnC,iDAAiD;AACjD,aAAa;AAEb,yCAAyC;AACzC,wDAAwD;AACxD,+CAA+C;AAC/C,YAAY;AAEZ,oFAAoF;AAEpF,sBAAsB;AACtB,4CAA4C;AAC5C,qCAAqC;AACrC,0DAA0D;AAC1D,kCAAkC;AAClC,4BAA4B;AAC5B,uDAAuD;AACvD,qCAAqC;AACrC,aAAa;AACb,YAAY;AACZ,2CAA2C;AAC3C,0DAA0D;AAC1D,kCAAkC;AAClC,4BAA4B;AAC5B,uDAAuD;AACvD,qCAAqC;AACrC,qDAAqD;AACrD,aAAa;AACb,YAAY;AACZ,QAAQ;AAER,uEAAuE;AACvE,sDAAsD;AACtD,uDAAuD;AACvD,sBAAsB;AACtB,kFAAkF;AAClF,mBAAmB;AACnB,MAAM;AACN,KAAK","sourcesContent":["// import { v2 as cloudinary } from \"cloudinary\";\r\n// import  config  from '../config/env.config.js';\r\n// import fs from \"fs/promises\";\r\n\r\n// cloudinary.config({\r\n//   cloud_name: config.cloudinaryCloudName,\r\n//   api_key: config.cloudinaryApiKey,\r\n//   api_secret: config.cloudinaryApiSecret,\r\n// });\r\n\r\n// export const uploadMedia = async (filePath: string, \r\n//   folder: string, \r\n//   fileSize: number = 0,\r\n//   contentType?: \"image\" | \"video\" | \"file\"\r\n// ) => {\r\n//   const maxSize = 10 * 1024 * 1024;\r\n//   try {\r\n//     const baseTransformations = fileSize > maxSize\r\n//       ? [\r\n//           { width: 1024, height: 1024, crop: \"limit\" }, // Images/videos: max 1024x1024\r\n//           { quality: \"auto:low\" }, // Reduce quality for images/videos\r\n//           { fetch_format: \"auto\" }, // Optimize format\r\n//         ]\r\n//       : [\r\n//           { width: 1024, height: 1024, crop: \"limit\" }, // Still limit size\r\n//           { quality: \"auto\" }, // Default optimization\r\n//           { fetch_format: \"auto\" },\r\n//         ];\r\n\r\n//         let uploadOptions: any = {\r\n//           folder,\r\n//           resource_type: \"auto\",\r\n//           transformation: baseTransformations,\r\n//         };\r\n\r\n//         if (contentType === \"video\") {\r\n//           uploadOptions.eager = baseTransformations; \r\n//           uploadOptions.eager_async = true; \r\n//         }\r\n\r\n//         const result = await cloudinary.uploader.upload(filePath, uploadOptions);\r\n\r\n//     //For thumbnail\r\n//     let thumbnailUrl: string | undefined;\r\n//     if (contentType === \"video\") {\r\n//       thumbnailUrl = cloudinary.url(result.public_id, {\r\n//         resource_type: \"video\",\r\n//         transformation: [\r\n//           { width: 200, height: 200, crop: \"fill\" },\r\n//           { fetch_format: \"jpg\" },\r\n//         ],\r\n//       });\r\n//     } else if (contentType === \"file\") {\r\n//       thumbnailUrl = cloudinary.url(result.public_id, {\r\n//         resource_type: \"image\",\r\n//         transformation: [\r\n//           { width: 200, height: 200, crop: \"fill\" },\r\n//           { fetch_format: \"jpg\" },\r\n//           { default_image: \"file_thumbnail.jpg\" },\r\n//         ],\r\n//       });\r\n//     }\r\n\r\n//     await fs.unlink(filePath); // Remove the file from local storage\r\n//     console.log(`Deleted local file: ${filePath}`);\r\n//     return { url: result.secure_url, thumbnailUrl };\r\n//   } catch (error) {\r\n//     console.error(`Failed to upload image or delete file: ${filePath}`, error);\r\n//     throw error;\r\n//   }\r\n// };\r\n"]}