{"version":3,"file":"auth.middleware.js","sourceRoot":"","sources":["../../src/middlewares/auth.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport logger from '../core/Utils/Logger.js';\r\nimport { ServiceError } from '../core/Utils/ErrorHandler.js';\r\nimport { AuthService } from '../Modules/Auth/Utils/JWT.js';\r\nimport { UserRepository } from '../Modules/Auth/Repositry/UserRepositry.js';\r\nimport { UserInterface } from '../Interfaces/models/IUser.js';\r\n\r\n// Extend Express Request type to include user\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      currentUser?: UserInterface;\r\n    }\r\n  }\r\n}\r\n\r\nexport class AuthMiddleware {\r\n  private authService: AuthService;\r\n  private userRepo: UserRepository;\r\n\r\n  constructor() {\r\n    this.authService = new AuthService();\r\n    this.userRepo = new UserRepository();\r\n  }\r\n\r\n  public async verifyToken(req: Request, _res: Response, next: NextFunction): Promise<void> {\r\n    const accessToken = req.cookies.accessToken;\r\n    if (!accessToken) {\r\n      logger.warn('Access token not found in request');\r\n      throw new ServiceError('Access token not found');\r\n    }\r\n    try {\r\n      const decoded = this.authService.verifyAccessToken(accessToken);\r\n      const user = await this.userRepo.getUserById(decoded.userId);\r\n      logger.debug(`Current user: ${user?._id}`);\r\n      if (!user) {\r\n        logger.warn(`User not found for ID: ${decoded.userId}`);\r\n        throw new ServiceError('User not found');\r\n      }\r\n      req.currentUser = user;\r\n      next();\r\n    } catch (error: any) {\r\n      logger.error(`Token verification failed: ${error.message}`);\r\n      throw new ServiceError('Invalid or expired token');\r\n    }\r\n  }\r\n\r\n  public async verifyRefreshToken(req: Request, _res: Response, next: NextFunction): Promise<void> {\r\n    const refreshToken = req.cookies.refreshToken;\r\n    if (!refreshToken) {\r\n      logger.warn('Refresh token not found in request');\r\n      throw new ServiceError('Refresh token not found');\r\n    }\r\n    try {\r\n      const decoded = this.authService.verifyRefreshToken(refreshToken);\r\n      const user = await this.userRepo.getUserById(decoded.userId);\r\n      if (!user || user.refreshToken !== refreshToken) {\r\n        logger.warn(`Invalid refresh token for user ID: ${decoded.userId}`);\r\n        throw new ServiceError('Invalid refresh token');\r\n      }\r\n      req.currentUser = user;\r\n      next();\r\n    } catch (error: any) {\r\n      logger.error(`Refresh token verification failed: ${error.message}`);\r\n      throw new ServiceError('Invalid or expired refresh token');\r\n    }\r\n  }\r\n\r\n  public async checkBlockedStatus(req: Request, _res: Response, next: NextFunction): Promise<void> {\r\n    if (req.currentUser?.isBlocked) {\r\n      logger.warn(`Blocked user attempted access: ${req.currentUser._id}`);\r\n      throw new ServiceError('Your account has been blocked. Please contact support.');\r\n    }\r\n    next();\r\n  }\r\n\r\n  public authorize(...allowedRoles: string[]) {\r\n    return (req: Request, _res: Response, next: NextFunction) => {\r\n      if (!req.currentUser) {\r\n        logger.warn('Authentication required for protected route');\r\n        throw new ServiceError('Authentication required');\r\n      }\r\n      const userRole = req.currentUser.role ?? '';\r\n      if (!allowedRoles.includes(userRole)) {\r\n        logger.warn(`Access forbidden for user ${req.currentUser._id} with role ${userRole}`);\r\n        throw new ServiceError('Access forbidden');\r\n      }\r\n      logger.debug(`Authorized user ${req.currentUser._id} with role ${userRole}`);\r\n      next();\r\n    };\r\n  }\r\n}"]}