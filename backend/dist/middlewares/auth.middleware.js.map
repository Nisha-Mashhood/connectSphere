{"version":3,"file":"auth.middleware.js","sourceRoot":"","sources":["../../src/middlewares/auth.middleware.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC3D,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAEjE,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACjG,IAAI,CAAC;QACH,uDAAuD;QACvD,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1D,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC,CAAC;YACvD,OAAM;QACR,CAAC;QAED,2BAA2B;QAC3B,MAAM,OAAO,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAE1C,0CAA0C;QAC1C,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEhD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;YACpD,OAAM;QACR,CAAC;QAED,+BAA+B;QAC/B,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,CAAC;YACnE,OAAM;QACR,CAAC;QAED,0CAA0C;QAC1C,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAEhB,sBAAsB;QACtB,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAS,EAAE,CAAC;QACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,0BAA0B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpF,OAAM;IACR,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { verifyRefreshToken } from '../utils/jwt.utils.js'; \r\nimport { findUserById } from '../repositories/user.repositry.js'; \r\n\r\nexport const verifyTokenAndBlockStatus = async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    // Get the refresh token from the Authorization header \r\n    const token = req.headers['authorization']?.split(' ')[1];\r\n\r\n    if (!token) {\r\n      res.status(401).json({ message: 'No token provided' });\r\n      return \r\n    }\r\n\r\n    // Verify the refresh token\r\n    const decoded = verifyRefreshToken(token);\r\n    \r\n    // Fetch user by ID from the decoded token\r\n    const user = await findUserById(decoded.userId);\r\n    \r\n    if (!user) {\r\n      res.status(404).json({ message: 'User not found' });\r\n      return \r\n    }\r\n    \r\n    // Check if the user is blocked\r\n    if (user.isBlocked) {\r\n      res.status(403).json({ message: 'Your account has been blocked' });\r\n      return \r\n    }\r\n    \r\n    // Attach user data to the request object \r\n    req.user = user;\r\n    \r\n    // Proceed to the next\r\n    next();\r\n  } catch (error:any) {\r\n    res.status(401).json({ message: 'Invalid or expired token', error: error.message });\r\n    return \r\n  }\r\n};\r\n"]}