{"version":3,"file":"auth.middleware.js","sourceRoot":"","sources":["../../src/middlewares/auth.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { verifyAccessToken, verifyRefreshToken } from '../utils/jwt.utils.js';\r\nimport {  findUserById } from '../repositories/user.repositry.js';\r\nimport { UserInterface } from '../models/user.model.js';\r\n\r\n\r\n// Extend Express Request type to include user\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      currentUser?: UserInterface;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Verify access token middleware\r\nexport const verifyToken = async (req: Request, res: Response, next: NextFunction) => {\r\n  const accessToken = req.cookies.accessToken;\r\n  if (!accessToken) {\r\n    res.status(401).json({ message: \"Access token not found\" });\r\n    return \r\n  }\r\n  try {\r\n    const decoded = verifyAccessToken(accessToken);\r\n    const user = await findUserById(decoded.userId);\r\n    // console.log(\"current user\",user);\r\n\r\n    if (!user) {\r\n      res.status(401).json({ message: \"User not found\" });\r\n      return \r\n    }\r\n\r\n    req.currentUser = user;\r\n    next();\r\n  } catch (error) {\r\n   res.status(401).json({ message: \"Invalid or expired token\" });\r\n   return \r\n  }\r\n};\r\n\r\n\r\n\r\n// Verify refresh token\r\nexport const verifyRefreshTokenMiddleware = async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const refreshToken = req.cookies.refreshToken;\r\n    \r\n    if (!refreshToken) {\r\n      res.status(401).json({ message: \"Refresh token not found\" });\r\n      return \r\n    }\r\n\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n    const user = await findUserById(decoded.userId);\r\n    \r\n    if (!user || user.refreshToken !== refreshToken) {\r\n      res.status(401).json({ message: \"Invalid refresh token\" });\r\n      return \r\n    }\r\n\r\n    req.currentUser = user;\r\n    next();\r\n  } catch (error) {\r\n   res.status(401).json({ message: \"Invalid or expired refresh token\" });\r\n   return \r\n  }\r\n};\r\n\r\n// Check if user is blocked\r\nexport const checkBlockedStatus = async (req: Request, res: Response, next: NextFunction) => {\r\n  if (req.currentUser?.isBlocked) {\r\n    res.status(403).json({ message: \"Your account has been blocked\" });\r\n    return \r\n  }\r\n  next();\r\n};\r\n\r\n// Role-based authorization middleware\r\nexport const authorize = (...allowedRoles: string[]) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    console.log(\"Entered in to the authentication middleware\");\r\n    if (!req.currentUser) {\r\n      res.status(401).json({ message: \"Authentication required\" });\r\n      return \r\n    }\r\n    const userRole = req.currentUser.role ?? \"\";\r\n    \r\n    console.log(\"Role\",userRole);\r\n\r\n    if (!allowedRoles.includes(userRole)) {\r\n      res.status(403).json({ message: \"Access forbidden\" });\r\n      return \r\n    }\r\n    next();\r\n  };\r\n};"]}