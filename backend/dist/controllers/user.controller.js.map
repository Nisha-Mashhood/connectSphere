{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../src/controllers/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as UserService from \"../services/user.service.js\";\r\nimport { uploadMedia } from \"../utils/cloudinary.utils.js\";\r\n\r\nexport const getAllUsers = async (_req: Request, res: Response) => {\r\n  const users = await UserService.getAllUsers();\r\n  res.json(users);\r\n};\r\n\r\nexport const getUserById = async (req: Request, res: Response) => {\r\n  const user = await UserService.getUserById(req.params.id);\r\n  res.json(user);\r\n};\r\n\r\nexport const updateUserProfile = async (req: Request, res: Response) => {\r\n  const { profilePic, coverPic, ...data } = req.body;\r\n\r\n  const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;\r\n\r\n  // Check if profile photo is uploaded\r\n  if (files?.profilePhoto?.[0]) {\r\n    const profilePhoto = files.profilePhoto[0];\r\n    const uploadedProfilePic = await uploadMedia(\r\n      profilePhoto.path,\r\n      \"profile_photos\",\r\n      profilePhoto.size \r\n    );\r\n    data.profilePic = uploadedProfilePic;\r\n  }\r\n\r\n  // Check if cover photo is uploaded\r\n  if (files?.coverPhoto?.[0]) {\r\n    const coverPhoto = files.coverPhoto[0];\r\n    const uploadedCoverPic = await uploadMedia(\r\n      coverPhoto.path,\r\n      \"cover_photos\",\r\n      coverPhoto.size \r\n    );\r\n    data.coverPic = uploadedCoverPic;\r\n  }\r\n\r\n  const updatedUser = await UserService.updateUserProfile(req.params.id, data);\r\n  res.json(updatedUser);\r\n};\r\n\r\n//block the user\r\nexport const blockUser = async (req: Request, res: Response) => {\r\n  console.log(req.params.id);\r\n  await UserService.blockUser(req.params.id);\r\n  res.json({ message: \"User blocked successfully\" });\r\n};\r\n\r\nexport const unblockUser = async (req: Request, res: Response) => {\r\n  await UserService.unblockUser(req.params.id);\r\n  res.json({ message: \"User unblocked successfully\" });\r\n};\r\n\r\nexport const changeRole = async (req: Request, res: Response) => {\r\n  const { role } = req.body;\r\n  try {\r\n    await UserService.changeRole(req.params.id, role);\r\n    res.json({ message: 'Changed the role Successfully' });\r\n  } catch (error:any) {\r\n    res.status(400).json({ error: error.message });\r\n  }\r\n};"]}