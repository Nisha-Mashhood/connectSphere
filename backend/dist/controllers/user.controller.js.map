{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../src/controllers/user.controller.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,WAAW,MAAM,6BAA6B,CAAC;AAC3D,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAE3D,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,IAAa,EAAE,GAAa,EAAE,EAAE;IAChE,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,CAAC;IAC9C,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC/D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1D,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACrE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAEnD,qCAAqC;IACrC,IACE,GAAG,CAAC,KAAK;QACR,GAAG,CAAC,KAAkD,CAAC,YAAY,EACpE,CAAC;QACD,8BAA8B;QAC9B,MAAM,kBAAkB,GAAG,MAAM,WAAW,CACzC,GAAG,CAAC,KAAiD,CAAC,YAAY,CAAC,CAAC,CAAC;aACnE,IAAI,EACP,gBAAgB,CACjB,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC;IACvC,CAAC;IAED,mCAAmC;IACnC,IACE,GAAG,CAAC,KAAK;QACR,GAAG,CAAC,KAAgD,CAAC,UAAU,EAChE,CAAC;QACD,4BAA4B;QAC5B,MAAM,gBAAgB,GAAG,MAAM,WAAW,CACvC,GAAG,CAAC,KAA+C,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EACvE,cAAc,CACf,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC;IACnC,CAAC;IACD,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC7E,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC7D,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3C,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC/D,MAAM,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC7C,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;AACvD,CAAC,CAAC","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as UserService from \"../services/user.service.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\n\r\nexport const getAllUsers = async (_req: Request, res: Response) => {\r\n  const users = await UserService.getAllUsers();\r\n  res.json(users);\r\n};\r\n\r\nexport const getUserById = async (req: Request, res: Response) => {\r\n  const user = await UserService.getUserById(req.params.id);\r\n  res.json(user);\r\n};\r\n\r\nexport const updateUserProfile = async (req: Request, res: Response) => {\r\n  const { profilePic, coverPic, ...data } = req.body;\r\n\r\n  // Check if profile photo is uploaded\r\n  if (\r\n    req.files &&\r\n    (req.files as { profilePhoto?: Express.Multer.File[] }).profilePhoto\r\n  ) {\r\n    // Handle profile photo upload\r\n    const uploadedProfilePic = await uploadImage(\r\n      (req.files as { profilePhoto: Express.Multer.File[] }).profilePhoto[0]\r\n        .path,\r\n      \"profile_photos\"\r\n    );\r\n    data.profilePic = uploadedProfilePic;\r\n  }\r\n\r\n  // Check if cover photo is uploaded\r\n  if (\r\n    req.files &&\r\n    (req.files as { coverPhoto?: Express.Multer.File[] }).coverPhoto\r\n  ) {\r\n    // Handle cover photo upload\r\n    const uploadedCoverPic = await uploadImage(\r\n      (req.files as { coverPhoto: Express.Multer.File[] }).coverPhoto[0].path,\r\n      \"cover_photos\"\r\n    );\r\n    data.coverPic = uploadedCoverPic;\r\n  }\r\n  const updatedUser = await UserService.updateUserProfile(req.params.id, data);\r\n  res.json(updatedUser);\r\n};\r\n\r\nexport const blockUser = async (req: Request, res: Response) => {\r\n  await UserService.blockUser(req.params.id);\r\n  res.json({ message: \"User blocked successfully\" });\r\n};\r\n\r\nexport const unblockUser = async (req: Request, res: Response) => {\r\n  await UserService.unblockUser(req.params.id);\r\n  res.json({ message: \"User unblocked successfully\" });\r\n};\r\n"]}