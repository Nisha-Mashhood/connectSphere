{"version":3,"file":"mentor.controller.js","sourceRoot":"","sources":["../../src/controllers/mentor.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as MentorService from \"../services/mentor.service.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\n\r\nexport const submitMentorRequest = async (req: Request, res: Response) => {\r\n  const { userId, skills, specialization } = req.body;\r\n\r\n  try {\r\n    // Check if mentor already exists\r\n    const existingMentor = await MentorService.getMentorByUserId(userId);\r\n    if (existingMentor) {\r\n      res.status(400).json({ message: \"Mentor profile already exists.\" });\r\n      return\r\n    }\r\n    // Upload certificates\r\n    let uploadedCertificates: string[] = [];\r\n    if (req.files && (req.files as Express.Multer.File[]).length > 0) {\r\n      const files = req.files as Express.Multer.File[];\r\n      const uploadPromises = files.map((file) =>\r\n        uploadImage(file.path, \"mentor_certificates\")\r\n      );\r\n      uploadedCertificates = await Promise.all(uploadPromises);\r\n    } else {\r\n      res.status(400).json({ message: \"Certificates are required for mentor registration.\" });\r\n      return\r\n    }\r\n    // Create mentor record\r\n    const newMentor = await MentorService.submitMentorRequest({\r\n      userId,\r\n      skills, \r\n      specialization,\r\n      certifications: uploadedCertificates,\r\n      // isApproved: false, \r\n    });\r\n\r\n    res.status(201).json({\r\n      message: \"Mentor registration submitted successfully for admin review.\",\r\n      data: newMentor,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error registering mentor:\", error);\r\n    res.status(500).json({ message: \"Server error. Please try again later.\" });\r\n  }\r\n};\r\n\r\n//update available slots for mentors in the profile section of mentors\r\nexport const updateAvailableSlots = async (req: Request, res: Response) => {\r\n  const { availableSlots } = req.body;\r\n\r\n  try {\r\n    const updatedMentor = await MentorService.updateMentorById(req.params.mentorId, {\r\n      availableSlots,\r\n    });\r\n\r\n    if (!updatedMentor) {\r\n     res.status(404).json({ message: \"Mentor not found.\" });\r\n     return\r\n    }\r\n\r\n    res.status(200).json({\r\n      message: \"Available slots updated successfully.\",\r\n      data: updatedMentor,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating available slots:\", error);\r\n    res.status(500).json({ message: \"Server error. Please try again later.\" });\r\n  }\r\n};\r\n\r\nexport const getAllMentorRequests = async (_req: Request, res: Response) => {\r\n  const mentorRequests = await MentorService.getAllMentorRequests();\r\n  res.json(mentorRequests);\r\n};\r\n\r\nexport const approveMentorRequest = async (req: Request, res: Response) => {\r\n  await MentorService.approveMentorRequest(req.params.id);\r\n  res.json({ message: \"Mentor request approved successfully\" });\r\n};\r\n\r\nexport const rejectMentorRequest = async (req: Request, res: Response) => {\r\n  await MentorService.rejectMentorRequest(req.params.id);\r\n  res.json({ message: \"Mentor request rejected successfully\" });\r\n};\r\n"]}