{"version":3,"file":"mentor.controller.js","sourceRoot":"","sources":["../../src/controllers/mentor.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as MentorService from \"../services/mentor.service.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\nimport * as UserService from '../services/user.service.js';\r\n\r\nexport const checkMentorStatus = async (req: Request, res: Response) => {\r\n  const userId = req.params.id;\r\n  try {\r\n    const mentor = await MentorService.getMentorByUserId(userId);\r\n    if (!mentor) {\r\n      res.status(200).json({ mentor: null });\r\n      return \r\n    }\r\n    res.status(200).json({ mentor });\r\n    return \r\n  } catch (error:any) {\r\n    res.status(400).json({ message: \"Error fetching mentor status\", error: error.message });\r\n    return \r\n  }\r\n};\r\n\r\n//Get mentor details using mentorId\r\nexport const getMentorDetails = async (req: Request, res: Response) =>{\r\n  const { mentorId } = req.params;\r\n  try {\r\n    const mentor = await MentorService.getMentorBymentorId(mentorId);\r\n    res.status(200).json({ mentor})\r\n    return;\r\n  } catch (error:any) {\r\n    res.status(400).json({ message: \"Error fetching mentor Details\", error: error.message });\r\n    return \r\n  }\r\n}\r\n\r\n//create mentor record\r\nexport const createMentor = async (req: Request, res: Response) => {\r\n  const { userId, specialization, bio, price, skills, availableSlots } = req.body;\r\n\r\n  try {\r\n\r\n    const user = await UserService.getUserById(userId);\r\n    if (!user) {\r\n      res.status(404).json({ message: \"User not found.\" });\r\n      return;\r\n    }\r\n\r\n    // Change the user's role to \"mentor\" if it's not already set to \"mentor\"\r\n    if (user.role !== \"mentor\") {\r\n      await UserService.changeRole(userId, \"mentor\"); \r\n    }\r\n\r\n    // Check if mentor already exists\r\n    const existingMentor = await MentorService.getMentorByUserId(userId);\r\n    if (existingMentor) {\r\n      res.status(400).json({ message: \"Mentor profile already exists.\" });\r\n      return \r\n    }\r\n\r\n    // Check if certificates are provided and upload them to Cloudinary\r\n    let uploadedCertificates: string[] = [];\r\n    if (req.files && (req.files as Express.Multer.File[]).length > 0) {\r\n      const files = req.files as Express.Multer.File[];\r\n      const uploadPromises = files.map((file) =>\r\n        uploadImage(file.path, \"mentor_certificates\") // Upload each file to Cloudinary\r\n      );\r\n      uploadedCertificates = await Promise.all(uploadPromises); // Get URLs of uploaded certificates\r\n    } else {\r\n      res.status(400).json({ message: \"Certificates are required for mentor registration.\" });\r\n      return \r\n    }\r\n\r\n    // Create mentor record (submit for admin review)\r\n    const newMentor = await MentorService.submitMentorRequest({\r\n      userId,\r\n      skills:JSON.parse(skills),\r\n      specialization,\r\n      bio,\r\n      price,\r\n      availableSlots: JSON.parse(availableSlots),\r\n      certifications: uploadedCertificates,\r\n    });\r\n\r\n    res.status(201).json({\r\n      message: \"Mentor registration submitted successfully for admin review.\",\r\n      data: newMentor,\r\n    });\r\n    return \r\n  } catch (error: any) {\r\n    console.error(\"Error registering mentor:\", error);\r\n   res.status(500).json({ message: \"Server error. Please try again later.\" });\r\n   return \r\n  }\r\n\r\n}\r\n\r\nexport const getAllMentorRequests = async (_req: Request, res: Response) => {\r\n  try {\r\n    const mentorRequests = await MentorService.getAllMentorRequests();\r\n    res.json(mentorRequests);\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching mentor requests:\", error);\r\n    res.status(500).json({ message: \"Server error. Please try again later.\" });\r\n  }\r\n};\r\n\r\nexport const getAllMentors = async (_req:Request, res:Response) =>{\r\n  try {\r\n    const mentors = await MentorService.getAllMentors()\r\n    res.json(mentors)\r\n  } catch (error) {\r\n    console.log(\"Error in fetching Mentors\",error);\r\n    res.status(500).json({message: \"Server error. Please Try again later. \"})\r\n  }\r\n}\r\n\r\n\r\n// Get mentor by userId\r\nexport const getMentorByUserId = async (req: Request, res: Response) => {\r\n  const { userId } = req.params;\r\n\r\n  try {\r\n    const mentor = await MentorService.getMentorByUserId(userId);\r\n    if (!mentor) {\r\n      res.status(404).json({ message: \"Mentor not found\" });\r\n      return \r\n    }\r\n    res.json(mentor);\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching mentor:\", error);\r\n    res.status(500).json({ message: \"Server error. Please try again later.\" });\r\n  }\r\n};\r\n\r\n\r\nexport const approveMentorRequest = async (req: Request, res: Response) => {\r\n  try {\r\n    await MentorService.approveMentorRequest(req.params.id);\r\n    res.json({ message: \"Mentor request approved successfully. \\n Mail has been send to the user\" });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const rejectMentorRequest = async (req: Request, res: Response) => {\r\n  const { reason } = req.body;\r\n  if (!reason) {\r\n    res.status(400).json({ message: \"Rejection reason is required. \\n Mail has been send to the user\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await MentorService.rejectMentorRequest(req.params.id, reason);\r\n    res.json({ message: \"Mentor request rejected successfully.\" });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Cancel mentorship\r\nexport const cancelMentorship = async (req:Request, res:Response) => {\r\n  try {\r\n    const { mentorId } = req.params;\r\n    await MentorService.cancelMentorship(mentorId);\r\n    res.status(200).json({ message: 'Mentorship canceled successfully.' });\r\n  } catch (error:any) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};"]}