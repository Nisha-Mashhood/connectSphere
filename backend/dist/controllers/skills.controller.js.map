{"version":3,"file":"skills.controller.js","sourceRoot":"","sources":["../../src/controllers/skills.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as SkillService from \"../services/skills.service.js\";\r\n\r\nexport const createSkill = async(req:Request, res:Response): Promise<void> => {\r\n    try {\r\n      const imagePath = req.file?.path; \r\n      const fileSize = req.file?.size\r\n        const skill = await SkillService.createSkill(req.body,imagePath, fileSize);\r\n        res.status(201).json({ message: \"Skill created successfully\", skill });\r\n      } catch (error:any) {\r\n        res.status(500).json({ message: \"Error creating skill\", error: error.message });\r\n      }\r\n}\r\n\r\nexport const getAllSkills = async(req:Request, res:Response): Promise<void> => {\r\n    try {\r\n        const skills = await SkillService.getAllSkills(req.params.subcategoryId);\r\n        res.status(200).json(skills);\r\n      } catch (error:any) {\r\n        res.status(500).json({ message: \"Error fetching skills\", error: error.message });\r\n      }\r\n}\r\n\r\n\r\n\r\nexport const getSkillById = async(req:Request, res:Response): Promise<void> => {\r\n    try {\r\n        const skill = await SkillService.getSkillById(req.params.id);\r\n        if (!skill) {\r\n          res.status(404).json({ message: \"Skill not found\" });\r\n          return\r\n        }\r\n        res.status(200).json(skill);\r\n      } catch (error:any) {\r\n        res.status(500).json({ message: \"Error fetching skill\", error: error.message });\r\n      }\r\n}\r\n\r\nexport const updateSkill = async(req:Request, res:Response): Promise<void> => {\r\n    try {\r\n      const imagePath = req.file?.path; \r\n      const fileSize = req.file?.size\r\n        const updatedSkill = await SkillService.updateSkill(req.params.id, req.body,imagePath, fileSize);\r\n        if (!updatedSkill) {\r\n          res.status(404).json({ message: \"Skill not found\" });\r\n          return \r\n        }\r\n        res.status(200).json({ message: \"Skill updated successfully\", updatedSkill });\r\n      } catch (error:any) {\r\n        res.status(500).json({ message: \"Error updating skill\", error: error.message });\r\n      }\r\n}\r\n\r\nexport const deleteSkill = async(req:Request, res:Response): Promise<void> => {\r\n    try {\r\n        const deletedSkill = await SkillService.deleteSkill(req.params.id);\r\n        if (!deletedSkill) {\r\n          res.status(404).json({ message: \"Skill not found\" });\r\n          return \r\n        }\r\n        res.status(200).json({ message: \"Skill deleted successfully\" });\r\n      } catch (error:any) {\r\n        res.status(500).json({ message: \"Error deleting skill\", error: error.message });\r\n      }\r\n}\r\n\r\n\r\n//fetch skills \r\nexport const getSkills = async(_:Request, res:Response) : Promise<void> =>{\r\n  try {\r\n    const skills = await SkillService.getSkills(); \r\n    res.status(200).json({skills});\r\n  } catch (error: any) {\r\n    console.error('Error fetching skills:', error.message);\r\n    res.status(500).json({ message: \"Error fetching skills\", error: error.message });\r\n  }\r\n}\r\n"]}