{"version":3,"file":"category.controller.js","sourceRoot":"","sources":["../../src/controllers/category.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as CategoryService from \"../services/category.service.js\";\r\n\r\nexport const createCategory = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const imagePath = req.file?.path;\r\n    const fileSize = req.file?.size;\r\n    // console.log(req.body);\r\n    // console.log(imagePath);\r\n\r\n    const isDuplicate = await CategoryService.isDuplicateCategoryName(\r\n      req.body.name\r\n    );\r\n    if (isDuplicate) {\r\n      res.status(400).json({ message: \"Category name already exists\" });\r\n      return;\r\n    }\r\n    const category = await CategoryService.createCategory(\r\n      req.body,\r\n      imagePath,\r\n      fileSize\r\n    );\r\n    res\r\n      .status(201)\r\n      .json({ message: \"Category created successfully\", category });\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error creating category\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const getAllCategories = async (\r\n  _: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const categories = await CategoryService.getAllCategories();\r\n    res.status(200).json(categories);\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error fetching categories\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const getCategoryById = async (\r\n  req: Request<{ id: string }>,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const category = await CategoryService.getCategoryById(req.params.id);\r\n    if (!category) {\r\n      res.status(404).json({ message: \"Category not found\" });\r\n      return;\r\n    }\r\n    res.status(200).json(category);\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error fetching category\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const updateCategory = async (\r\n  req: Request<{ id: string }>,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const imagePath = req.file?.path;\r\n    const fileSize = req.file?.size;\r\n    // console.log(req.body);\r\n    // console.log(imagePath);\r\n    const isDuplicate = await CategoryService.isDuplicateCategoryName(\r\n      req.body.name,\r\n      req.params.id\r\n    );\r\n    if (isDuplicate) {\r\n      res.status(400).json({ message: \"Category name already exists\" });\r\n      return;\r\n    }\r\n    const updatedCategory = await CategoryService.updateCategory(\r\n      req.params.id,\r\n      req.body,\r\n      imagePath,\r\n      fileSize\r\n    );\r\n    if (!updatedCategory) {\r\n      res.status(404).json({ message: \"Category not found\" });\r\n      return;\r\n    }\r\n    res\r\n      .status(200)\r\n      .json({ message: \"Category updated successfully\", updatedCategory });\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error updating category\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const deleteCategory = async (\r\n  req: Request<{ id: string }>,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const deletedCategory = await CategoryService.deleteCategory(req.params.id);\r\n    if (!deletedCategory) {\r\n      res.status(404).json({ message: \"Category not found\" });\r\n      return;\r\n    }\r\n    res.status(200).json({ message: \"Category deleted successfully\" });\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error deleting category\", error: error.message });\r\n  }\r\n};\r\n"]}