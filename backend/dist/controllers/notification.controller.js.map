{"version":3,"file":"notification.controller.js","sourceRoot":"","sources":["../../src/controllers/notification.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as notificationService from \"../services/notification.service.js\";\r\n\r\nexport const subscribeToNotifications = async (req:Request, res:Response) => {\r\n  try {\r\n    const { subscription, notificationDateTime, taskData } = req.body;\r\n    const{ currentUserId } = req.params\r\n    console.log(\"Task Id :\",taskData);\r\n    console.log(\"Subscription :\",subscription);\r\n    console.log(\"Notification Day and Time : \",notificationDateTime);\r\n    console.log(\"Current User ID:\", currentUserId);\r\n    \r\n    if (!taskData || !subscription) {\r\n     res.status(400).json({ message: \"Task data and subscription are required.\" });\r\n     return \r\n  }\r\n      // Validate subscription object\r\n      if (!subscription.endpoint || !subscription.keys || !subscription.keys.auth || !subscription.keys.p256dh) {\r\n        res.status(400).json({ message: \"Invalid subscription format. Must include endpoint and keys (auth & p256dh).\" });\r\n        return;\r\n      }\r\n  const updatedTask = await notificationService.storeSubscription(currentUserId, taskData._id, subscription);\r\n  res.status(200).json({ message: \"Subscribed successfully.\", task: updatedTask });\r\n  return \r\n  } catch (error:any) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n\r\n//Socket.io notifications\r\n\r\n  export const getNotifications = async(req: Request, res: Response) =>{\r\n    const userId = req.query.userId as string;\r\n    if (!userId) {\r\n     res.status(400).json({ error: 'userId is required' });\r\n     return \r\n    }\r\n    const notifications = await notificationService.getNotifications(userId);\r\n    res.json(notifications);\r\n  }\r\n\r\n  export const markAsRead = async(req: Request, res: Response) =>{\r\n    const { notificationId } = req.params;\r\n    const notification = await notificationService.markNotificationAsRead(notificationId);\r\n    if (!notification) {\r\n      res.status(404).json({ error: 'Notification not found' });\r\n      return \r\n    }\r\n    res.json(notification);\r\n  }\r\n\r\n  export const getUnreadCount = async(req: Request, res: Response) => {\r\n    const userId = req.query.userId as string;\r\n    if (!userId) {\r\n      res.status(400).json({ error: 'userId is required' });\r\n      return \r\n    }\r\n    const count = await notificationService.getUnreadCount(userId);\r\n    res.json({ count });\r\n  }\r\n"]}