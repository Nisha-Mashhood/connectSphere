{"version":3,"file":"call.controller.js","sourceRoot":"","sources":["../../src/controllers/call.controller.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,WAAW,MAAO,6BAA6B,CAAC;AAE1D,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,EAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAC1D,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAClE,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,yBAAyB,EAAE,CAAC,CAAC;YAC3D,OAAM;QACR,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACrF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1D,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IACpE,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;YACvD,OAAM;QACR,CAAC;QACD,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,OAAiB,CAAC,CAAC;QACrE,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IACnE,IAAI,CAAC;QACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAC7B,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC,CAAC;YACtD,OAAM;QACR,CAAC;QACD,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,gBAAgB,CAAC,MAAgB,CAAC,CAAC;QACnE,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;AACH,CAAC,CAAA","sourcesContent":["import { Request, Response } from 'express';\r\nimport * as CallService  from '../services/call.service.js';\r\n\r\n  export const logCall = async(req: Request, res: Response) => {\r\n    try {\r\n      const { chatKey, callerId, recipientId, type, status } = req.body;\r\n      if (!chatKey || !callerId || !recipientId || !type || !status) {\r\n        res.status(400).json({ error: 'Missing required fields' });\r\n        return \r\n      }\r\n      const call = await CallService.logCall(chatKey, callerId, recipientId, type, status);\r\n      res.status(201).json({ status: 'success', data: call });\r\n    } catch (error: any) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  export const getCallsByChatKey = async(req: Request, res: Response) => {\r\n    try {\r\n      const { chatKey } = req.query;\r\n      if (!chatKey) {\r\n        res.status(400).json({ error: 'chatKey is required' });\r\n        return \r\n      }\r\n      const calls = await CallService.getCallsByChatKey(chatKey as string);\r\n      res.json({ status: 'success', data: calls });\r\n    } catch (error: any) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }\r\n\r\n  export const getCallsByUserId = async(req: Request, res: Response) => {\r\n    try {\r\n      const { userId } = req.query;\r\n      if (!userId) {\r\n        res.status(400).json({ error: 'userId is required' });\r\n        return \r\n      }\r\n      const calls = await CallService.getCallsByUserId(userId as string);\r\n      res.json({ status: 'success', data: calls });\r\n    } catch (error: any) {\r\n      res.status(500).json({ error: error.message });\r\n    }\r\n  }"]}