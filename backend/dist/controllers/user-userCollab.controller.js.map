{"version":3,"file":"user-userCollab.controller.js","sourceRoot":"","sources":["../../src/controllers/user-userCollab.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as userConnectionService from \"../services/user-userService.service.js\";\r\n\r\n// Send user-to-user request\r\nexport const sendRequestController = async (req: Request, res: Response) => {\r\n  const { id: requesterId } = req.params;\r\n  const { recipientId } = req.body;\r\n\r\n  try {\r\n    const newConnection = await userConnectionService.sendUserConnectionRequest(\r\n      requesterId,\r\n      recipientId\r\n    );\r\n    res\r\n      .status(201)\r\n      .json({ message: \"Connection request sent\", data: newConnection });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Accept or Reject request\r\nexport const respondToRequestController = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  const { connectionId } = req.params;\r\n  const { action } = req.body; // \"Accepted\" or \"Rejected\"\r\n\r\n  try {\r\n    const updatedConnection =\r\n      await userConnectionService.respondToConnectionRequest(\r\n        connectionId,\r\n        action\r\n      );\r\n    res\r\n      .status(200)\r\n      .json({\r\n        message: `Request ${action.toLowerCase()}`,\r\n        data: updatedConnection,\r\n      });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Disconnect user connection\r\nexport const disconnectConnectionController = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  const { connectionId } = req.params;\r\n  const { reason } = req.body;\r\n\r\n  try {\r\n    const disconnected = await userConnectionService.disconnectConnection(\r\n      connectionId,\r\n      reason\r\n    );\r\n    res\r\n      .status(200)\r\n      .json({ message: \"Connection disconnected\", data: disconnected });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Get all connections for a user\r\nexport const getUserConnectionsController = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  const { userId } = req.params;\r\n\r\n  try {\r\n    const connections = await userConnectionService.fetchUserConnections(\r\n      userId\r\n    );\r\n    console.log(\"user Conections from backend : \", connections);\r\n    res.status(200).json({ message: \"Connections fetched\", data: connections });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Fetch sent and received user-user requests\r\nexport const getUserRequestsController = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  const { userId } = req.params;\r\n\r\n  try {\r\n    const { sentRequests, receivedRequests } =\r\n      await userConnectionService.fetchUserRequests(userId);\r\n    res.status(200).json({\r\n      message: \"User requests fetched successfully\",\r\n      sentRequests,\r\n      receivedRequests,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//FOR ADMIN\r\n// Get all user-user collaborations\r\nexport const getAllUserConnectionsController = async (\r\n  _req: Request,\r\n  res: Response\r\n) => {\r\n  try {\r\n    const connections = await userConnectionService.fetchAllUserConnections();\r\n    res.status(200).json(connections);\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Get a specific user-user collaboration by ID\r\nexport const getUserConnectionByIdController = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  console.log(\"Inside the controller\");\r\n  try {\r\n    const connectionId = req.params.connectionId;\r\n    console.log(\"Connection Id in Controller :\", connectionId);\r\n    const connection = await userConnectionService.fetchUserConnectionById(\r\n      connectionId\r\n    );\r\n    if (!connection) {\r\n      console.log(\"No connection found for this connectionId\");\r\n    }\r\n    res.status(200).json(connection);\r\n  } catch (error: any) {\r\n    console.log(error);\r\n    res.status(404).json({ message: error.message });\r\n  }\r\n};\r\n"]}