{"version":3,"file":"user-userCollab.controller.js","sourceRoot":"","sources":["../../src/controllers/user-userCollab.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as userConnectionService from \"../services/user-userService.service.js\";\r\n\r\n// Send user-to-user request\r\nexport const sendRequestController = async (req: Request, res: Response) => {\r\n  const { id: requesterId } = req.params;\r\n  const { recipientId } = req.body;\r\n\r\n  try {\r\n    const newConnection = await userConnectionService.sendUserConnectionRequest(requesterId, recipientId);\r\n    res.status(201).json({ message: \"Connection request sent\", data: newConnection });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Accept or Reject request\r\nexport const respondToRequestController = async (req: Request, res: Response) => {\r\n  const { connectionId } = req.params;\r\n  const { action } = req.body; // \"Accepted\" or \"Rejected\"\r\n\r\n  try {\r\n    const updatedConnection = await userConnectionService.respondToConnectionRequest(connectionId, action);\r\n    res.status(200).json({ message: `Request ${action.toLowerCase()}`, data: updatedConnection });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Disconnect user connection\r\nexport const disconnectConnectionController = async (req: Request, res: Response) => {\r\n  const { connectionId } = req.params;\r\n  const { reason } = req.body;\r\n\r\n  try {\r\n    const disconnected = await userConnectionService.disconnectConnection(connectionId, reason);\r\n    res.status(200).json({ message: \"Connection disconnected\", data: disconnected });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Get all connections for a user\r\nexport const getUserConnectionsController = async (req: Request, res: Response) => {\r\n  const { userId } = req.params;\r\n\r\n  try {\r\n    const connections = await userConnectionService.fetchUserConnections(userId);\r\n    res.status(200).json({ message: \"Connections fetched\", data: connections });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Fetch sent and received user-user requests\r\nexport const getUserRequestsController = async (req: Request, res: Response) => {\r\n    const { userId } = req.params;\r\n  \r\n    try {\r\n      const { sentRequests, receivedRequests } = await userConnectionService.fetchUserRequests(userId);\r\n      res.status(200).json({\r\n        message: \"User requests fetched successfully\",\r\n        sentRequests,\r\n        receivedRequests,\r\n      });\r\n    } catch (error: any) {\r\n      res.status(500).json({ message: error.message });\r\n    }\r\n  };"]}