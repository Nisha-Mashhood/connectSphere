{"version":3,"file":"task.controller.js","sourceRoot":"","sources":["../../src/controllers/task.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport {\r\n  changeTaskPriorityService,\r\n  changeTaskStatusService,\r\n  createTaskService,\r\n  deleteTaskService,\r\n  editTaskService,\r\n  getTasksByContextService,\r\n} from \"../services/task.service.js\";\r\n\r\nexport const createTask = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { id } = req.params;\r\n  try {\r\n    const imagePath = req.file?.path;\r\n    const fileSize = req.file?.size;\r\n    const taskData = JSON.parse(req.body.taskData);\r\n    taskData.createdBy = id;\r\n    const newTask = await createTaskService(taskData, imagePath, fileSize);\r\n\r\n    res\r\n      .status(201)\r\n      .json({ message: \"Task created successfully\", task: newTask });\r\n  } catch (error: any) {\r\n    console.error(\"Error:\", error);\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error creating task\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const getTasksByContext = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { contextType, contextId, userId } = req.params;\r\n  try {\r\n    const tasks = await getTasksByContextService(\r\n      contextType,\r\n      contextId,\r\n      userId\r\n    );\r\n    res.status(200).json(tasks);\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error fetching tasks\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const updateTaskPriority = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { taskId } = req.params;\r\n  const { priority } = req.body;\r\n  try {\r\n    const updatedTask = await changeTaskPriorityService(taskId, priority);\r\n    res.status(200).json(updatedTask);\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error updating priority\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const updateTaskStatus = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { taskId } = req.params;\r\n  const { status } = req.body;\r\n  try {\r\n    const updatedTask = await changeTaskStatusService(taskId, status);\r\n    res.status(200).json(updatedTask);\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error updating status\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const editTask = async (req: Request, res: Response): Promise<void> => {\r\n  const { taskId } = req.params;\r\n  const updates = req.body;\r\n  try {\r\n    const updatedTask = await editTaskService(taskId, updates);\r\n    res.status(200).json(updatedTask);\r\n  } catch (error: any) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error editing task\", error: error.message });\r\n  }\r\n};\r\n\r\nexport const deleteTask = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { taskId } = req.params;\r\n  try {\r\n    await deleteTaskService(taskId);\r\n    res.status(200).json({ message: \"Task deleted successfully\" });\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting task:\", error);\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error deleting task\", error: error.message });\r\n  }\r\n};\r\n"]}