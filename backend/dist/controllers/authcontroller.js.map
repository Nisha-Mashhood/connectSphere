{"version":3,"file":"authcontroller.js","sourceRoot":"","sources":["../../src/controllers/authcontroller.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EACL,mBAAmB,EACnB,kBAAkB,EAClB,uBAAuB,EACvB,iBAAiB,EACjB,SAAS,GACV,MAAM,4BAA4B,CAAC;AAIpC,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IAC3E,IAAI,CAAC;QACH,MAAM,eAAe,GAAG,MAAM,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,MAAM,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;IAC5F,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IAC1E,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,IAAI,EAAE,CAAC,CAAC;IACpE,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IAC/E,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IACzE,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,IAAI,EAAE,CAAC,CAAC;IACpE,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC,CAAA,CAAC;AAEF,oBAAoB;AACpB,MAAM,CAAC,MAAM,KAAK,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IACvD,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QACrC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACzD,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;IACzD,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;AACH,CAAC,CAAA,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport {\r\n  savePersonalDetails,\r\n  saveAccountDetails,\r\n  saveProfessionalDetails,\r\n  saveReasonAndRole,\r\n  loginUser,\r\n} from '../services/authService.js';\r\n\r\n\r\n\r\nexport const registerPersonalDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const personalDetails = await savePersonalDetails(req.body);\r\n    res.status(201).json({ message: 'Personal details saved.', userId: personalDetails._id });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const registerAccountDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const user = await saveAccountDetails(req.body);\r\n    res.status(200).json({ message: 'Account details saved.', user });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const registerProfessionalDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const user = await saveProfessionalDetails(req.body);\r\n    res.status(200).json({ message: 'Professional details saved.', user });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const registerReasonAndRole = async (req: Request, res: Response) => {\r\n  try {\r\n    const user = await saveReasonAndRole(req.body);\r\n    res.status(200).json({ message: 'Reason and role saved.', user });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Handle user login\r\nexport const login = async (req: Request, res: Response) => {\r\n    try {\r\n      const { email, password } = req.body;\r\n      const { user, token } = await loginUser(email, password);\r\n      res.json({ message: 'Login successful', user, token });\r\n    } catch (error: any) {\r\n      res.status(400).json({ message: error.message });\r\n    }\r\n  };"]}