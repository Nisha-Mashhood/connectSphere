{"version":3,"file":"contactUs.controller.js","sourceRoot":"","sources":["../../src/controllers/contactUs.controller.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,cAAc,MAAM,kCAAkC,CAAC;AAEnE,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACxE,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE1C,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,oBAAoB,CAAC;YAC/D,IAAI;YACJ,KAAK;YACL,OAAO;SACR,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,6CAA6C;YACtD,IAAI,EAAE,cAAc;SACrB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAC/D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,qCAAqC,GAAG,KAAK,CAAC,OAAO;SAC/D,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,EAAE,IAAa,EAAE,GAAa,EAAE,EAAE;IAC1E,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,qBAAqB,EAAE,CAAC;QAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,uCAAuC;YAChD,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,oCAAoC,GAAG,KAAK,CAAC,OAAO;SAC9D,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,MAAM,EAAE,gBAAgB,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QACxC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QACzC,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;QACjG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,yBAAyB;YAClC,IAAI,EAAE,cAAc;SACrB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,wBAAwB,GAAG,KAAK,CAAC,OAAO;SAClD,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { Request, Response } from \"express\";\r\nimport * as ContactService from \"../services/contactUs.service.js\";\r\n\r\nexport const createContactMessage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { name, email, message } = req.body;\r\n\r\n    const contactMessage = await ContactService.createContactMessage({\r\n      name,\r\n      email,\r\n      message,\r\n    });\r\n\r\n    res.status(201).json({\r\n      success: true,\r\n      message: \"Contact message sent and saved successfully\",\r\n      data: contactMessage,\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"Error in createContactMessage:\", error.message);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Failed to process contact message: \" + error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getAllContactMessages = async (_req: Request, res: Response) => {\r\n  try {\r\n    const messages = await ContactService.getAllContactMessages();\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Contact messages fetched successfully\",\r\n      data: messages,\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"Error in getAllContactMessages:\", error.message);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Failed to fetch contact messages: \" + error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const sendReply = async (req: Request, res: Response) => {\r\n  try {\r\n    const { contactMessageId } = req.params;\r\n    const { email, replyMessage } = req.body;\r\n    const updatedMessage = await ContactService.sendReply(contactMessageId, { email, replyMessage });\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Reply sent successfully\",\r\n      data: updatedMessage,\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"Error in sendReply:\", error.message);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Failed to send reply: \" + error.message,\r\n    });\r\n  }\r\n};"]}