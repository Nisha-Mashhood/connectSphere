{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../src/controllers/auth.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport {\r\n  loginUser,\r\n  forgotPassword,\r\n  verifyOTP,\r\n  resetPassword,\r\n  refreshToken as refeshTokenService,\r\n  logout as logoutUserService,\r\n  sigupDetails,\r\n  verifyAdminPasskey,\r\n  checkProfileCompletion,\r\n  profileDetails,\r\n  updateUserProfile,\r\n  googleSignupService,\r\n  googleLoginService,\r\n  githubLoginService,\r\n  githubSignupService\r\n} from \"../services/auth.service.js\";\r\nimport { clearCookies, setTokensInCookies } from \"../utils/jwt.utils.js\";\r\n\r\n//Handles the Registration\r\nexport const signup = async (req: Request, res: Response) => {\r\n  try {\r\n    \r\n    await sigupDetails(req.body)\r\n    res.status(201).json({\r\n      message:\"User Registered Successfully\"\r\n    })\r\n  } catch (error: any) {\r\n    console.error(\"Signup Error:\", error.message);\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// Handle user login\r\nexport const login = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    //console.log(req.body);\r\n    const { user, accessToken, refreshToken } = await loginUser(\r\n      email,\r\n      password\r\n    );\r\n    // Store tokens in cookies\r\n    setTokensInCookies(res, accessToken, refreshToken);\r\n    res.json({ message: \"Login successful\", user });\r\n  } catch (error: any) {\r\n    if (error.message === \"User not found\") {\r\n      res.status(404).json({ message: error.message });\r\n      return \r\n    }\r\n    if (error.message === \"Blocked\") {\r\n      res.status(403).json({ message: error.message });\r\n      return \r\n    }\r\n    if (error.message === \"Invalid credentials\") {\r\n      res.status(401).json({ message: error.message });\r\n      return \r\n    }\r\n    if (error.message === \"This account is registered using a third-party provider. Please log in with your provider.\") {\r\n      res.status(404).json({ message: error.message });\r\n      return \r\n    }\r\n    res.status(500).json({ message: \"Internal Server Error\" });\r\n  }\r\n  }\r\n\r\n// Google Signup Controller\r\nexport const googleSignup = async (req: Request, res: Response) => {\r\n  try {\r\n    const { code } = req.body;\r\n\r\n    const newUser = await googleSignupService(code);\r\n    res.status(201).json({ message: \"User signed up successfully\", user: newUser });\r\n  } catch (error: any) {\r\n    console.error(\"Google Signup Error:\", error.message);\r\n    res.status(500).json({ message: \"Google signup failed.\", error: error.message });\r\n  }\r\n};\r\n\r\n// Google Login Controller\r\nexport const googleLogin = async (req: Request, res: Response) => {\r\n  try {\r\n    const { code } = req.body;\r\n\r\n    const { user, accessToken, refreshToken } = await googleLoginService(code);\r\n\r\n    // Store tokens in cookies\r\n    setTokensInCookies(res, accessToken, refreshToken);\r\n\r\n    res.status(200).json({\r\n      message: \"Google login successful\",\r\n      user,\r\n      accessToken,\r\n      refreshToken,\r\n    });\r\n\r\n  } catch (error: any) {\r\n    if (error.message === \"Email not registered\") {\r\n      res.status(404).json({ message: error.message });\r\n    } else {\r\n      res.status(500).json({ message: \"Google login failed.\", error: error.message });\r\n    }\r\n    return\r\n  }\r\n};\r\n\r\n//Handles github Signup\r\nexport const githubSignup = async (req: Request, res: Response) =>{\r\n  try {\r\n    const { code } = req.body;\r\n    console.log(\"Code received for signup:\", code);\r\n\r\n    const newUser = await githubSignupService(code);\r\n    res.status(201).json({ message: \"User signed up successfully\", user: newUser });\r\n\r\n  } catch (error:any) {\r\n    console.error(\"Github Signup Error:\", error.message);\r\n    res.status(500).json({ message: \"Github signup failed.\", error: error.message });\r\n    return\r\n  }\r\n}\r\n\r\n//Handles github login\r\nexport const githubLogin = async (req: Request, res: Response) =>{\r\n  try {\r\n    const { code } = req.body;\r\n    const { user, accessToken, refreshToken } = await githubLoginService(code);\r\n\r\n    // Store tokens in cookies\r\n    setTokensInCookies(res, accessToken, refreshToken);\r\n\r\n    res.status(200).json({\r\n      message: \"Github login successful\",\r\n      user,\r\n      accessToken,\r\n      refreshToken,\r\n    });\r\n\r\n  } catch (error:any) {\r\n    if (error.message === \"Email not registered\") {\r\n      res.status(404).json({ message: error.message });\r\n    } else {\r\n      res.status(500).json({ message: \"Github login failed.\", error: error.message });\r\n    }\r\n    return\r\n  }\r\n}\r\n\r\n// Handle refresh token logic\r\nexport const refreshToken = async (req: Request, res: Response) => {\r\n  try {\r\n    const { refreshToken } = req.body; //refresh token is passed in the request body\r\n    const { newAccessToken } = await refeshTokenService(refreshToken);\r\n    res.json({ message: \"Access token refreshed.\", newAccessToken });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const checkProfile = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = req.params.id;\r\n    const isComplete = await checkProfileCompletion(userId);\r\n    res.status(200).json({ isProfileComplete: isComplete });\r\n  } catch (error:any) {\r\n    res.status(500).json({ message: error.message || \"Internal Server Error\" });\r\n  }\r\n};\r\n\r\nexport const getprofileDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = req.params.id;\r\n    const userDetails = await profileDetails(userId);\r\n    res.status(200).json({\r\n      message: \"Profile details accessed successfully\",\r\n      userDetails,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const updateUserDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const id = req.params.Id;\r\n    const { name, email, phone, dateOfBirth, jobTitle, industry, reasonForJoining } = req.body;\r\n\r\n    // Uploaded files (from multer)\r\n    const profilePicFile = (req.files as { [fieldname: string]: Express.Multer.File[] })?.[\"profilePic\"]?.[0];\r\n    const coverPicFile = (req.files as { [fieldname: string]: Express.Multer.File[] })?.[\"coverPic\"]?.[0];\r\n\r\n    const updatedUser = await updateUserProfile(id, {\r\n      name,\r\n      email,\r\n      phone,\r\n      dateOfBirth,\r\n      jobTitle,\r\n      industry,\r\n      reasonForJoining,\r\n      profilePicFile,\r\n      coverPicFile,\r\n    });\r\n\r\n    res.status(200).json({ message: \"Profile updated successfully\", user: updatedUser });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// Handle logout\r\nexport const logout = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email } = req.body; // Get email from the request body\r\n    if (!email) {\r\n       res.status(400).json({ message: \"email is required.\" });\r\n       return\r\n    }\r\n    // Call the logout service to remove the refresh token\r\n    await logoutUserService(email);\r\n    // Clear cookies\r\n    clearCookies(res);\r\n\r\n    res.status(200).json({ message: \"Logged out successfully.\" });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//Handle forgot password\r\nexport const handleForgotPassword = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email } = req.body;\r\n    const otp = await forgotPassword(email);\r\n    res.status(200).json({ message: \"OTP sent to email.\", otp });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//Handles verify OTP\r\nexport const handleVerifyOTP = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email, otp } = req.body;\r\n    const token = await verifyOTP(email, otp);\r\n    res.status(200).json({ message: \"OTP verified.\", token });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//Handles Reset Password\r\nexport const handleResetPassword = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email, newPassword } = req.body;\r\n    await resetPassword(email, newPassword);\r\n    res.status(200).json({ message: \"Password reset successfully.\" });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n\r\nexport const verifyPasskey = async(req:Request, res:Response) => {\r\n  try {\r\n    const { passkey } = req.body;\r\n    const isValid = verifyAdminPasskey(passkey);\r\n    res.status(200).json({ valid: isValid });\r\n  } catch (error:any) {\r\n    if (error.message === \"Invalid admin passkey\") {\r\n      res.status(401).json({ valid: false, message: error.message });\r\n      return \r\n    }\r\n    res.status(500).json({ message: \"Internal Server Error\" });\r\n  }\r\n  }"]}