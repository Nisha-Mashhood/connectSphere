{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../src/controllers/auth.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport {\r\n  loginUser,\r\n  forgotPassword,\r\n  verifyOTP,\r\n  resetPassword,\r\n  refreshToken as refeshTokenService,\r\n  logout as logoutUserService,\r\n  sigupDetails,\r\n  verifyAdminPasskey,\r\n  checkProfileCompletion,\r\n  profileDetails,\r\n  updateUserProfile,\r\n} from \"../services/auth.service.js\";\r\nimport { clearCookies, generateAccessToken, generateRefreshToken, setTokensInCookies } from \"../utils/jwt.utils.js\";\r\nimport { OAuth2Client } from 'google-auth-library';\r\nimport {  findUserByEmail, updateRefreshToken } from \"../repositories/user.repositry.js\";\r\nimport config from '../config/env.config.js';\r\n\r\n//Handles the personal details Registration\r\nexport const signup = async (req: Request, res: Response) => {\r\n  try {\r\n    \r\n    const user = await sigupDetails(req.body)\r\n    console.log(\"Registered User Details:\",user);\r\n    res.status(201).json({\r\n      message:\"User Registered Successfully\"\r\n    })\r\n  } catch (error: any) {\r\n    console.error(\"Signup Error:\", error.message);\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// Handle user login\r\nexport const login = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    //console.log(req.body);\r\n    const { user, accessToken, refreshToken } = await loginUser(\r\n      email,\r\n      password\r\n    );\r\n    // Store tokens in cookies\r\n    setTokensInCookies(res, accessToken, refreshToken);\r\n    res.json({ message: \"Login successful\", user });\r\n  } catch (error: any) {\r\n    if (error.message === \"User not found\") {\r\n      res.status(404).json({ message: error.message });\r\n      return \r\n    }\r\n    if (error.message === \"Blocked\") {\r\n      res.status(403).json({ message: error.message });\r\n      return \r\n    }\r\n    if (error.message === \"Invalid credentials\") {\r\n      res.status(401).json({ message: error.message });\r\n      return \r\n    }\r\n    res.status(500).json({ message: \"Internal Server Error\" });\r\n  }\r\n  }\r\n\r\n  const client = new OAuth2Client({\r\n    clientId: config.googleclientid,\r\n    clientSecret: config.googleclientsecret,\r\n    redirectUri: config.googleredirecturi\r\n  });\r\n  \r\n  // Google Signup Controller\r\n  export const googleSignup = async (req: Request, res: Response) => {\r\n    try {\r\n      const { code } = req.body;\r\n    console.log(\"code:\", code);\r\n    console.log(\"redirect URI:\", config.googleredirecturi); // Debug log\r\n\r\n    const { tokens } = await client.getToken({\r\n      code,\r\n      redirect_uri: config.googleredirecturi\r\n    });\r\n\r\n    if (!tokens.id_token) {\r\n      res.status(400).json({ success: false, message: 'Invalid ID token' });\r\n      return \r\n    }\r\n\r\n    const ticket = await client.verifyIdToken({\r\n      idToken: tokens.id_token,\r\n      audience: config.googleclientid,\r\n    });\r\n\r\n    const payload = ticket.getPayload();\r\n    if (!payload) {\r\n      res.status(400).json({ success: false, message: 'Unable to retrieve user details' });\r\n      return \r\n    }\r\n\r\n    console.log(\"Google User Payload:\", payload);\r\n    \r\n\r\n    // Exchange the authorization code for tokens\r\n    // const { tokens } = await client.getToken(code);\r\n    // if (!tokens.id_token) {\r\n    //   res.status(400).json({ success: false, message: 'Invalid ID token' });\r\n    //   return \r\n    // }\r\n      \r\n    //   // Verify Google token\r\n    //   const ticket = await client.verifyIdToken({\r\n    //     idToken: tokens.id_token,\r\n    //     audience: '262075947289-6uk3rlr59rq0218rf8nqggmgeb6aibtv.apps.googleusercontent.com',\r\n    //   });\r\n      \r\n    //   const payload = ticket.getPayload();\r\n    //   if (!payload) {\r\n    //     res.status(400).json({ success: false, message: 'Unable to retrieve user details' });\r\n    //     return \r\n    //   }\r\n  \r\n    //   const { email, name, picture, sub } = payload;\r\n  \r\n    //   // Check if user already exists\r\n    //   const userExists = await findUserByEmail(email!);\r\n    //   if (userExists) {\r\n    //     res.status(400).json({ \r\n    //       message: \"Email already registered. Please login instead.\"  \r\n    //     });\r\n    //     return \r\n    //   }\r\n  \r\n    //   // Create new user\r\n    //   const newUser = await createUser({\r\n    //     name,\r\n    //     email,\r\n    //     profilePic: picture,\r\n    //     provider: 'google',\r\n    //     providerId: sub\r\n    //   });\r\n  \r\n    //   res.status(201).json({\r\n    //     message: \"User registered successfully\",\r\n    //     user: newUser\r\n    //   });\r\n  \r\n    } catch (error: any) {\r\n      console.error(\"Google Signup Error:\", error);\r\n      res.status(400).json({ message: error.message });\r\n    }\r\n  };\r\n  \r\n  // Google Login Controller\r\n  export const googleLogin = async (req: Request, res: Response) => {\r\n    try {\r\n      const { credential } = req.body;\r\n      \r\n      // Verify Google token\r\n      const ticket = await client.verifyIdToken({\r\n        idToken: credential,\r\n        audience: \"262075947289-6uk3rlr59rq0218rf8nqggmgeb6aibtv.apps.googleusercontent.com\"\r\n      });\r\n      \r\n      const payload = ticket.getPayload();\r\n      if (!payload) {\r\n        throw new Error(\"Invalid Google token\");\r\n      }\r\n  \r\n      const { email } = payload;\r\n  \r\n      // Find user by email\r\n      const user = await findUserByEmail(email!);\r\n      if (!user) {\r\n        res.status(404).json({ \r\n          message: \"No account found with this email. Please sign up first.\" \r\n        });\r\n        return \r\n      }\r\n  \r\n      if (user.isBlocked) {\r\n        throw new Error(\"Blocked\");\r\n      }\r\n  \r\n      // Generate tokens\r\n      const accessToken = generateAccessToken({ \r\n        userId: user._id, \r\n        userRole: user.role \r\n      });\r\n      const refreshToken = generateRefreshToken({ \r\n        userId: user._id, \r\n        userRole: user.role \r\n      });\r\n  \r\n      // Save refresh token\r\n      await updateRefreshToken(user._id.toString(), refreshToken);\r\n  \r\n      // Set cookies\r\n      setTokensInCookies(res, accessToken, refreshToken);\r\n  \r\n      res.json({ \r\n        message: \"Login successful\", \r\n        user \r\n      });\r\n  \r\n    } catch (error: any) {\r\n      console.error(\"Google Login Error:\", error);\r\n      if (error.message === \"Blocked\") {\r\n        res.status(403).json({ message: \"Your account has been blocked\" });\r\n        return \r\n      }\r\n      res.status(400).json({ message: error.message });\r\n    }\r\n  };\r\n\r\n\r\n// Handle refresh token logic\r\nexport const refreshToken = async (req: Request, res: Response) => {\r\n  try {\r\n    const { refreshToken } = req.body; //refresh token is passed in the request body\r\n    const { newAccessToken } = await refeshTokenService(refreshToken);\r\n    res.json({ message: \"Access token refreshed.\", newAccessToken });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const checkProfile = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = req.params.id;\r\n    const isComplete = await checkProfileCompletion(userId);\r\n    res.status(200).json({ isProfileComplete: isComplete });\r\n  } catch (error:any) {\r\n    res.status(500).json({ message: error.message || \"Internal Server Error\" });\r\n  }\r\n};\r\n\r\nexport const getprofileDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = req.params.id;\r\n    const userDetails = await profileDetails(userId);\r\n    res.status(200).json({\r\n      message: \"Profile details accessed successfully\",\r\n      userDetails,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const updateUserDetails = async (req: Request, res: Response) => {\r\n  try {\r\n    const id = req.params.Id;\r\n    const { name, email, phone, dateOfBirth, jobTitle, industry, reasonForJoining } = req.body;\r\n\r\n    // Uploaded files (from multer)\r\n    const profilePicFile = (req.files as { [fieldname: string]: Express.Multer.File[] })?.[\"profilePic\"]?.[0];\r\n    const coverPicFile = (req.files as { [fieldname: string]: Express.Multer.File[] })?.[\"coverPic\"]?.[0];\r\n\r\n    const updatedUser = await updateUserProfile(id, {\r\n      name,\r\n      email,\r\n      phone,\r\n      dateOfBirth,\r\n      jobTitle,\r\n      industry,\r\n      reasonForJoining,\r\n      profilePicFile,\r\n      coverPicFile,\r\n    });\r\n\r\n    res.status(200).json({ message: \"Profile updated successfully\", user: updatedUser });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Google Auth Redirect\r\nexport const googleAuthRedirect = (req: Request, res: Response) => {\r\n  const user: any = req.user;\r\n  setTokensInCookies(res, user.accessToken, user.refreshToken);\r\n  res.json({\r\n    message: \"Google login successful\",\r\n    user: {\r\n      id: user._id,\r\n      email: user.email,\r\n      fullName: user.fullName,\r\n    },\r\n  });\r\n};\r\n\r\n// GitHub Auth Redirect\r\nexport const githubAuthRedirect = (req: Request, res: Response) => {\r\n  const user: any = req.user;\r\n  setTokensInCookies(res, user.accessToken, user.refreshToken);\r\n\r\n  res.json({\r\n    message: \"GitHub login successful\",\r\n    user: {\r\n      id: user._id,\r\n      email: user.email,\r\n      fullName: user.fullName,\r\n    },\r\n  });\r\n};\r\n\r\n// Handle logout\r\nexport const logout = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email } = req.body; // Get email from the request body\r\n    if (!email) {\r\n       res.status(400).json({ message: \"email is required.\" });\r\n       return\r\n    }\r\n    // Call the logout service to remove the refresh token\r\n    await logoutUserService(email);\r\n    // Clear cookies\r\n    clearCookies(res);\r\n\r\n    res.status(200).json({ message: \"Logged out successfully.\" });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//Handle forgot password\r\nexport const handleForgotPassword = async (req: Request, res: Response) => {\r\n  try {\r\n    console.log(req.body);\r\n    const { email } = req.body;\r\n    const otp = await forgotPassword(email);\r\n    res.status(200).json({ message: \"OTP sent to email.\", otp });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//Handles verify OTP\r\nexport const handleVerifyOTP = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email, otp } = req.body;\r\n    const token = await verifyOTP(email, otp);\r\n    res.status(200).json({ message: \"OTP verified.\", token });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n//Handles Reset Password\r\nexport const handleResetPassword = async (req: Request, res: Response) => {\r\n  try {\r\n    console.log(req.body);\r\n    const { email, newPassword } = req.body;\r\n    await resetPassword(email, newPassword);\r\n    res.status(200).json({ message: \"Password reset successfully.\" });\r\n  } catch (error: any) {\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n\r\n// export const checkingBlockedStatus = async(req:Request,res:Response) =>{\r\n//   const { email }= req.body;\r\n\r\n//   if(!email){\r\n//     res.status(400).json({ message: \"Email is required\" });\r\n//     return\r\n//   }\r\n\r\n//   try {\r\n//     const user = await findUserByEmail(email);\r\n//     if (!user) {\r\n//       res.status(404).json({ message: \"User not found\" });\r\n//       return\r\n//     }\r\n//     if (user.isBlocked) {\r\n//       res.status(403).json({ message: \"User is blocked\" });\r\n//       return\r\n//     }\r\n//     res.status(200).json({ message: \"User is active\" });\r\n//     return\r\n//   } catch (error) {\r\n//     res.status(500).json({ message: \"Error checking user status\", error });\r\n//     console.log(\"Error in checking status\")\r\n//     return \r\n//   }\r\n// }\r\n\r\nexport const verifyPasskey = async(req:Request, res:Response) => {\r\n  try {\r\n    const { passkey } = req.body;\r\n    const isValid = verifyAdminPasskey(passkey);\r\n    res.status(200).json({ valid: isValid });\r\n  } catch (error:any) {\r\n    if (error.message === \"Invalid admin passkey\") {\r\n      res.status(401).json({ valid: false, message: error.message });\r\n      return \r\n    }\r\n    res.status(500).json({ message: \"Internal Server Error\" });\r\n  }\r\n  }"]}