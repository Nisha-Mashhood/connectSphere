{"version":3,"file":"Review.modal.js","sourceRoot":"","sources":["../../src/models/Review.modal.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAajE,MAAM,YAAY,GAAW,IAAI,MAAM,CAAC;IACtC,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACf;IACC,MAAM,EAAE;QACN,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACjB;IACC,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;KACT;IACC,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACC,UAAU,EAAE;QACV,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACjB;IACC,QAAQ,EAAE;QACR,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACjB;IACC,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KACpB;CACA,CAAC,CAAC;AAEH,qCAAqC;AACrC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,MAAM,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAAU,QAAQ,EAAE,YAAY,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\";\r\nimport { generateCustomId } from \"../utils/idGenerator.utils.js\";\r\n\r\n\r\nexport interface IReview extends Document {\r\n  reviewId: string;\r\n  userId: mongoose.Types.ObjectId;\r\n  rating: number;\r\n  comment: string;\r\n  isApproved: boolean;\r\n  isSelect: boolean;\r\n  createdAt: Date;\r\n}\r\n\r\nconst ReviewSchema: Schema = new Schema({\r\n  reviewId: { \r\n    type: String, \r\n    unique: true,\r\n},\r\n  userId: { \r\n    type: Schema.Types.ObjectId, \r\n    ref: \"User\", \r\n    required: true \r\n},\r\n  rating: { \r\n    type: Number, \r\n    required: true, \r\n    min: 1, \r\n    max: 5 \r\n},\r\n  comment: { \r\n    type: String, \r\n    required: true \r\n},\r\n  isApproved: { \r\n    type: Boolean, \r\n    default: false \r\n},\r\n  isSelect: { \r\n    type: Boolean, \r\n    default: false \r\n},\r\n  createdAt: { \r\n    type: Date, \r\n    default: Date.now \r\n},\r\n});\r\n\r\n// Pre-save hook to generate reviewId\r\nReviewSchema.pre(\"save\", async function (next) {\r\n  if (!this.reviewId) {\r\n    this.reviewId = await generateCustomId(\"review\", \"RVW\");\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IReview>(\"Review\", ReviewSchema);\r\n"]}