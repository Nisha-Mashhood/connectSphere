{"version":3,"file":"group.model.js","sourceRoot":"","sources":["../../src/models/group.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAuBjE,MAAM,WAAW,GAAW,IAAI,MAAM,CACpC;IACE,OAAO,EAAC;QACJ,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACf;IACD,IAAI,EACJ;QACI,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,GAAG,EACH;QACI,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,KAAK,EACL;QACI,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC;KACb;IACD,UAAU,EACV;QACI,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;IACD,cAAc,EACd;QACE;YACE,GAAG,EACH;gBACI,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACjB;YACD,SAAS,EACT;gBACI;oBACI,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,IAAI;iBACjB;aACJ;SACF;KACF;IACD,UAAU,EACV;QACI,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE,CAAK,WAAW;KAC9B;IACD,QAAQ,EACR;QACI,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE,CAAK,WAAW;KAC9B;IACD,SAAS,EACT;QACI,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI;KACjB;IACD,OAAO,EACP;QACI,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACjB;IACD,OAAO,EACP;QACI;YACI,MAAM,EAAE;gBACJ,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;gBACpC,GAAG,EAAE,MAAM;aACd;YACD,QAAQ,EAAE;gBACN,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,IAAI,CAAC,GAAG;aACpB;SACF;KACN;IACD,SAAS,EACT;QACI,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KACpB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,oCAAoC;AACpC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAU,IAAI;IACvC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEL,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAgB,OAAO,EAAE,WAAW,CAAC,CAAC;AAElE,eAAe,KAAK,CAAC","sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\nimport { generateCustomId } from '../utils/idGenerator.utils.js';\r\n\r\nexport interface TimeSlot {\r\n  day: string;\r\n  timeSlots: string[];\r\n}\r\n\r\nexport interface GroupDocument extends Document {\r\n  groupId: string;\r\n  name: string;\r\n  bio: string;\r\n  price: number;\r\n  maxMembers: number;\r\n  isFull:boolean;\r\n  availableSlots: TimeSlot[];\r\n  profilePic: string;\r\n  coverPic: string;\r\n  startDate: Date;\r\n  adminId: mongoose.Types.ObjectId; // the user who created the group\r\n  members:{ userId: mongoose.Types.ObjectId; joinedAt: Date }[]; // Array of member IDs\r\n  createdAt: Date;\r\n}\r\n\r\nconst GroupSchema: Schema = new Schema<GroupDocument>(\r\n  {\r\n    groupId:{\r\n        type: String,\r\n        unique: true,\r\n    },\r\n    name: \r\n    { \r\n        type: String, \r\n        required: true \r\n    },\r\n    bio: \r\n    { \r\n        type: String, \r\n        required: true \r\n    },\r\n    price: \r\n    { \r\n        type: Number,\r\n        default: 0 \r\n    },\r\n    maxMembers: \r\n    { \r\n        type: Number, \r\n        required: true \r\n    },\r\n    isFull: { \r\n      type: Boolean, \r\n      default: false \r\n    },\r\n    availableSlots: \r\n    [\r\n      {\r\n        day: \r\n        { \r\n            type: String, \r\n            required: true \r\n        },\r\n        timeSlots: \r\n        [\r\n            { \r\n                type: String, \r\n                required: true \r\n            }\r\n        ],\r\n      },\r\n    ],\r\n    profilePic: \r\n    { \r\n        type: String, \r\n        default: ''     // Optional\r\n    }, \r\n    coverPic: \r\n    { \r\n        type: String, \r\n        default: ''     // Optional\r\n    }, \r\n    startDate: \r\n    { \r\n        type: Date, \r\n        required: true \r\n    },\r\n    adminId: \r\n    { \r\n        type: mongoose.Schema.Types.ObjectId, \r\n        ref: 'User', \r\n        required: true \r\n    },\r\n    members: \r\n    [\r\n        {\r\n            userId: { \r\n                type: mongoose.Schema.Types.ObjectId, \r\n                ref: 'User' \r\n            },\r\n            joinedAt: { \r\n                type: Date, \r\n                default: Date.now \r\n            },\r\n          },\r\n    ],\r\n    createdAt: \r\n    { \r\n        type: Date, \r\n        default: Date.now \r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate groupId\r\nGroupSchema.pre(\"save\", async function(next) {\r\n    if (!this.groupId) {\r\n      this.groupId = await generateCustomId(\"group\", \"GRP\");\r\n    }\r\n    next();\r\n  });\r\n\r\nconst Group = mongoose.model<GroupDocument>('Group', GroupSchema);\r\n\r\nexport default Group;\r\n\r\n"]}