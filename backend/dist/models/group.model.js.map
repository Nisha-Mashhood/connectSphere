{"version":3,"file":"group.model.js","sourceRoot":"","sources":["../../src/models/group.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,WAAW,GAAW,IAAI,MAAM,CACpC;IACE,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,GAAG,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC;KACX;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;IACD,cAAc,EAAE;QACd;YACE,GAAG,EAAE;gBACH,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACf;YACD,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,IAAI;iBACf;aACF;SACF;KACF;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE,EAAE,WAAW;KACzB;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,EAAE,EAAE,WAAW;KACzB;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP;YACE,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;gBACpC,GAAG,EAAE,MAAM;aACZ;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,IAAI,CAAC,GAAG;aAClB;SACF;KACF;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,oCAAoC;AACpC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAClB,IAAI,CAAC;YACH,IAAI,CAAC,OAAO,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC,sBAAsB,IAAI,CAAC,OAAO,aAAa,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,6BAA6B,IAAI,CAAC,OAAO,aAAa,IAAI,CAAC,IAAI,MAAM,KAAK,EAAE,CAC7E,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAgB,OAAO,EAAE,WAAW,CAAC,CAAC;AAElE,eAAe,KAAK,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { GroupDocument } from \"../Interfaces/models/GroupDocument.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst GroupSchema: Schema = new Schema<GroupDocument>(\r\n  {\r\n    groupId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    bio: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    price: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    maxMembers: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    isFull: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    availableSlots: [\r\n      {\r\n        day: {\r\n          type: String,\r\n          required: true,\r\n        },\r\n        timeSlots: [\r\n          {\r\n            type: String,\r\n            required: true,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    profilePic: {\r\n      type: String,\r\n      default: \"\", // Optional\r\n    },\r\n    coverPic: {\r\n      type: String,\r\n      default: \"\", // Optional\r\n    },\r\n    startDate: {\r\n      type: Date,\r\n      required: true,\r\n    },\r\n    adminId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    members: [\r\n      {\r\n        userId: {\r\n          type: mongoose.Schema.Types.ObjectId,\r\n          ref: \"User\",\r\n        },\r\n        joinedAt: {\r\n          type: Date,\r\n          default: Date.now,\r\n        },\r\n      },\r\n    ],\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate groupId\r\nGroupSchema.pre(\"save\", async function (next) {\r\n  if (!this.groupId) {\r\n    try {\r\n      this.groupId = await generateCustomId(\"group\", \"GRP\");\r\n      logger.debug(`Generated groupId: ${this.groupId} for name ${this.name}`);\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating groupId: ${this.groupId} for name ${this.name} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nconst Group = mongoose.model<GroupDocument>(\"Group\", GroupSchema);\r\n\r\nexport default Group;\r\n"]}