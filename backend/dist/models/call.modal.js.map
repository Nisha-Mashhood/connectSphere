{"version":3,"file":"call.modal.js","sourceRoot":"","sources":["../../src/models/call.modal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAajE,MAAM,UAAU,GAAG,IAAI,MAAM,CAAO;IAClC,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,KAAK,EAAE,IAAI;KACZ;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;QACxB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC;QACxC,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,CAAC,CAAC;AAEH,UAAU,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAEhD,mCAAmC;AACnC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,CAAO,MAAM,EAAE,UAAU,CAAC,CAAC","sourcesContent":["import { Schema, model } from \"mongoose\";\r\nimport { generateCustomId } from \"../utils/idGenerator.utils.js\";\r\n\r\nexport interface Call {\r\n  CallId: string;\r\n  _id: string;\r\n  chatKey: string; // e.g., user-user_<userConnectionId>, user-mentor_<collaborationId>\r\n  callerId: string;\r\n  recipientId: string;\r\n  type: \"audio\" | \"video\";\r\n  status: \"incoming\" | \"answered\" | \"missed\";\r\n  timestamp: Date;\r\n}\r\n\r\nconst CallSchema = new Schema<Call>({\r\n  CallId: { \r\n    type: String, \r\n    required: true \r\n  },\r\n  chatKey: { \r\n    type: String, \r\n    required: true, \r\n    index: true \r\n  },\r\n  callerId: { \r\n    type: String, \r\n    required: true \r\n  },\r\n  recipientId: { \r\n    type: String, \r\n    required: true \r\n  },\r\n  type: { \r\n    type: String, \r\n    enum: [\"audio\", \"video\"], \r\n    required: true \r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: [\"incoming\", \"answered\", \"missed\"],\r\n    required: true,\r\n  },\r\n  timestamp: { \r\n    type: Date, \r\n    default: Date.now \r\n  },\r\n});\r\n\r\nCallSchema.index({ chatKey: 1, timestamp: -1 });\r\n\r\n// Pre-save hook to generate CallId\r\nCallSchema.pre(\"save\", async function (next) {\r\n  if (!this.CallId) {\r\n    this.CallId = await generateCustomId(\"call\", \"CAL\");\r\n  }\r\n  next();\r\n});\r\n\r\nexport const CallModel = model<Call>(\"Call\", CallSchema);\r\n"]}