{"version":3,"file":"call.modal.js","sourceRoot":"","sources":["../../src/models/call.modal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,MAAM,CAAO;IACzC,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,KAAK,EAAE,IAAI;KACZ;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;QACxB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC;QACxC,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,CAAC,CAAC;AAEH,UAAU,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAEhD,mCAAmC;AACnC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,KAAK,CACV,qBAAqB,IAAI,CAAC,MAAM,iBAAiB,IAAI,CAAC,QAAQ,EAAE,CACjE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,4BAA4B,IAAI,CAAC,MAAM,iBAAiB,IAAI,CAAC,QAAQ,MAAM,KAAK,EAAE,CACnF,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,CAAO,MAAM,EAAE,UAAU,CAAC,CAAC","sourcesContent":["import { Schema, model } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { Call } from \"../Interfaces/models/Call.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nexport const CallSchema = new Schema<Call>({\r\n  CallId: {\r\n    type: String,\r\n    unique: true,\r\n  },\r\n  chatKey: {\r\n    type: String,\r\n    required: true,\r\n    index: true,\r\n  },\r\n  callerId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  recipientId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  type: {\r\n    type: String,\r\n    enum: [\"audio\", \"video\"],\r\n    required: true,\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: [\"incoming\", \"answered\", \"missed\"],\r\n    required: true,\r\n  },\r\n  timestamp: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nCallSchema.index({ chatKey: 1, timestamp: -1 });\r\n\r\n// Pre-save hook to generate CallId\r\nCallSchema.pre(\"save\", async function (next) {\r\n  if (!this.CallId) {\r\n    try {\r\n      this.CallId = await generateCustomId(\"call\", \"CAL\");\r\n      logger.debug(\r\n        `Generated CallId: ${this.CallId} for callerId ${this.callerId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating CallId: ${this.CallId} for callerId ${this.callerId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport const CallModel = model<Call>(\"Call\", CallSchema);\r\n"]}