{"version":3,"file":"task.modal.js","sourceRoot":"","sources":["../../src/models/task.modal.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose, { Schema, Model } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { ITask } from \"../Interfaces/models/ITask.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst taskSchema: Schema<ITask> = new mongoose.Schema({\r\n  taskId: {\r\n    type: String,\r\n    unique: true,\r\n  },\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  description: {\r\n    type: String,\r\n  },\r\n  image: {\r\n    type: String,\r\n  },\r\n\r\n  priority: {\r\n    type: String,\r\n    enum: [\"low\", \"medium\", \"high\"],\r\n    default: \"medium\",\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: [\"pending\", \"in-progress\", \"completed\", \"not-completed\"],\r\n    default: \"pending\",\r\n  },\r\n  startDate: {\r\n    type: Date,\r\n    required: true,\r\n  },\r\n  dueDate: {\r\n    type: Date,\r\n    required: true,\r\n  },\r\n  notificationDate: {\r\n    type: Date,\r\n  },\r\n  notificationTime: {\r\n    type: String,\r\n  },\r\n  // Contextual fields\r\n  contextType: {\r\n    type: String,\r\n    enum: [\"profile\", \"group\", \"collaboration\"],\r\n    required: true,\r\n  },\r\n  contextId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    required: true,\r\n    refPath: \"contextType\",\r\n  },\r\n  // Connections for public tasks\r\n  assignedUsers: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n    },\r\n  ],\r\n  createdBy: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: \"User\",\r\n    required: true,\r\n  },\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\ntaskSchema.pre(\"save\", async function (next) {\r\n  try {\r\n    // Generate taskId if not set\r\n    if (!this.taskId) {\r\n      this.taskId = await generateCustomId(\"task\", \"TSK\");\r\n      logger.debug(`Generated taskId: ${this.taskId} for task: ${this.name}`);\r\n    }\r\n\r\n    // Update status if past due date\r\n    if (\r\n      this.dueDate &&\r\n      new Date() > this.dueDate &&\r\n      this.status !== \"completed\"\r\n    ) {\r\n      this.status = \"not-completed\";\r\n      logger.debug(\r\n        `Updated status to not-completed for task: ${this.taskId} due to past due date: ${this.dueDate}`\r\n      );\r\n    }\r\n    next();\r\n  } catch (error) {\r\n    logger.error(\r\n      `Error in pre-save hook for task: ${this.name || \"unnamed\"}: ${error}`\r\n    );\r\n    next(error as Error);\r\n  }\r\n});\r\n\r\nexport const Task: Model<ITask> = mongoose.model<ITask>(\"Task\", taskSchema);\r\n"]}