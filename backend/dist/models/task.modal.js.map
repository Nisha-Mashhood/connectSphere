{"version":3,"file":"task.modal.js","sourceRoot":"","sources":["../../src/models/task.modal.ts"],"names":[],"mappings":"AAAA,OAAO,QAA4E,MAAM,UAAU,CAAC;AAsBpG,MAAM,UAAU,GAAkB,IAAI,QAAQ,CAAC,MAAM,CAAC;IACpD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;KACb;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;KACb;IAED,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;QAC/B,OAAO,EAAE,QAAQ;KAClB;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,eAAe,CAAC;QAC9D,OAAO,EAAE,SAAS;KACnB;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI;KACf;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,IAAI;KACX;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;QAC3B,OAAO,EAAE,SAAS;KACnB;IACD,oBAAoB;IACpB,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,eAAe,CAAC;QAC3C,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,aAAa;KACvB;IACD,+BAA+B;IAC/B,aAAa,EAAE;QACb;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,MAAM;SACZ;KACF;IACD,eAAe,EAAE;QACf;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,QAAQ;SACd;KACF;IACD,cAAc,EAAE;QACd;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,OAAO;SACb;KACF;IACD,SAAS,EAAE;QACT,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE;CAC7C,CAAC,CAAC;AAEH,yDAAyD;AACzD,UAAU,CAAC,GAAG,CAAQ,MAAM,EAAE,UAAU,IAA2C;IAC/E,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;QAC7E,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC;IAChC,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEL,MAAM,CAAC,MAAM,IAAI,GAAiB,QAAQ,CAAC,KAAK,CAAQ,MAAM,EAAE,UAAU,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document, Model, CallbackWithoutResultAndOptionalError } from \"mongoose\";\r\n\r\n\r\nexport interface ITask extends Document {\r\n    name: string;\r\n    description?: string;\r\n    image?: string;\r\n    priority: \"low\" | \"medium\" | \"high\";\r\n    status: \"pending\" | \"in-progress\" | \"completed\" | \"not-completed\";\r\n    startDate: Date;\r\n    dueDate: Date;\r\n    notificationDate?: Date;\r\n    privacy: \"private\" | \"public\";\r\n    contextType: \"profile\" | \"group\" | \"collaboration\";\r\n    contextId: mongoose.Types.ObjectId;\r\n    assignedUsers: mongoose.Types.ObjectId[];\r\n    assignedMentors: mongoose.Types.ObjectId[];\r\n    assignedGroups: mongoose.Types.ObjectId[];\r\n    createdBy: mongoose.Types.ObjectId;\r\n    createdAt: Date;\r\n  }\r\n\r\nconst taskSchema: Schema<ITask> = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  description: {\r\n    type: String,\r\n  },\r\n  image: {\r\n    type: String,\r\n  },\r\n\r\n  priority: {\r\n    type: String,\r\n    enum: [\"low\", \"medium\", \"high\"],\r\n    default: \"medium\",\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: [\"pending\", \"in-progress\", \"completed\", \"not-completed\"],\r\n    default: \"pending\",\r\n  },\r\n  startDate: {\r\n    type: Date,\r\n    required: true,\r\n  },\r\n  dueDate: {\r\n    type: Date,\r\n    required: true,\r\n  },\r\n  notificationDate: {\r\n    type: Date,\r\n  },\r\n  privacy: {\r\n    type: String,\r\n    enum: [\"private\", \"public\"],\r\n    default: \"private\",\r\n  },\r\n  // Contextual fields\r\n  contextType: {\r\n    type: String,\r\n    enum: [\"profile\", \"group\", \"collaboration\"],\r\n    required: true,\r\n  },\r\n  contextId: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    required: true,\r\n    refPath: \"contextType\",\r\n  },\r\n  // Connections for public tasks\r\n  assignedUsers: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n    },\r\n  ],\r\n  assignedMentors: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Mentor\",\r\n    },\r\n  ],\r\n  assignedGroups: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Group\",\r\n    },\r\n  ],\r\n  createdBy: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: \"User\",\r\n    required: true,\r\n  },\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\n// Automatically mark as \"not-completed\" if past due date\r\ntaskSchema.pre<ITask>(\"save\", function (next: CallbackWithoutResultAndOptionalError) {\r\n    if (this.dueDate && new Date() > this.dueDate && this.status !== \"completed\") {\r\n      this.status = \"not-completed\";\r\n    }\r\n    next();\r\n  });\r\n\r\nexport const Task: Model<ITask> = mongoose.model<ITask>(\"Task\", taskSchema);\r\n"]}