{"version":3,"file":"chat.model.js","sourceRoot":"","sources":["../../src/models/chat.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AAoBtD,MAAM,UAAU,GAAyB,IAAI,QAAQ,CAAC,MAAM,CAC1D;IACE,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;KACb;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,eAAe;QACpB,OAAO,EAAE,IAAI;KACd;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,gBAAgB;QACrB,OAAO,EAAE,IAAI;KACd;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,OAAO;QACZ,OAAO,EAAE,IAAI;KACd;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC;QACxC,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,MAAM;KAChB;IACD,YAAY,EAAE;QACZ,IAAI,EAAE;YACJ,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SAC3B;QACD,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;IACD,MAAM,EAAC;QACL,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAE,SAAS,EAAG,MAAM,EAAG,MAAM,CAAE;QACrC,OAAO,EAAE,SAAS;KACnB;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,eAAe,QAAQ,CAAC,KAAK,CAAe,aAAa,EAAE,UAAU,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IChatMessage extends Document {\r\n  senderId: mongoose.Types.ObjectId;\r\n  content: string;\r\n  thumbnailUrl?: string;\r\n  collaborationId?: mongoose.Types.ObjectId; // For user-mentor chats\r\n  userConnectionId?: mongoose.Types.ObjectId; // For user-user chats\r\n  groupId?: mongoose.Types.ObjectId; // For group chats\r\n  contentType: \"text\" | \"image\" | \"video\" | \"file\";\r\n  fileMetadata?: {\r\n    fileName: string;\r\n    fileSize: number;\r\n    mimeType: string;\r\n  };\r\n  isRead: boolean;\r\n  status: \"pending\" | \"sent\" | \"read\" ;\r\n  timestamp: Date;\r\n}\r\n\r\nconst chatSchema: Schema<IChatMessage> = new mongoose.Schema(\r\n  {\r\n    senderId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    content: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    thumbnailUrl: { \r\n      type: String \r\n    },\r\n    collaborationId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Collaboration\",\r\n      default: null,\r\n    },\r\n    userConnectionId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"UserConnection\",\r\n      default: null,\r\n    },\r\n    groupId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Group\",\r\n      default: null,\r\n    },\r\n    contentType: {\r\n      type: String,\r\n      enum: [\"text\", \"image\", \"video\", \"file\"],\r\n      required: true,\r\n      default: \"text\",\r\n    },\r\n    fileMetadata: {\r\n      type: {\r\n        fileName: { type: String },\r\n        fileSize: { type: Number },\r\n        mimeType: { type: String },\r\n      },\r\n      required: false,\r\n    },\r\n    isRead: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    status:{\r\n      type: String,\r\n      enum: [ \"pending\" , \"sent\" , \"read\" ],\r\n      default: \"pending\",\r\n    },\r\n    timestamp: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport default mongoose.model<IChatMessage>(\"ChatMessage\", chatSchema);\r\n"]}