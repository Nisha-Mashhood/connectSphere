{"version":3,"file":"chat.model.js","sourceRoot":"","sources":["../../src/models/chat.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,UAAU,GAAyB,IAAI,QAAQ,CAAC,MAAM,CAC1D;IACE,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;KACb;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,eAAe;QACpB,OAAO,EAAE,IAAI;KACd;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,gBAAgB;QACrB,OAAO,EAAE,IAAI;KACd;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,OAAO;QACZ,OAAO,EAAE,IAAI;KACd;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC;QACxC,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,MAAM;KAChB;IACD,YAAY,EAAE;QACZ,IAAI,EAAE;YACJ,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SAC3B;QACD,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC;QACjC,OAAO,EAAE,SAAS;KACnB;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,mCAAmC;AACnC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,GAAG,MAAM,gBAAgB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CACV,qBAAqB,IAAI,CAAC,MAAM,iBAAiB,IAAI,CAAC,QAAQ,EAAE,CACjE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,4BAA4B,IAAI,CAAC,MAAM,iBAAiB,IAAI,CAAC,QAAQ,MAAM,KAAK,EAAE,CACnF,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAAe,aAAa,EAAE,UAAU,CAAC,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { IChatMessage } from \"../Interfaces/models/IChatMessage.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst chatSchema: Schema<IChatMessage> = new mongoose.Schema(\r\n  {\r\n    ChatId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    senderId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    content: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    thumbnailUrl: {\r\n      type: String,\r\n    },\r\n    collaborationId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Collaboration\",\r\n      default: null,\r\n    },\r\n    userConnectionId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"UserConnection\",\r\n      default: null,\r\n    },\r\n    groupId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Group\",\r\n      default: null,\r\n    },\r\n    contentType: {\r\n      type: String,\r\n      enum: [\"text\", \"image\", \"video\", \"file\"],\r\n      required: true,\r\n      default: \"text\",\r\n    },\r\n    fileMetadata: {\r\n      type: {\r\n        fileName: { type: String },\r\n        fileSize: { type: Number },\r\n        mimeType: { type: String },\r\n      },\r\n      required: false,\r\n    },\r\n    isRead: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"pending\", \"sent\", \"read\"],\r\n      default: \"pending\",\r\n    },\r\n    timestamp: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate ChatId\r\nchatSchema.pre(\"save\", async function (next) {\r\n  if (!this.ChatId) {\r\n    try {\r\n      this.ChatId = await generateCustomId(\"chatMessage\", \"CMG\");\r\n      logger.debug(\r\n        `Generated ChatId: ${this.ChatId} for senderId ${this.senderId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating ChatId: ${this.ChatId} for senderId ${this.senderId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IChatMessage>(\"ChatMessage\", chatSchema);\r\n"]}