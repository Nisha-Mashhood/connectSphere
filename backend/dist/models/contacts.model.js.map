{"version":3,"file":"contacts.model.js","sourceRoot":"","sources":["../../src/models/contacts.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,aAAa,GAAqB,IAAI,QAAQ,CAAC,MAAM,CACzD;IACE,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;KACZ,EAAE,2BAA2B;IAC9B,eAAe,EAAE;QACf,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,eAAe;KACrB;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,gBAAgB;KACtB;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,OAAO;KACb;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC;QAC3C,QAAQ,EAAE,IAAI;KACf;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,sCAAsC;AACtC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAC5C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACpB,IAAI,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,CAAC,KAAK,CACV,wBAAwB,IAAI,CAAC,SAAS,eAAe,IAAI,CAAC,MAAM,EAAE,CACnE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,+BAA+B,IAAI,CAAC,SAAS,eAAe,IAAI,CAAC,MAAM,MAAM,KAAK,EAAE,CACrF,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,uDAAuD;AACvD,aAAa,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,WAAW,IAAI,EAAE,IAAI;IACxD,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YACnB,GAAG,CAAC,SAAS,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAAW,SAAS,EAAE,aAAa,CAAC,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { IContact } from \"../Interfaces/models/IContact.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst contactSchema: Schema<IContact> = new mongoose.Schema(\r\n  {\r\n    contactId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    targetUserId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n    }, // Optional: mentor or user\r\n    collaborationId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Collaboration\",\r\n    },\r\n    userConnectionId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"UserConnection\",\r\n    },\r\n    groupId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Group\",\r\n    },\r\n    type: {\r\n      type: String,\r\n      enum: [\"user-mentor\", \"user-user\", \"group\"],\r\n      required: true,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate contactId\r\ncontactSchema.pre(\"save\", async function (next) {\r\n  if (!this.contactId) {\r\n    try {\r\n      this.contactId = await generateCustomId(\"contact\", \"CNT\");\r\n      logger.debug(\r\n        `Generated contactId: ${this.contactId} for userId ${this.userId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating contactId: ${this.contactId} for userId ${this.userId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\n// contactId is set for bulk operations like insertMany\r\ncontactSchema.pre(\"insertMany\", async function (next, docs) {\r\n  for (const doc of docs) {\r\n    if (!doc.contactId) {\r\n      doc.contactId = await generateCustomId(\"contact\", \"CNT\");\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IContact>(\"Contact\", contactSchema);\r\n"]}