{"version":3,"file":"contacts.model.js","sourceRoot":"","sources":["../../src/models/contacts.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAejE,MAAM,aAAa,GAAqB,IAAI,QAAQ,CAAC,MAAM,CACzD;IACE,SAAS,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACjB;IACD,YAAY,EAAE;QACV,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;KACd,EAAE,2BAA2B;IAC9B,eAAe,EAAE;QACb,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,eAAe;KACvB;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,gBAAgB;KACxB;IACD,OAAO,EAAE;QACL,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,OAAO;KACf;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC;QAC3C,QAAQ,EAAE,IAAI;KACf;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,sCAAsC;AACtC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAC5C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,8DAA8D;AAC9D,aAAa,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,WAAW,IAAI,EAAE,IAAI;IACxD,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YACnB,GAAG,CAAC,SAAS,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAGH,eAAe,QAAQ,CAAC,KAAK,CAAW,SAAS,EAAE,aAAa,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\";\r\nimport { generateCustomId } from \"../utils/idGenerator.utils.js\";\r\n\r\nexport interface IContact extends Document {\r\n  _id: mongoose.Types.ObjectId; \r\n  contactId: string; \r\n  userId: string | mongoose.Types.ObjectId; \r\n  targetUserId?: string | mongoose.Types.ObjectId; \r\n  collaborationId?: string | mongoose.Types.ObjectId; \r\n  userConnectionId?: string | mongoose.Types.ObjectId; \r\n  groupId?: string | mongoose.Types.ObjectId; \r\n  type: \"user-mentor\" | \"user-user\" | \"group\"; \r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst contactSchema: Schema<IContact> = new mongoose.Schema(\r\n  {\r\n    contactId: { \r\n        type: String, \r\n        unique: true, \r\n    }, \r\n    userId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"User\", \r\n        required: true \r\n    },\r\n    targetUserId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"User\" \r\n    }, // Optional: mentor or user\r\n    collaborationId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"Collaboration\" \r\n    },\r\n    userConnectionId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"UserConnection\" \r\n    },\r\n    groupId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"Group\" \r\n    },\r\n    type: {\r\n      type: String,\r\n      enum: [\"user-mentor\", \"user-user\", \"group\"],\r\n      required: true,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate contactId\r\ncontactSchema.pre(\"save\", async function (next) {\r\n  if (!this.contactId) {\r\n    this.contactId = await generateCustomId(\"contact\", \"CNT\");\r\n  }\r\n  next();\r\n});\r\n\r\n// Ensure contactId is set for bulk operations like insertMany\r\ncontactSchema.pre(\"insertMany\", async function (next, docs) {\r\n  for (const doc of docs) {\r\n    if (!doc.contactId) {\r\n      doc.contactId = await generateCustomId(\"contact\", \"CNT\");\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\n\r\nexport default mongoose.model<IContact>(\"Contact\", contactSchema);\r\n"]}