{"version":3,"file":"groupRequest.model.js","sourceRoot":"","sources":["../../src/models/groupRequest.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,kBAAkB,GAAW,IAAI,MAAM,CAC3C;IACE,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,OAAO;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;QACzC,OAAO,EAAE,SAAS;KACnB;IACD,aAAa,EAAE;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,CAAC;QACxC,OAAO,EAAE,SAAS;KACnB;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI,EAAE,mDAAmD;KACnE;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC,EAAE,uCAAuC;KACpD;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,2CAA2C;AAC3C,kBAAkB,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IACjD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACzB,IAAI,CAAC;YACH,IAAI,CAAC,cAAc,GAAG,MAAM,gBAAgB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YACpE,MAAM,CAAC,KAAK,CACV,6BAA6B,IAAI,CAAC,cAAc,gBAAgB,IAAI,CAAC,OAAO,EAAE,CAC/E,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,oCAAoC,IAAI,CAAC,cAAc,gBAAgB,IAAI,CAAC,OAAO,MAAM,KAAK,EAAE,CACjG,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CACjC,cAAc,EACd,kBAAkB,CACnB,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { GroupRequestDocument } from \"../Interfaces/models/GroupRequestDocument.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst GroupRequestSchema: Schema = new Schema<GroupRequestDocument>(\r\n  {\r\n    groupRequestId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    groupId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Group\",\r\n      required: true,\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"Pending\", \"Accepted\", \"Rejected\"],\r\n      default: \"Pending\",\r\n    },\r\n    paymentStatus: {\r\n      type: String,\r\n      enum: [\"Pending\", \"Completed\", \"Failed\"],\r\n      default: \"Pending\",\r\n    },\r\n    paymentId: {\r\n      type: String,\r\n      default: null, // Optional: can be filled after successful payment\r\n    },\r\n    amountPaid: {\r\n      type: Number,\r\n      default: 0, // Default 0 for groups without payment\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate groupRequestId\r\nGroupRequestSchema.pre(\"save\", async function (next) {\r\n  if (!this.groupRequestId) {\r\n    try {\r\n      this.groupRequestId = await generateCustomId(\"groupRequest\", \"GRQ\");\r\n      logger.debug(\r\n        `Generated groupRequestId: ${this.groupRequestId} for groupId ${this.groupId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating groupRequestId: ${this.groupRequestId} for groupId ${this.groupId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nconst GroupRequest = mongoose.model<GroupRequestDocument>(\r\n  \"GroupRequest\",\r\n  GroupRequestSchema\r\n);\r\n\r\nexport default GroupRequest;\r\n"]}