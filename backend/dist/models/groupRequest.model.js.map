{"version":3,"file":"groupRequest.model.js","sourceRoot":"","sources":["../../src/models/groupRequest.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AAYtD,MAAM,kBAAkB,GAAW,IAAI,MAAM,CAC3C;IACE,OAAO,EACP;QACI,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,OAAO;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,MAAM,EACN;QACI,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACjB;IACD,MAAM,EACN;QACI,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;QACzC,OAAO,EAAE,SAAS;KACrB;IACD,aAAa,EACb;QACI,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,CAAC;QACxC,OAAO,EAAE,SAAS;KACrB;IACD,SAAS,EACT;QACI,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI,CAAG,mDAAmD;KACtE;IACD,UAAU,EACV;QACI,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC,CAAE,uCAAuC;KACtD;IACD,SAAS,EACT;QACI,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KACpB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAuB,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAE9F,eAAe,YAAY,CAAC","sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface GroupRequestDocument extends Document {\r\n  groupId: mongoose.Types.ObjectId; //  the group\r\n  userId: mongoose.Types.ObjectId; //  the user who sent the request\r\n  status: 'Pending' | 'Approved' | 'Rejected'; // Request status\r\n  paymentStatus: 'Pending' | 'Completed' | 'Failed'; // Payment status\r\n  paymentId?: string; // Optional \r\n  amountPaid?: number; // Amount paid by the user\r\n  createdAt: Date;\r\n}\r\n\r\nconst GroupRequestSchema: Schema = new Schema<GroupRequestDocument>(\r\n  {\r\n    groupId: \r\n    { \r\n        type: mongoose.Schema.Types.ObjectId, \r\n        ref: 'Group', \r\n        required: true \r\n    },\r\n    userId: \r\n    { \r\n        type: mongoose.Schema.Types.ObjectId, \r\n        ref: 'User', \r\n        required: true \r\n    },\r\n    status: \r\n    { \r\n        type: String, \r\n        enum: ['Pending', 'Approved', 'Rejected'], \r\n        default: 'Pending' \r\n    },\r\n    paymentStatus: \r\n    { \r\n        type: String, \r\n        enum: ['Pending', 'Completed', 'Failed'], \r\n        default: 'Pending' \r\n    },\r\n    paymentId: \r\n    { \r\n        type: String, \r\n        default: null   // Optional: can be filled after successful payment\r\n    }, \r\n    amountPaid: \r\n    { \r\n        type: Number, \r\n        default: 0  // Default 0 for groups without payment\r\n    }, \r\n    createdAt: \r\n    { \r\n        type: Date, \r\n        default: Date.now \r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nconst GroupRequest = mongoose.model<GroupRequestDocument>('GroupRequest', GroupRequestSchema);\r\n\r\nexport default GroupRequest;\r\n\r\n\r\n"]}