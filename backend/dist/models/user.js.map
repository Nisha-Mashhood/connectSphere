{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/models/user.ts"],"names":[],"mappings":"AAAA,OAAO,QAAqC,MAAM,UAAU,CAAC;AAsB7D,MAAM,UAAU,GAA0B,IAAI,QAAQ,CAAC,MAAM,CAC3D;IACE,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,KAAK,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;KACf;IACD,KAAK,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,WAAW,EAAE;QACT,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI;KACjB;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAC,IAAI;QACZ,MAAM,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAC,IAAI;KACf;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAC,IAAI;KACf;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAC,IAAI;KACf;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,MAAM;QACZ,OAAO,EAAC,IAAI;KACf;IACD,IAAI,EAAE;QACF,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;QACxB,OAAO,EAAC,IAAI;KACf;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACjB;IACD,UAAU,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,iFAAiF;KAC7F;IACD,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,+DAA+D;KAC3E;IACD,WAAW,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,OAAO,EAAC,IAAI;KACf;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,MAAM,IAAI,GAAyB,QAAQ,CAAC,KAAK,CAAgB,MAAM,EAAC,UAAU,CAAC,CAAC;AAEpF,eAAe,IAAI,CAAC","sourcesContent":["import mongoose, { Schema, Document, Model } from \"mongoose\";\r\n\r\nexport interface UserInterface extends Document {\r\n  fullName: string;\r\n  email: string;\r\n  phone: string;\r\n  dateOfBirth: Date;\r\n  username?: string;\r\n  password?: string;\r\n  jobTitle?: string;\r\n  industry?: string;\r\n  reasonForJoining?: string;\r\n  role?: \"user\" | \"mentor\";\r\n  isMentorApproved?: boolean;\r\n  profilePic?: string;\r\n  coverPic?: string;\r\n  certificate?: string; // For mentors, store certificate file path\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  _id: mongoose.Types.ObjectId;\r\n}\r\n\r\nconst userSchema: Schema<UserInterface> = new mongoose.Schema(\r\n  {\r\n    fullName: { \r\n        type: String, \r\n        required: true \r\n    },\r\n    email: { \r\n        type: String, \r\n        required: true, \r\n        unique: true \r\n    },\r\n    phone: { \r\n        type: String, \r\n        required: true \r\n    },\r\n    dateOfBirth: { \r\n        type: Date, \r\n        required: true \r\n    },\r\n    username: { \r\n        type: String, \r\n        default:null, \r\n        unique: true \r\n    },\r\n    password: { \r\n        type: String,\r\n        default:null, \r\n    },\r\n    jobTitle: { \r\n        type: String,\r\n        default:null\r\n    },\r\n    industry: { \r\n        type: String,\r\n        default:null\r\n    },\r\n    reasonForJoining: { \r\n        type: String,\r\n        default:null \r\n    },\r\n    role: { \r\n        type: String, \r\n        enum: [\"user\", \"mentor\"], \r\n        default:null \r\n    },\r\n    isMentorApproved: { \r\n        type: Boolean, \r\n        default: false \r\n    },\r\n    profilePic: { \r\n        type: String,\r\n        default: \"https://www.pngarts.com/files/10/Default-Profile-Picture-PNG-Download-Image.png\"\r\n    },\r\n    coverPic: { \r\n        type: String,\r\n        default: \"https://tokystorage.s3.amazonaws.com/images/default-cover.png\"\r\n    },\r\n    certificate: { \r\n        type: String,\r\n        default:null \r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nconst User: Model<UserInterface> = mongoose.model<UserInterface>(\"User\",userSchema);\r\n\r\nexport default User;\r\n"]}