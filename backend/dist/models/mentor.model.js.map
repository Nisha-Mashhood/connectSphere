{"version":3,"file":"mentor.model.js","sourceRoot":"","sources":["../../src/models/mentor.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,YAAY,GAAW,IAAI,MAAM,CACrC;IACE,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC;QAC7C,OAAO,EAAE,YAAY;KACtB;IACD,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI;KACd;IACD,MAAM,EAAE;QACN;YACE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;YAC3B,GAAG,EAAE,OAAO;SACb;KACF;IACD,cAAc,EAAE;QACd;YACE,IAAI,EAAE,MAAM;SACb;KACF;IACD,cAAc,EAAE;QACd,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI;KACd;IACD,GAAG,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,cAAc,EAAE;QACd;YACE,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YACrB,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;SAC9B;KACF;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,EAAE;KACZ;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,qCAAqC;AACrC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACnB,IAAI,CAAC;YACH,IAAI,CAAC,QAAQ,GAAG,MAAM,gBAAgB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,CAAC,KAAK,CACV,uBAAuB,IAAI,CAAC,QAAQ,eAAe,IAAI,CAAC,MAAM,EAAE,CACjE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,8BAA8B,IAAI,CAAC,QAAQ,eAAe,IAAI,CAAC,MAAM,MAAM,KAAK,EAAE,CACnF,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAAU,QAAQ,EAAE,YAAY,CAAC,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { IMentor } from \"../Interfaces/models/IMentor.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst MentorSchema: Schema = new Schema(\r\n  {\r\n    mentorId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    isApproved: {\r\n      type: String,\r\n      enum: [\"Processing\", \"Completed\", \"Rejected\"],\r\n      default: \"Processing\",\r\n    },\r\n    rejectionReason: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n    skills: [\r\n      {\r\n        type: Schema.Types.ObjectId,\r\n        ref: \"Skill\",\r\n      },\r\n    ],\r\n    certifications: [\r\n      {\r\n        type: String,\r\n      },\r\n    ],\r\n    specialization: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n    bio: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    price: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    availableSlots: [\r\n      {\r\n        day: { type: String },\r\n        timeSlots: [{ type: String }],\r\n      },\r\n    ],\r\n    timePeriod: {\r\n      type: Number,\r\n      required: true,\r\n      default: 30,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate mentorId\r\nMentorSchema.pre(\"save\", async function (next) {\r\n  if (!this.mentorId) {\r\n    try {\r\n      this.mentorId = await generateCustomId(\"groupRequest\", \"MTR\");\r\n      logger.debug(\r\n        `Generated mentorId: ${this.mentorId} for userId ${this.userId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating mentorId: ${this.mentorId} for userId ${this.userId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IMentor>(\"Mentor\", MentorSchema);\r\n"]}