{"version":3,"file":"messages.model.js","sourceRoot":"","sources":["../../src/models/messages.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,aAAa,GAAqB,IAAI,QAAQ,CAAC,MAAM,CACzD;IACE,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,SAAS;QACd,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;QAC/B,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,MAAM;KAChB;IACD,YAAY,EAAE;QACZ,IAAI,EAAE;YACJ,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SAC3B;QACD,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACf;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,sCAAsC;AACtC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAC5C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACpB,IAAI,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,CAAC,KAAK,CACV,wBAAwB,IAAI,CAAC,SAAS,iBAAiB,IAAI,CAAC,QAAQ,EAAE,CACvE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,+BAA+B,IAAI,CAAC,SAAS,iBAAiB,IAAI,CAAC,QAAQ,MAAM,KAAK,EAAE,CACzF,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAAW,SAAS,EAAE,aAAa,CAAC,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { IMessage } from \"../Interfaces/models/IMessage.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst messageSchema: Schema<IMessage> = new mongoose.Schema(\r\n  {\r\n    messageId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    senderId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    contactId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Contact\",\r\n      required: true,\r\n    },\r\n    content: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    contentType: {\r\n      type: String,\r\n      enum: [\"text\", \"image\", \"file\"],\r\n      required: true,\r\n      default: \"text\",\r\n    },\r\n    fileMetadata: {\r\n      type: {\r\n        fileName: { type: String },\r\n        fileSize: { type: Number },\r\n        mimeType: { type: String },\r\n      },\r\n      required: false,\r\n    },\r\n    isRead: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate messageId\r\nmessageSchema.pre(\"save\", async function (next) {\r\n  if (!this.messageId) {\r\n    try {\r\n      this.messageId = await generateCustomId(\"message\", \"MSG\");\r\n      logger.debug(\r\n        `Generated messageId: ${this.messageId} for senderId ${this.senderId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating messageId: ${this.messageId} for senderId ${this.senderId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IMessage>(\"Message\", messageSchema);\r\n"]}