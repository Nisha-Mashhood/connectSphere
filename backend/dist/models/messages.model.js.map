{"version":3,"file":"messages.model.js","sourceRoot":"","sources":["../../src/models/messages.model.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAmBjE,MAAM,aAAa,GAAqB,IAAI,QAAQ,CAAC,MAAM,CACzD;IACE,SAAS,EAAE;QACP,IAAI,EAAE,MAAM;QACX,MAAM,EAAE,IAAI;KACZ;IACL,QAAQ,EAAE;QACN,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACb;IACL,SAAS,EAAE;QACP,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,SAAS;QACd,QAAQ,EAAE,IAAI;KACjB;IACD,OAAO,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACjB;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;QAC/B,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,MAAM;KAChB;IACD,YAAY,EAAE;QACZ,IAAI,EAAE;YACJ,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;YAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SAC3B;QACD,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACJ,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,KAAK;KACjB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,sCAAsC;AACtC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAU,IAAI;IAC3C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAAW,SAAS,EAAE,aAAa,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\";\r\nimport { generateCustomId } from '../utils/idGenerator.utils.js';\r\n\r\nexport interface IMessage extends Document {\r\n  _id: mongoose.Types.ObjectId;  \r\n  messageId: string; \r\n  senderId: mongoose.Types.ObjectId;  \r\n  contactId: mongoose.Types.ObjectId;  \r\n  content: string; \r\n  contentType: \"text\" | \"image\" | \"file\";  \r\n  fileMetadata?: {\r\n    fileName: string;\r\n    fileSize: number;  \r\n    mimeType: string;  \r\n  };\r\n  isRead: boolean;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst messageSchema: Schema<IMessage> = new mongoose.Schema(\r\n  {\r\n    messageId: { \r\n        type: String,\r\n         unique: true, \r\n        },  \r\n    senderId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"User\",\r\n        required: true \r\n        },\r\n    contactId: { \r\n        type: Schema.Types.ObjectId, \r\n        ref: \"Contact\", \r\n        required: true \r\n    },\r\n    content: { \r\n        type: String, \r\n        required: true \r\n    },  \r\n    contentType: {\r\n      type: String,\r\n      enum: [\"text\", \"image\", \"file\"],\r\n      required: true,\r\n      default: \"text\",\r\n    },\r\n    fileMetadata: {\r\n      type: {\r\n        fileName: { type: String },\r\n        fileSize: { type: Number },\r\n        mimeType: { type: String },\r\n      },\r\n      required: false,\r\n    },\r\n    isRead: { \r\n        type: Boolean, \r\n        default: false \r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate messageId\r\nmessageSchema.pre(\"save\", async function(next) {\r\n  if (!this.messageId) {\r\n    this.messageId = await generateCustomId(\"message\", \"MSG\");\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IMessage>(\"Message\", messageSchema);"]}