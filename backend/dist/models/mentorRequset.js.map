{"version":3,"file":"mentorRequset.js","sourceRoot":"","sources":["../../src/models/mentorRequset.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAY,MAAM,UAAU,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAejE,MAAM,mBAAmB,GAAW,IAAI,MAAM,CAC5C;IACE,eAAe,EAAC;QACd,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,QAAQ;QACb,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,YAAY,EAAC;QACP,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;QACrB,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;KAC5B;IACL,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAC,IAAI;QACb,OAAO,EAAC,EAAE;KACX;IACD,aAAa,EAAE;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;QACnC,OAAO,EAAE,SAAS;KACnB;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAC,CAAC,SAAS,EAAC,UAAU,EAAE,UAAU,CAAC;QACvC,OAAO,EAAC,SAAS;KAClB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,4CAA4C;AAC5C,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAU,IAAI;IAC/C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC1B,IAAI,CAAC,eAAe,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACxE,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAGL,eAAe,QAAQ,CAAC,KAAK,CAAiB,eAAe,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document } from \"mongoose\";\r\nimport { generateCustomId } from '../utils/idGenerator.utils.js';\r\n\r\nexport interface IMentorRequest extends Document {\r\n  mentorRequestId: string;\r\n  mentorId: string; \r\n  userId: string; \r\n  selectedSlot: object;\r\n  price: number;\r\n  timePeriod:number;\r\n  paymentStatus: \"Pending\" | \"Paid\" | \"Failed\";\r\n  isAccepted: String;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst MentorRequestSchema: Schema = new Schema(\r\n  {\r\n    mentorRequestId:{\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    mentorId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"Mentor\", \r\n      required: true \r\n    },\r\n    userId: { \r\n      type: Schema.Types.ObjectId, \r\n      ref: \"User\", \r\n      required: true \r\n    },\r\n    selectedSlot:{\r\n          day: { type: String },\r\n          timeSlots: { type: String },\r\n        },\r\n    price: { \r\n      type: Number, \r\n      required: true \r\n    },\r\n    timePeriod: {\r\n      type: Number,\r\n      required:true,\r\n      default:30\r\n    },\r\n    paymentStatus: { \r\n      type: String, \r\n      enum: [\"Pending\", \"Paid\", \"Failed\"], \r\n      default: \"Pending\" \r\n    },\r\n    isAccepted: { \r\n      type: String, \r\n      enum:[\"Pending\",\"Accepted\", \"Rejected\"] ,\r\n      default:\"Pending\"\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate mentorRequestId\r\nMentorRequestSchema.pre(\"save\", async function(next) {\r\n    if (!this.mentorRequestId) {\r\n      this.mentorRequestId = await generateCustomId(\"mentorRequest\", \"MRQ\");\r\n    }\r\n    next();\r\n  });\r\n\r\n\r\nexport default mongoose.model<IMentorRequest>(\"MentorRequest\", MentorRequestSchema);\r\n"]}