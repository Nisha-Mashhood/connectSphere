{"version":3,"file":"mentorRequset.js","sourceRoot":"","sources":["../../src/models/mentorRequset.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,mBAAmB,GAA2B,IAAI,MAAM,CAC5D;IACE,eAAe,EAAE;QACf,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,QAAQ;QACb,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,YAAY,EAAE;QACZ,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;QACrB,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;KAC5B;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,EAAE;KACZ;IACD,aAAa,EAAE;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;QACnC,OAAO,EAAE,SAAS;KACnB;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;QACzC,OAAO,EAAE,SAAS;KACnB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,4CAA4C;AAC5C,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IAClD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC1B,IAAI,CAAC;YACH,IAAI,CAAC,eAAe,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACtE,MAAM,CAAC,KAAK,CACV,8BAA8B,IAAI,CAAC,eAAe,iBAAiB,IAAI,CAAC,QAAQ,EAAE,CACnF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,qCAAqC,IAAI,CAAC,eAAe,iBAAiB,IAAI,CAAC,QAAQ,MAAM,KAAK,EAAE,CACrG,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAC3B,eAAe,EACf,mBAAmB,CACpB,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { IMentorRequest } from \"src/Interfaces/models/IMentorRequest.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst MentorRequestSchema: Schema<IMentorRequest> = new Schema(\r\n  {\r\n    mentorRequestId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    mentorId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Mentor\",\r\n      required: true,\r\n    },\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    selectedSlot: {\r\n      day: { type: String },\r\n      timeSlots: { type: String },\r\n    },\r\n    price: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    timePeriod: {\r\n      type: Number,\r\n      required: true,\r\n      default: 30,\r\n    },\r\n    paymentStatus: {\r\n      type: String,\r\n      enum: [\"Pending\", \"Paid\", \"Failed\"],\r\n      default: \"Pending\",\r\n    },\r\n    isAccepted: {\r\n      type: String,\r\n      enum: [\"Pending\", \"Accepted\", \"Rejected\"],\r\n      default: \"Pending\",\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate mentorRequestId\r\nMentorRequestSchema.pre(\"save\", async function (next) {\r\n  if (!this.mentorRequestId) {\r\n    try {\r\n      this.mentorRequestId = await generateCustomId(\"mentorRequest\", \"MRQ\");\r\n      logger.debug(\r\n        `Generated mentorRequestId: ${this.mentorRequestId} for mentorId ${this.mentorId}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating mentorRequestId: ${this.mentorRequestId} for mentorId ${this.mentorId} : ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IMentorRequest>(\r\n  \"MentorRequest\",\r\n  MentorRequestSchema\r\n);\r\n"]}