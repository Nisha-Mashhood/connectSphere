{"version":3,"file":"userConnection.modal.js","sourceRoot":"","sources":["../../src/models/userConnection.modal.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,oBAAoB,GAAW,IAAI,MAAM,CAC7C;IACE,YAAY,EAAE;QACZ,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;KACb;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,GAAG,EAAE,MAAM;QACX,QAAQ,EAAE,IAAI;KACf;IACD,aAAa,EAAE;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;QACzC,OAAO,EAAE,SAAS;KACnB;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,WAAW,EAAE,cAAc,CAAC;QACnC,OAAO,EAAE,cAAc;KACxB;IACD,aAAa,EAAE;QACb,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;IACD,iBAAiB,EAAE;QACjB,IAAI,EAAE,IAAI;KACX;IACD,cAAc,EAAE;QACd,IAAI,EAAE,IAAI;KACX;IACD,mBAAmB,EAAE;QACnB,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI;KACd;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,yCAAyC;AACzC,oBAAoB,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,WAAW,IAAI;IACnD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QACvB,IAAI,CAAC;YACH,IAAI,CAAC,YAAY,GAAG,MAAM,gBAAgB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;YACpE,MAAM,CAAC,KAAK,CACV,2BAA2B,IAAI,CAAC,YAAY,kBAAkB,IAAI,CAAC,SAAS,mBAAmB,IAAI,CAAC,SAAS,EAAE,CAChH,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CACV,gDAAgD,IAAI,CAAC,SAAS,mBAAmB,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAC5G,CAAC;YACF,OAAO,IAAI,CAAC,KAAc,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,eAAe,QAAQ,CAAC,KAAK,CAC3B,gBAAgB,EAChB,oBAAoB,CACrB,CAAC","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport { generateCustomId } from \"../core/Utils/IdGenerator.js\";\r\nimport { IUserConnection } from \"../Interfaces/models/IUserConnection.js\";\r\nimport logger from \"../core/Utils/Logger.js\";\r\n\r\nconst UserConnectionSchema: Schema = new Schema(\r\n  {\r\n    connectionId: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    requester: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    recipient: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"User\",\r\n      required: true,\r\n    },\r\n    requestStatus: {\r\n      type: String,\r\n      enum: [\"Pending\", \"Accepted\", \"Rejected\"],\r\n      default: \"Pending\",\r\n    },\r\n    connectionStatus: {\r\n      type: String,\r\n      enum: [\"Connected\", \"Disconnected\"],\r\n      default: \"Disconnected\",\r\n    },\r\n    requestSentAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n    requestAcceptedAt: {\r\n      type: Date,\r\n    },\r\n    disconnectedAt: {\r\n      type: Date,\r\n    },\r\n    disconnectionReason: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Pre-save hook to generate connectionId\r\nUserConnectionSchema.pre(\"save\", async function (next) {\r\n  if (!this.connectionId) {\r\n    try {\r\n      this.connectionId = await generateCustomId(\"userConnection\", \"UCN\");\r\n      logger.debug(\r\n        `Generated connectionId: ${this.connectionId} for requester ${this.requester} and recipient: ${this.recipient}`\r\n      );\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error generating connectionId for requester: ${this.requester} and recipient: ${this.recipient}: ${error}`\r\n      );\r\n      return next(error as Error);\r\n    }\r\n  }\r\n  next();\r\n});\r\n\r\nexport default mongoose.model<IUserConnection>(\r\n  \"UserConnection\",\r\n  UserConnectionSchema\r\n);\r\n"]}