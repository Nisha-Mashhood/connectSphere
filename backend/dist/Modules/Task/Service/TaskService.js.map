{"version":3,"file":"TaskService.js","sourceRoot":"","sources":["../../../../src/Modules/Task/Service/TaskService.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseService } from '../../../core/Services/BaseService.js';\r\nimport { ServiceError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { TaskRepository } from '../Repositry/TaskRepositry.js';\r\nimport { NotificationRepository } from '../../Notification/Repositry/NotificationRepositry.js';\r\nimport { ITask } from '../../../Interfaces/models/ITask.js';\r\nimport { uploadMedia } from '../../../core/Utils/Cloudinary.js';\r\n\r\nexport class TaskService extends BaseService {\r\n  private taskRepo: TaskRepository;\r\n  private notificationRepo: NotificationRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.taskRepo = new TaskRepository();\r\n    this.notificationRepo = new NotificationRepository();\r\n  }\r\n\r\n   createTask = async(taskData: Partial<ITask>, imagePath?: string, fileSize?: number): Promise<ITask> =>{\r\n    try {\r\n      logger.debug(`Creating task: ${taskData.name}`);\r\n      this.checkData(taskData);\r\n\r\n      if (!taskData.createdBy || !taskData.contextType || !taskData.contextId) {\r\n        logger.error('Missing required fields: createdBy, contextType, or contextId');\r\n        throw new ServiceError('Missing required fields: createdBy, contextType, or contextId');\r\n      }\r\n\r\n      if (imagePath) {\r\n        logger.debug(`Uploading image for task: ${taskData.name}`);\r\n        const { url } = await uploadMedia(imagePath, 'tasks', fileSize);\r\n        taskData.image = url;\r\n      }\r\n\r\n      return await this.taskRepo.createTask(taskData);\r\n    } catch (error: any) {\r\n      logger.error(`Error creating task: ${error.message}`);\r\n      throw new ServiceError(`Error creating task: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getTasksByContext = async(contextType: string, contextId: string, userId: string): Promise<ITask[]> =>{\r\n    try {\r\n      logger.debug(`Fetching tasks for contextType=${contextType}, contextId=${contextId}, userId=${userId}`);\r\n      this.checkData({ contextType, contextId, userId });\r\n      return await this.taskRepo.findTasksByContext(contextType, contextId, userId);\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching tasks by context: ${error.message}`);\r\n      throw new ServiceError(`Error fetching tasks by context: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   changeTaskPriority = async(taskId: string, priority: 'low' | 'medium' | 'high'): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Changing task priority: taskId=${taskId}, priority=${priority}`);\r\n      this.checkData({ taskId, priority });\r\n      return await this.taskRepo.updateTaskPriority(taskId, priority);\r\n    } catch (error: any) {\r\n      logger.error(`Error changing task priority: ${error.message}`);\r\n      throw new ServiceError(`Error changing task priority: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   changeTaskStatus = async(taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'not-completed'): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Changing task status: taskId=${taskId}, status=${status}`);\r\n      this.checkData({ taskId, status });\r\n      return await this.taskRepo.updateTaskStatus(taskId, status);\r\n    } catch (error: any) {\r\n      logger.error(`Error changing task status: ${error.message}`);\r\n      throw new ServiceError(`Error changing task status: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   editTask = async(taskId: string, updates: Partial<ITask>): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Editing task: taskId=${taskId}`);\r\n      this.checkData({ taskId, updates });\r\n\r\n      const task = await this.taskRepo.updateTask(taskId, updates);\r\n      if (!task) {\r\n        logger.error(`Task not found: taskId=${taskId}`);\r\n        throw new ServiceError('Task not found');\r\n      }\r\n\r\n      if (updates.notificationDate || updates.notificationTime) {\r\n        logger.debug(`Updating notifications for task: ${taskId}`);\r\n        await this.notificationRepo.updateTaskNotifications(taskId, updates.notificationDate, updates.notificationTime);\r\n        logger.info(`Updated notifications for task ${taskId}`);\r\n      }\r\n\r\n      return task;\r\n    } catch (error: any) {\r\n      logger.error(`Error editing task: ${error.message}`);\r\n      throw new ServiceError(`Error editing task: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   deleteTask = async(taskId: string): Promise<void> =>{\r\n    try {\r\n      logger.debug(`Deleting task: ${taskId}`);\r\n      this.checkData(taskId);\r\n      await this.taskRepo.deleteTask(taskId);\r\n    } catch (error: any) {\r\n      logger.error(`Error deleting task: ${error.message}`);\r\n      throw new ServiceError(`Error deleting task: ${error.message}`);\r\n    }\r\n  }\r\n}"]}