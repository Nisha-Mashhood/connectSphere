{"version":3,"file":"TaskController.js","sourceRoot":"","sources":["../../../../src/Modules/Task/Controllers/TaskController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { TaskService } from '../Service/TaskService.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { ITask } from '../../../Interfaces/models/ITask.js';\r\nimport { Types } from 'mongoose';\r\n\r\nexport class TaskController {\r\n  private taskService: TaskService;\r\n\r\n  constructor() {\r\n    this.taskService = new TaskService();\r\n  }\r\n\r\n  private toObjectId(id: string): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new Error('Invalid ID: ID is required');\r\n    }\r\n    if (!Types.ObjectId.isValid(id)) {\r\n      logger.error(`Invalid ID: ${id}`);\r\n      throw new Error('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(id);\r\n  }\r\n\r\n  async createTask(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const imagePath = req.file?.path;\r\n      const fileSize = req.file?.size;\r\n      const taskData: Partial<ITask> = req.body.taskData ? JSON.parse(req.body.taskData) : req.body;\r\n      taskData.createdBy = this.toObjectId(id);\r\n      logger.debug(`Creating task for user: ${id}, task: ${taskData.name}`);\r\n      const newTask = await this.taskService.createTask(taskData, imagePath, fileSize);\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Task created successfully',\r\n        data: newTask,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating task: ${error.message}`);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: error.message || 'Error creating task',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getTasksByContext(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { contextType, contextId, userId } = req.params;\r\n      logger.debug(`Fetching tasks for contextType=${contextType}, contextId=${contextId}, userId=${userId}`);\r\n      const tasks = await this.taskService.getTasksByContext(contextType, contextId, userId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Tasks fetched successfully',\r\n        data: tasks,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching tasks: ${error.message}`);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: error.message || 'Error fetching tasks',\r\n      });\r\n    }\r\n  }\r\n\r\n  async updateTaskPriority(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { taskId } = req.params;\r\n      const { priority } = req.body;\r\n      logger.debug(`Updating task priority: taskId=${taskId}, priority=${priority}`);\r\n      const updatedTask = await this.taskService.changeTaskPriority(taskId, priority);\r\n      if (!updatedTask) {\r\n        throw new Error('Task not found');\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Task priority updated successfully',\r\n        data: updatedTask,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating task priority: ${error.message}`);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: error.message || 'Error updating task priority',\r\n      });\r\n    }\r\n  }\r\n\r\n  async updateTaskStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { taskId } = req.params;\r\n      const { status } = req.body;\r\n      logger.debug(`Updating task status: taskId=${taskId}, status=${status}`);\r\n      const updatedTask = await this.taskService.changeTaskStatus(taskId, status);\r\n      if (!updatedTask) {\r\n        throw new Error('Task not found');\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Task status updated successfully',\r\n        data: updatedTask,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating task status: ${error.message}`);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: error.message || 'Error updating task status',\r\n      });\r\n    }\r\n  }\r\n\r\n  async editTask(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { taskId } = req.params;\r\n      const updates: Partial<ITask> = req.body;\r\n      logger.debug(`Editing task: taskId=${taskId}`);\r\n      const updatedTask = await this.taskService.editTask(taskId, updates);\r\n      if (!updatedTask) {\r\n        throw new Error('Task not found');\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Task updated successfully',\r\n        data: updatedTask,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error editing task: ${error.message}`);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: error.message || 'Error editing task',\r\n      });\r\n    }\r\n  }\r\n\r\n  async deleteTask(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { taskId } = req.params;\r\n      logger.debug(`Deleting task: ${taskId}`);\r\n      await this.taskService.deleteTask(taskId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Task deleted successfully',\r\n        data: null,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error deleting task: ${error.message}`);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: error.message || 'Error deleting task',\r\n      });\r\n    }\r\n  }\r\n}"]}