{"version":3,"file":"TaskRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Task/Repositry/TaskRepositry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,KAAK,EAAe,MAAM,UAAU,CAAC;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,4CAA4C,CAAC;AAC5E,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AACtE,OAAO,MAAM,MAAM,+BAA+B,CAAC;AAEnD,OAAO,EAAE,IAAI,EAAE,MAAM,+BAA+B,CAAC;AAErD,MAAM,OAAO,cAAe,SAAQ,cAAqB;IACvD;QACE,KAAK,CAAC,IAAoB,CAAC,CAAC;IAC9B,CAAC;IAEO,UAAU,CAAC,EAA2B;QAC5C,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC3B,MAAM,IAAI,eAAe,CAAC,4BAA4B,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,KAAK,GAAG,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC1D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,eAAe,KAAK,EAAE,CAAC,CAAC;YACrC,MAAM,IAAI,eAAe,CAAC,+CAA+C,CAAC,CAAC;QAC7E,CAAC;QACD,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEA,UAAU,GAAG,KAAK,EAAC,QAAwB,EAAkB,EAAE;QAC9D,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;YAChD,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC;gBACvB,GAAG,QAAQ;gBACX,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC/E,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC/E,aAAa,EAAE,QAAQ,CAAC,aAAa;oBACnC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;oBACzD,CAAC,CAAC,EAAE;gBACN,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACtD,MAAM,IAAI,eAAe,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAA;IAEA,YAAY,GAAG,KAAK,EAAC,MAAc,EAAyB,EAAE;QAC7D,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC;YAC/C,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5D,MAAM,IAAI,eAAe,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC,CAAA;IAEA,UAAU,GAAG,KAAK,EAAC,MAAc,EAAE,OAAuB,EAAyB,EAAE;QACpF,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kBAAkB,MAAM,EAAE,CAAC,CAAC;YACzC,MAAM,UAAU,GAAG;gBACjB,GAAG,OAAO;gBACV,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC7E,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC7E,aAAa,EAAE,OAAO,CAAC,aAAa;oBAClC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;oBACxD,CAAC,CAAC,SAAS;aACd,CAAC;YACF,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QACrG,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACtD,MAAM,IAAI,eAAe,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAA;IAEA,UAAU,GAAG,KAAK,EAAC,MAAc,EAAiB,EAAE;QACnD,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kBAAkB,MAAM,EAAE,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrE,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACtD,MAAM,IAAI,eAAe,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAA;IAEA,kBAAkB,GAAG,KAAK,EAAC,WAAmB,EAAE,SAAiB,EAAE,MAAc,EAAoB,EAAE;QACtG,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kCAAkC,WAAW,eAAe,SAAS,YAAY,MAAM,EAAE,CAAC,CAAC;YACxG,IAAI,KAAyB,CAAC;YAC9B,IAAI,aAAoB,CAAC;YAEzB,IAAI,WAAW,KAAK,SAAS,IAAI,MAAM,EAAE,CAAC;gBACxC,KAAK,GAAG;oBACN,WAAW,EAAE,SAAS;oBACtB,GAAG,EAAE;wBACH,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;wBACzC,EAAE,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;wBAC1C,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;qBACvC;iBACF,CAAC;gBACF,aAAa,GAAG;oBACd,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,gCAAgC,EAAE;oBAC9E,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,gCAAgC,EAAE;oBAClF,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,gCAAgC,EAAE;iBAC/E,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,KAAK,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC/D,aAAa,GAAG;oBACd,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,gCAAgC,EAAE;oBAC9E;wBACE,IAAI,EAAE,WAAW;wBACjB,KAAK,EAAE,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;wBAC1D,QAAQ,EAAE,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,gCAAgC,EAAE,CAAC,CAAC,CAAC,SAAS;qBACpI;iBACF,CAAC;YACJ,CAAC;YAED,OAAO,MAAM,IAAI,CAAC,KAAK;iBACpB,IAAI,CAAC,KAAK,CAAC;iBACX,QAAQ,CAAC,aAAa,CAAC;iBACvB,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;iBACvB,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAClE,MAAM,IAAI,eAAe,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACjF,CAAC;IACH,CAAC,CAAA;IAEA,kBAAkB,GAAG,KAAK,EAAC,MAAc,EAAE,QAAmC,EAAyB,EAAE;QACxG,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kCAAkC,MAAM,cAAc,QAAQ,EAAE,CAAC,CAAC;YAC/E,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QACvG,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,eAAe,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC,CAAA;IAEA,gBAAgB,GAAG,KAAK,EAAC,MAAc,EAAE,MAAiE,EAAyB,EAAE;QACpI,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,gCAAgC,MAAM,YAAY,MAAM,EAAE,CAAC,CAAC;YACzE,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QACrG,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC7D,MAAM,IAAI,eAAe,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC,CAAA;CACF","sourcesContent":["import { Model, Types, FilterQuery } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { ITask } from '../../../Interfaces/models/ITask.js';\r\nimport { Task } from '../../../models/task.modal.js';\r\n\r\nexport class TaskRepository extends BaseRepository<ITask> {\r\n  constructor() {\r\n    super(Task as Model<ITask>);\r\n  }\r\n\r\n  private toObjectId(id: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = typeof id === 'string' ? id : id.toString();\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n   createTask = async(taskData: Partial<ITask>): Promise<ITask> =>{\r\n    try {\r\n      logger.debug(`Creating task: ${taskData.name}`);\r\n      return await this.create({\r\n        ...taskData,\r\n        contextId: taskData.contextId ? this.toObjectId(taskData.contextId) : undefined,\r\n        createdBy: taskData.createdBy ? this.toObjectId(taskData.createdBy) : undefined,\r\n        assignedUsers: taskData.assignedUsers\r\n          ? taskData.assignedUsers.map((id) => this.toObjectId(id))\r\n          : [],\r\n        createdAt: new Date(),\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating task: ${error.message}`);\r\n      throw new RepositoryError(`Error creating task: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   findTaskById = async(taskId: string): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Fetching task by ID: ${taskId}`);\r\n      return await this.findById(this.toObjectId(taskId).toString());\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching task by ID: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching task by ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   updateTask = async(taskId: string, updates: Partial<ITask>): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Updating task: ${taskId}`);\r\n      const updateData = {\r\n        ...updates,\r\n        contextId: updates.contextId ? this.toObjectId(updates.contextId) : undefined,\r\n        createdBy: updates.createdBy ? this.toObjectId(updates.createdBy) : undefined,\r\n        assignedUsers: updates.assignedUsers\r\n          ? updates.assignedUsers.map((id) => this.toObjectId(id))\r\n          : undefined,\r\n      };\r\n      return await this.findByIdAndUpdate(this.toObjectId(taskId).toString(), updateData, { new: true });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating task: ${error.message}`);\r\n      throw new RepositoryError(`Error updating task: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   deleteTask = async(taskId: string): Promise<void> =>{\r\n    try {\r\n      logger.debug(`Deleting task: ${taskId}`);\r\n      const result = await this.delete(this.toObjectId(taskId).toString());\r\n      if (!result) {\r\n        throw new RepositoryError('Task not found');\r\n      }\r\n    } catch (error: any) {\r\n      logger.error(`Error deleting task: ${error.message}`);\r\n      throw new RepositoryError(`Error deleting task: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   findTasksByContext = async(contextType: string, contextId: string, userId: string): Promise<ITask[]> =>{\r\n    try {\r\n      logger.debug(`Fetching tasks for contextType=${contextType}, contextId=${contextId}, userId=${userId}`);\r\n      let query: FilterQuery<ITask>;\r\n      let populatePaths: any[];\r\n\r\n      if (contextType === 'profile' && userId) {\r\n        query = {\r\n          contextType: 'profile',\r\n          $or: [\r\n            { contextId: this.toObjectId(contextId) },\r\n            { assignedUsers: this.toObjectId(userId) },\r\n            { createdBy: this.toObjectId(userId) },\r\n          ],\r\n        };\r\n        populatePaths = [\r\n          { path: 'createdBy', model: 'User', select: 'name email jobTitle profilePic' },\r\n          { path: 'assignedUsers', model: 'User', select: 'name email jobTitle profilePic' },\r\n          { path: 'contextId', model: 'User', select: 'name email jobTitle profilePic' },\r\n        ];\r\n      } else {\r\n        query = { contextType, contextId: this.toObjectId(contextId) };\r\n        populatePaths = [\r\n          { path: 'createdBy', model: 'User', select: 'name email jobTitle profilePic' },\r\n          {\r\n            path: 'contextId',\r\n            model: contextType === 'group' ? 'Group' : 'Collaboration',\r\n            populate: contextType === 'group' ? { path: 'members.userId', model: 'User', select: 'name email jobTitle profilePic' } : undefined,\r\n          },\r\n        ];\r\n      }\r\n\r\n      return await this.model\r\n        .find(query)\r\n        .populate(populatePaths)\r\n        .sort({ createdAt: -1 })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching tasks by context: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching tasks by context: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   updateTaskPriority = async(taskId: string, priority: 'low' | 'medium' | 'high'): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Updating task priority: taskId=${taskId}, priority=${priority}`);\r\n      return await this.findByIdAndUpdate(this.toObjectId(taskId).toString(), { priority }, { new: true });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating task priority: ${error.message}`);\r\n      throw new RepositoryError(`Error updating task priority: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   updateTaskStatus = async(taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'not-completed'): Promise<ITask | null> =>{\r\n    try {\r\n      logger.debug(`Updating task status: taskId=${taskId}, status=${status}`);\r\n      return await this.findByIdAndUpdate(this.toObjectId(taskId).toString(), { status }, { new: true });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating task status: ${error.message}`);\r\n      throw new RepositoryError(`Error updating task status: ${error.message}`);\r\n    }\r\n  }\r\n}"]}