{"version":3,"file":"Mentorservice.js","sourceRoot":"","sources":["../../../../src/Modules/Mentor/Service/Mentorservice.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uCAAuC,CAAC;AACpE,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,MAAM,MAAM,+BAA+B,CAAC;AAGnD,MAAM,OAAO,aAAc,SAAQ,WAAW;IACpC,UAAU,CAAmB;IAC7B,QAAQ,CAAiB;IAEjC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,UASzB;QACC,MAAM,CAAC,KAAK,CAAC,uCAAuC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED,KAAK,CAAC,oBAAoB,CACxB,OAAe,CAAC,EAChB,QAAgB,EAAE,EAClB,SAAiB,EAAE,EACnB,SAAiB,EAAE,EACnB,OAAe,MAAM;QAOrB,MAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;QACzC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAC/C,IAAI,EACJ,KAAK,EACL,MAAM,EACN,MAAM,EACN,IAAI,CACL,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC9C,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,QAAgB;QACxC,MAAM,CAAC,KAAK,CAAC,0BAA0B,QAAQ,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACzB,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,EAAU;QACnC,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAED,MAAM,SAAS,CACb,IAAI,CAAC,KAAK,EACV,yBAAyB,EACzB,SAAS,IAAI,CAAC,IAAI,wGAAwG,CAC3H,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,EAAU,EAAE,MAAc;QAClD,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QACD,MAAM,SAAS,CACb,IAAI,CAAC,KAAK,EACV,yBAAyB,EACzB,SAAS,IAAI,CAAC,IAAI,uFAAuF,MAAM,yCAAyC,CACzJ,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,EAAU;QAC/B,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QACD,MAAM,SAAS,CACb,IAAI,CAAC,KAAK,EACV,sBAAsB,EACtB,SAAS,IAAI,CAAC,IAAI,8KAA8K,CACjM,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,MAAc;QACpC,MAAM,CAAC,KAAK,CAAC,+BAA+B,MAAM,EAAE,CAAC,CAAC;QACtD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,QAAgB,EAChB,UAA4B;QAE5B,MAAM,CAAC,KAAK,CAAC,oBAAoB,QAAQ,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;QACzC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QACD,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACtE,CAAC;CACF","sourcesContent":["import { BaseService } from \"../../../core/Services/BaseService.js\";\r\nimport { MentorRepository } from \"../Repositry/MentorRepositry.js\";\r\nimport { UserRepository } from \"../../Auth/Repositry/UserRepositry.js\";\r\nimport { sendEmail } from \"../../../core/Utils/Email.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport { IMentor } from \"../../../Interfaces/models/IMentor.js\";\r\n\r\nexport class MentorService extends BaseService {\r\n  private mentorRepo: MentorRepository;\r\n  private authRepo: UserRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.mentorRepo = new MentorRepository();\r\n    this.authRepo = new UserRepository();\r\n  }\r\n\r\n  async submitMentorRequest(mentorData: {\r\n    userId: string;\r\n    skills: string[];\r\n    specialization: string;\r\n    bio: string;\r\n    price: number;\r\n    availableSlots: object[];\r\n    timePeriod: number;\r\n    certifications: string[];\r\n  }): Promise<IMentor> {\r\n    logger.debug(`Submitting mentor request for user: ${mentorData.userId}`);\r\n    this.checkData(mentorData);\r\n    return await this.mentorRepo.saveMentorRequest(mentorData);\r\n  }\r\n\r\n  async getAllMentorRequests(\r\n    page: number = 1,\r\n    limit: number = 10,\r\n    search: string = \"\",\r\n    status: string = \"\",\r\n    sort: string = \"desc\"\r\n  ): Promise<{\r\n    mentors: IMentor[];\r\n    total: number;\r\n    page: number;\r\n    pages: number;\r\n  }> {\r\n    logger.debug(`Fetching mentor requests`);\r\n    return await this.mentorRepo.getAllMentorRequests(\r\n      page,\r\n      limit,\r\n      search,\r\n      status,\r\n      sort\r\n    );\r\n  }\r\n\r\n  async getAllMentors(): Promise<IMentor[]> {\r\n    logger.debug(`Fetching all approved mentors`);\r\n    return await this.mentorRepo.getAllMentors();\r\n  }\r\n\r\n  async getMentorByMentorId(mentorId: string): Promise<IMentor | null> {\r\n    logger.debug(`Fetching mentor by ID: ${mentorId}`);\r\n    this.checkData(mentorId);\r\n    return await this.mentorRepo.getMentorDetails(mentorId);\r\n  }\r\n\r\n  async approveMentorRequest(id: string): Promise<void> {\r\n    logger.debug(`Approving mentor request: ${id}`);\r\n    this.checkData(id);\r\n    const mentor = await this.mentorRepo.approveMentorRequest(id);\r\n    if (!mentor) {\r\n      this.throwError(\"Mentor not found\");\r\n    }\r\n\r\n    const user = await this.authRepo.getUserById(mentor.userId.toString());\r\n    if (!user) {\r\n      this.throwError(\"User not found\");\r\n    }\r\n\r\n    await sendEmail(\r\n      user.email,\r\n      \"Mentor Request Approved\",\r\n      `Hello ${user.name},\\n\\nCongratulations! Your mentor request has been approved.\\n\\nBest regards,\\n Admin \\n ConnectSphere`\r\n    );\r\n  }\r\n\r\n  async rejectMentorRequest(id: string, reason: string): Promise<void> {\r\n    logger.debug(`Rejecting mentor request: ${id}`);\r\n    this.checkData({ id, reason });\r\n    const mentor = await this.mentorRepo.rejectMentorRequest(id);\r\n    if (!mentor) {\r\n      this.throwError(\"Mentor not found\");\r\n    }\r\n    const user = await this.authRepo.getUserById(mentor.userId.toString());\r\n    if (!user) {\r\n      this.throwError(\"User not found\");\r\n    }\r\n    await sendEmail(\r\n      user.email,\r\n      \"Mentor Request Rejected\",\r\n      `Hello ${user.name},\\n\\nWe regret to inform you that your mentor request has been rejected.\\n\\nReason: ${reason}\\n\\nBest regards,\\nAdmin\\nConnectSphere`\r\n    );\r\n  }\r\n\r\n  async cancelMentorship(id: string): Promise<void> {\r\n    logger.debug(`Cancelling mentorship: ${id}`);\r\n    this.checkData(id);\r\n    const mentor = await this.mentorRepo.cancelMentorship(id);\r\n    if (!mentor) {\r\n      this.throwError(\"Mentor not found\");\r\n    }\r\n    const user = await this.authRepo.getUserById(mentor.userId.toString());\r\n    if (!user) {\r\n      this.throwError(\"User not found\");\r\n    }\r\n    await sendEmail(\r\n      user.email,\r\n      \"Mentorship Cancelled\",\r\n      `Hello ${user.name},\\n\\nWe regret to inform you that your mentorship has been cancelled by the admin. If you have any questions, please contact support.\\n\\nBest regards,\\nAdmin\\nConnectSphere`\r\n    );\r\n  }\r\n\r\n  async getMentorByUserId(userId: string): Promise<IMentor | null> {\r\n    logger.debug(`Fetching mentor by user ID: ${userId}`);\r\n    this.checkData(userId);\r\n    return await this.mentorRepo.getMentorByUserId(userId);\r\n  }\r\n\r\n  async updateMentorById(\r\n    mentorId: string,\r\n    updateData: Partial<IMentor>\r\n  ): Promise<IMentor | null> {\r\n    logger.debug(`Updating mentor: ${mentorId}`);\r\n    this.checkData({ mentorId, updateData });\r\n    const mentor = await this.mentorRepo.getMentorById(mentorId);\r\n    if (!mentor) {\r\n      this.throwError(\"Mentor not found\");\r\n    }\r\n    return await this.mentorRepo.updateMentorById(mentorId, updateData);\r\n  }\r\n}\r\n"]}