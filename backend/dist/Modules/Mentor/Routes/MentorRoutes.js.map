{"version":3,"file":"MentorRoutes.js","sourceRoot":"","sources":["../../../../src/Modules/Mentor/Routes/MentorRoutes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAC;AACtE,OAAO,EAAE,UAAU,EAAE,MAAM,8CAA8C,CAAC;AAC1E,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAE7D,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AACxB,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC;AAChD,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;AAG5C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,EAAE,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC,YAAY,CAAC,CAAC;AAC5L,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAAE,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;AAC7J,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;AACnK,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;AACnK,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;AACjK,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAC3J,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAAE,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAC3J,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAAE,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;AACjK,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC;AACrJ,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAAE,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;AAE7J,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from 'express';\r\nimport { MentorController } from '../Controllers/Mentorcontroller.js';\r\nimport { apiLimiter } from '../../../middlewares/ratelimit.middleware.js';\r\nimport { AuthMiddleware } from '../../../middlewares/auth.middleware.js';\r\nimport { upload } from '../../../core/Utils/Multer.js';\r\nimport { MENTOR_ROUTES } from '../Constant/Mentor.routes.js';\r\n\r\nconst router = Router();\r\nconst mentorController = new MentorController();\r\nconst authMiddleware = new AuthMiddleware();\r\n\r\n\r\nrouter.post(MENTOR_ROUTES.CreateMentorProfile, [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus, upload.array('certificates', 2)], mentorController.createMentor);\r\nrouter.get(MENTOR_ROUTES.CheckMentorStatus, [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.checkMentorStatus);\r\nrouter.get(MENTOR_ROUTES.GetAllMentorRequests, [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.getAllMentorRequests);\r\nrouter.put(MENTOR_ROUTES.ApproveMentorRequest, [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.approveMentorRequest);\r\nrouter.put(MENTOR_ROUTES.RejectMentorRequest, [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.rejectMentorRequest);\r\nrouter.put(MENTOR_ROUTES.CancelMentorship, [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.cancelMentorship);\r\nrouter.get(MENTOR_ROUTES.GetMentorDetails, [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.getMentorDetails);\r\nrouter.put(MENTOR_ROUTES.UpdateMentorProfile, [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.updateMentorProfile);\r\nrouter.get(MENTOR_ROUTES.GetAllMentors, [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.getAllMentors);\r\nrouter.get(MENTOR_ROUTES.GetMentorByUserId, [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.getMentorByUserId);\r\n\r\nexport default router;"]}