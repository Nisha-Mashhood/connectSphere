import { Router } from 'express';
import { MentorController } from '../Controllers/Mentorcontroller.js';
import { apiLimiter } from '../../../middlewares/ratelimit.middleware.js';
import { AuthMiddleware } from '../../../middlewares/auth.middleware.js';
import { upload } from '../../../core/Utils/Multer.js';
const router = Router();
const mentorController = new MentorController();
const authMiddleware = new AuthMiddleware();
router.post('/create-mentorprofile', [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus, upload.array('certificates', 2)], mentorController.createMentor);
router.get('/check-mentor/:id', [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.checkMentorStatus);
router.get('/getallmentorrequest', [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.getAllMentorRequests);
router.put('/approvementorrequest/:id', [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.approveMentorRequest);
router.put('/rejectmentorrequest/:id', [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.rejectMentorRequest);
router.put('/cancelmentorship/:mentorId', [apiLimiter, authMiddleware.verifyToken, authMiddleware.authorize('admin')], mentorController.cancelMentorship);
router.get('/getmentorDetails/:mentorId', [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.getMentorDetails);
router.put('/update-mentor/:mentorId', [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.updateMentorProfile);
router.get('/getAllMentors', [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.getAllMentors);
router.get('/user/:userId', [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus], mentorController.getMentorByUserId);
export default router;
//# sourceMappingURL=MentorRoutes.js.map