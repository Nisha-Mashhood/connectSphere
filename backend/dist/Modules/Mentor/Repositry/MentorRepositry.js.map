{"version":3,"file":"MentorRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Mentor/Repositry/MentorRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types, Model } from \"mongoose\";\r\nimport { BaseRepository } from \"../../../core/Repositries/BaseRepositry.js\";\r\nimport { RepositoryError } from \"../../../core/Utils/ErrorHandler.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport Mentor from \"../../../models/mentor.model.js\";\r\nimport { IMentor } from \"../../../Interfaces/models/IMentor.js\";\r\nimport { UserInterface } from \"../../../Interfaces/models/IUser.js\";\r\n\r\nexport class MentorRepository extends BaseRepository<IMentor> {\r\n  constructor() {\r\n    super(Mentor as Model<IMentor>);\r\n  }\r\n\r\n  private toObjectId(id?: string | Types.ObjectId | UserInterface): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    let idStr: string;\r\n    if (typeof id === 'string') {\r\n      idStr = id;\r\n    } else if (id instanceof Types.ObjectId) {\r\n      idStr = id.toString();\r\n    } else if (typeof id === 'object' && '_id' in id) {\r\n      idStr = (id as UserInterface)._id.toString();\r\n    } else {\r\n      logger.error(`Invalid ID type: ${typeof id}`);\r\n      throw new RepositoryError('Invalid ID: must be a string, ObjectId, or UserInterface');\r\n    }\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n   submitMentorRequest = async(data: Partial<IMentor>): Promise<IMentor> => {\r\n    try {\r\n      logger.debug(`Submitting mentor request for user: ${data.userId}`);\r\n      return await this.create({\r\n        ...data,\r\n        userId: this.toObjectId(data.userId),\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error submitting mentor request: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error submitting mentor request: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   getAllMentorRequests = async(\r\n    page: number = 1,\r\n    limit: number = 10,\r\n    search: string = \"\",\r\n    status: string = \"\",\r\n    sort: string = \"desc\"\r\n  ): Promise<{\r\n    mentors: IMentor[];\r\n    total: number;\r\n    page: number;\r\n    pages: number;\r\n  }> => {\r\n    try {\r\n      logger.debug(\r\n        `Fetching mentor requests with page: ${page}, limit: ${limit}, search: ${search}`\r\n      );\r\n      const query: any = {};\r\n      if (status) query.isApproved = status;\r\n      if (search) {\r\n        query.$or = [\r\n          { \"userId.name\": { $regex: search, $options: \"i\" } },\r\n          { \"userId.email\": { $regex: search, $options: \"i\" } },\r\n        ];\r\n      }\r\n      const total = await this.model.countDocuments(query);\r\n      const mentors = await this.model\r\n        .find(query)\r\n        .populate(\"userId\", \"name email\")\r\n        .populate(\"skills\", \"name\")\r\n        .sort({ createdAt: sort === \"desc\" ? -1 : 1 })\r\n        .skip((page - 1) * limit)\r\n        .limit(limit)\r\n        .exec();\r\n      return { mentors, total, page, pages: Math.ceil(total / limit) };\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching mentor requests: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error fetching mentor requests: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   getAllMentors = async(): Promise<IMentor[]> => {\r\n    try {\r\n      logger.debug(`Fetching all approved mentors`);\r\n      return await this.model\r\n        .find({ isApproved: \"Completed\" })\r\n        .populate(\"userId\")\r\n        .populate(\"skills\")\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching mentors: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching mentors: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getMentorDetails = async(id: string): Promise<IMentor | null> => {\r\n    try {\r\n      logger.debug(`Fetching mentor details for ID: ${id}`);\r\n      return await this.model\r\n        .findById(this.toObjectId(id))\r\n        .populate(\"userId\")\r\n        .populate(\"skills\")\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching mentor details: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error fetching mentor details: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   approveMentorRequest = async(id: string): Promise<IMentor | null> => {\r\n    try {\r\n      logger.debug(`Approving mentor request: ${id}`);\r\n      return await this.model\r\n        .findByIdAndUpdate(\r\n          this.toObjectId(id),\r\n          { isApproved: \"Completed\" },\r\n          { new: true }\r\n        )\r\n        .lean();\r\n    } catch (error: any) {\r\n      logger.error(`Error approving mentor request: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error approving mentor request: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   rejectMentorRequest = async(id: string): Promise<IMentor | null> => {\r\n    try {\r\n      logger.debug(`Rejecting mentor request: ${id}`);\r\n      return await this.model\r\n        .findByIdAndUpdate(\r\n          this.toObjectId(id),\r\n          { isApproved: \"Rejected\" },\r\n          { new: true }\r\n        )\r\n        .lean();\r\n    } catch (error: any) {\r\n      logger.error(`Error rejecting mentor request: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error rejecting mentor request: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   cancelMentorship = async(id: string): Promise<IMentor | null> => {\r\n    try {\r\n      logger.debug(`Cancelling mentorship: ${id}`);\r\n      return await this.model\r\n        .findByIdAndUpdate(\r\n          this.toObjectId(id),\r\n          { isApproved: \"Processing\" },\r\n          { new: true }\r\n        )\r\n        .lean();\r\n    } catch (error: any) {\r\n      logger.error(`Error cancelling mentorship: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error cancelling mentorship: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   getMentorById = async(id: string): Promise<IMentor | null> => {\r\n    try {\r\n      logger.debug(`Fetching mentor by ID: ${id}`);\r\n      return await this.model\r\n        .findById(this.toObjectId(id))\r\n        .populate(\"userId\", \"name email\")\r\n        .populate(\"skills\", \"name\")\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching mentor by ID: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error fetching mentor by ID: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   getMentorByUserId = async(userId: string): Promise<IMentor | null> => {\r\n    try {\r\n      logger.debug(`Fetching mentor by user ID: ${userId}`);\r\n      return await this.model\r\n        .findOne({ userId: this.toObjectId(userId) })\r\n        .populate(\"userId\")\r\n        .populate(\"skills\")\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching mentor by user ID: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error fetching mentor by user ID: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n   updateMentorById = async(\r\n    mentorId: string,\r\n    updateData: Partial<IMentor>\r\n  ): Promise<IMentor | null> =>{\r\n    try {\r\n      logger.debug(`Updating mentor: ${mentorId}`);\r\n      return await this.findByIdAndUpdate(mentorId, updateData, { new: true });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating mentor: ${error.message}`);\r\n      throw new RepositoryError(`Error updating mentor: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   saveMentorRequest = async(data: {\r\n    userId: string;\r\n    skills: string[];\r\n    specialization: string;\r\n    bio: string;\r\n    price: number;\r\n    availableSlots: object[];\r\n    timePeriod: number;\r\n    certifications: string[];\r\n  }): Promise<IMentor> =>{\r\n    try {\r\n      logger.debug(`Saving mentor request for user: ${data.userId}`);\r\n      return await this.create({\r\n        ...data,\r\n        userId: data.userId ? this.toObjectId(data.userId) : undefined,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error saving mentor request: ${error.message}`);\r\n      throw new RepositoryError(\r\n        `Error saving mentor request: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}