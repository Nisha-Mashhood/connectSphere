{"version":3,"file":"Mentorcontroller.js","sourceRoot":"","sources":["../../../../src/Modules/Mentor/Controllers/Mentorcontroller.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,4CAA4C,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAC5D,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAChE,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AACvE,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAGhE,MAAM,OAAO,gBAAiB,SAAQ,cAAc;IAC1C,aAAa,CAAgB;IAC7B,WAAW,CAAc;IACzB,QAAQ,CAAiB;IAEjC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;IACvC,CAAC;IAEA,iBAAiB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QACxE,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAC9D,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,MAAM,IAAI,IAAI,EAAE,EAAE,sCAAsC,CAAC,CAAC;QAC5F,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,gBAAgB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QACvE,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACtE,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,uCAAuC,CAAC,CAAC;QAC7E,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,YAAY,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QACnE,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE5F,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YACzC,CAAC;YAED,IAAI,IAAI,EAAE,IAAI,KAAK,QAAQ,EAAE,CAAC;gBAC5B,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAC1E,IAAI,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,+BAA+B,CAAC,CAAC;YACxD,CAAC;YAED,IAAI,oBAAoB,GAAa,EAAE,CAAC;YACxC,IAAI,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAClE,MAAM,KAAK,GAAG,GAAG,CAAC,KAA8B,CAAC;gBACjD,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACxC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CACtF,CAAC;gBACF,oBAAoB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC3D,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,mDAAmD,CAAC,CAAC;YAC5E,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC;gBAC7D,MAAM;gBACN,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC1B,cAAc;gBACd,GAAG;gBACH,KAAK;gBACL,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;gBAC1C,UAAU;gBACV,cAAc,EAAE,oBAAoB;aACrC,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,SAAS,EAAE,6DAA6D,CAAC,CAAC;QAClG,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,oBAAoB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QAC3E,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,GAAG,GAAG,EAAE,KAAK,GAAG,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,IAAI,GAAG,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YACxF,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAClE,QAAQ,CAAC,IAAc,CAAC,EACxB,QAAQ,CAAC,KAAe,CAAC,EACzB,MAAgB,EAChB,MAAgB,EAChB,IAAc,CACf,CAAC;YACF,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;gBACpB,OAAO,EAAE,cAAc,CAAC,OAAO;gBAC/B,KAAK,EAAE,cAAc,CAAC,KAAK;gBAC3B,WAAW,EAAE,QAAQ,CAAC,IAAc,CAAC;gBACrC,UAAU,EAAE,cAAc,CAAC,KAAK;aACjC,EAAE,wCAAwC,CAAC,CAAC;QAC/C,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,aAAa,GAAG,KAAK,EAAC,IAAa,EAAE,GAAa,EAAiB,EAAE;QACpE,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YACzD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,EAAE,gCAAgC,CAAC,CAAC;QACnE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,iBAAiB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QACxE,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAClE,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,+BAA+B,CAAC,CAAC;QACjE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,oBAAoB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QAC3E,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,0DAA0D,CAAC,CAAC;QAC1F,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,mBAAmB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QAC1E,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,8BAA8B,CAAC,CAAC;YACvD,CAAC;YACD,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACzD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,0DAA0D,CAAC,CAAC;QAC1F,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,gBAAgB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QACvE,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAChC,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACpD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,uDAAuD,CAAC,CAAC;QACvF,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;IAEA,mBAAmB,GAAI,KAAK,EAAC,GAAY,EAAE,GAAa,EAAiB,EAAE;QAC1E,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAChC,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;YAC5B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACnF,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,qCAAqC,CAAC,CAAC;QAC3E,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAA;CACF","sourcesContent":["import { Request, Response } from 'express';\r\nimport { BaseController } from '../../../core/Controller/BaseController.js';\r\nimport { MentorService } from '../Service/Mentorservice.js';\r\nimport { AuthService } from '../../Auth/Service/AuthService.js';\r\nimport { UserRepository } from '../../Auth/Repositry/UserRepositry.js';\r\nimport { uploadMedia } from '../../../core/Utils/Cloudinary.js';\r\n\r\n\r\nexport class MentorController extends BaseController {\r\n  private mentorService: MentorService;\r\n  private authService: AuthService;\r\n  private userRepo: UserRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.mentorService = new MentorService();\r\n    this.authService = new AuthService();\r\n    this.userRepo = new UserRepository();\r\n  }\r\n\r\n   checkMentorStatus  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { id } = req.params;\r\n      const mentor = await this.mentorService.getMentorByUserId(id);\r\n      this.sendSuccess(res, { mentor: mentor || null }, 'Mentor status retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   getMentorDetails  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { mentorId } = req.params;\r\n      const mentor = await this.mentorService.getMentorByMentorId(mentorId);\r\n      if (!mentor) {\r\n        this.throwError(404, 'Mentor not found');\r\n      }\r\n      this.sendSuccess(res, { mentor }, 'Mentor details retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   createMentor  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { userId, specialization, bio, price, skills, availableSlots, timePeriod } = req.body;\r\n\r\n      const user = await this.userRepo.getUserById(userId);\r\n      if (!user) {\r\n        this.throwError(404, 'User not found');\r\n      }\r\n\r\n      if (user?.role !== 'mentor') {\r\n        await this.authService.changeRole(userId, 'mentor');\r\n      }\r\n\r\n      const existingMentor = await this.mentorService.getMentorByUserId(userId);\r\n      if (existingMentor) {\r\n        this.throwError(400, 'Mentor profile already exists');\r\n      }\r\n\r\n      let uploadedCertificates: string[] = [];\r\n      if (req.files && Array.isArray(req.files) && req.files.length > 0) {\r\n        const files = req.files as Express.Multer.File[];\r\n        const uploadPromises = files.map((file) =>\r\n          uploadMedia(file.path, 'mentor_certificates', file.size).then((result) => result.url)\r\n        );\r\n        uploadedCertificates = await Promise.all(uploadPromises);\r\n      } else {\r\n        this.throwError(400, 'Certificates are required for mentor registration');\r\n      }\r\n\r\n      const newMentor = await this.mentorService.submitMentorRequest({\r\n        userId,\r\n        skills: JSON.parse(skills),\r\n        specialization,\r\n        bio,\r\n        price,\r\n        availableSlots: JSON.parse(availableSlots),\r\n        timePeriod,\r\n        certifications: uploadedCertificates,\r\n      });\r\n\r\n      this.sendCreated(res, newMentor, 'Mentor registration submitted successfully for admin review');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   getAllMentorRequests  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { page = '1', limit = '10', search = '', status = '', sort = 'desc' } = req.query;\r\n      const mentorRequests = await this.mentorService.getAllMentorRequests(\r\n        parseInt(page as string),\r\n        parseInt(limit as string),\r\n        search as string,\r\n        status as string,\r\n        sort as string\r\n      );\r\n      this.sendSuccess(res, {\r\n        mentors: mentorRequests.mentors,\r\n        total: mentorRequests.total,\r\n        currentPage: parseInt(page as string),\r\n        totalPages: mentorRequests.pages,\r\n      }, 'Mentor requests retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   getAllMentors = async(_req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const mentors = await this.mentorService.getAllMentors();\r\n      this.sendSuccess(res, mentors, 'Mentors retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   getMentorByUserId  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { userId } = req.params;\r\n      const mentor = await this.mentorService.getMentorByUserId(userId);\r\n      if (!mentor) {\r\n        this.throwError(404, 'Mentor not found');\r\n      }\r\n      this.sendSuccess(res, mentor, 'Mentor retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   approveMentorRequest  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { id } = req.params;\r\n      await this.mentorService.approveMentorRequest(id);\r\n      this.sendSuccess(res, null, 'Mentor request approved successfully. Email sent to user');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   rejectMentorRequest  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { id } = req.params;\r\n      const { reason } = req.body;\r\n      if (!reason) {\r\n        this.throwError(400, 'Rejection reason is required');\r\n      }\r\n      await this.mentorService.rejectMentorRequest(id, reason);\r\n      this.sendSuccess(res, null, 'Mentor request rejected successfully. Email sent to user');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   cancelMentorship  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { mentorId } = req.params;\r\n      await this.mentorService.cancelMentorship(mentorId);\r\n      this.sendSuccess(res, null, 'Mentorship cancelled successfully. Email sent to user');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   updateMentorProfile  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { mentorId } = req.params;\r\n      const updateData = req.body;\r\n      const mentorData = await this.mentorService.updateMentorById(mentorId, updateData);\r\n      this.sendSuccess(res, mentorData, 'Mentor profile updated successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n}"]}