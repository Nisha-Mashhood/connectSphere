{"version":3,"file":"UserCollaborationRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/UserCollaboration/Repositry/UserCollaborationRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Types } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport UserConnection from '../../../models/userConnection.modal.js';\r\nimport { IUserConnection } from '../../../Interfaces/models/IUserConnection.js';\r\n\r\nexport class UserConnectionRepository extends BaseRepository<IUserConnection> {\r\n  constructor() {\r\n    super(UserConnection as Model<IUserConnection>);\r\n  }\r\n\r\n  private toObjectId(id: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = typeof id === 'string' ? id : id.toString();\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n   createUserConnection= async(requesterId: string, recipientId: string): Promise<IUserConnection> =>{\r\n    try {\r\n      logger.debug(`Creating user connection: requester=${requesterId}, recipient=${recipientId}`);\r\n      return await this.create({\r\n        requester: this.toObjectId(requesterId),\r\n        recipient: this.toObjectId(recipientId),\r\n        requestStatus: 'Pending',\r\n        connectionStatus: 'Disconnected',\r\n        requestSentAt: new Date(),\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating user connection: ${error.message}`);\r\n      throw new RepositoryError(`Error creating user connection: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   updateUserConnectionStatus = async(\r\n    connectionId: string,\r\n    status: 'Accepted' | 'Rejected'\r\n  ): Promise<IUserConnection | null> => {\r\n    try {\r\n      logger.debug(`Updating user connection status: connectionId=${connectionId}, status=${status}`);\r\n      const updateFields: any = {\r\n        requestStatus: status,\r\n        connectionStatus: status === 'Accepted' ? 'Connected' : 'Disconnected',\r\n        updatedAt: new Date(),\r\n      };\r\n      if (status === 'Accepted') {\r\n        updateFields.requestAcceptedAt = new Date();\r\n      } else if (status === 'Rejected') {\r\n        updateFields.requestRejectedAt = new Date();\r\n      }\r\n      return await this.findByIdAndUpdate(this.toObjectId(connectionId).toString(), updateFields, { new: true });\r\n    } catch (error: any) {\r\n      logger.error(`Error updating user connection status: ${error.message}`);\r\n      throw new RepositoryError(`Error updating user connection status: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   disconnectUserConnection = async(connectionId: string, reason: string): Promise<IUserConnection | null> =>{\r\n    try {\r\n      logger.debug(`Disconnecting user connection: connectionId=${connectionId}`);\r\n      return await this.findByIdAndUpdate(\r\n        this.toObjectId(connectionId).toString(),\r\n        {\r\n          connectionStatus: 'Disconnected',\r\n          disconnectedAt: new Date(),\r\n          disconnectionReason: reason,\r\n          updatedAt: new Date(),\r\n        },\r\n        { new: true }\r\n      );\r\n    } catch (error: any) {\r\n      logger.error(`Error disconnecting user connection: ${error.message}`);\r\n      throw new RepositoryError(`Error disconnecting user connection: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getUserConnections = async(userId: string): Promise<IUserConnection[]> =>{\r\n    try {\r\n      logger.debug(`Fetching connections for user: ${userId}`);\r\n      return await this.model\r\n        .find({\r\n          $or: [{ requester: this.toObjectId(userId) }, { recipient: this.toObjectId(userId) }],\r\n          requestStatus: 'Accepted',\r\n        })\r\n        .populate('requester', 'name email jobTitle profilePic')\r\n        .populate('recipient', 'name email jobTitle profilePic')\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching user connections: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching user connections: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getUserRequests= async(userId: string): Promise<{ sentRequests: IUserConnection[]; receivedRequests: IUserConnection[] }> =>{\r\n    try {\r\n      logger.debug(`Fetching sent and received requests for user: ${userId}`);\r\n      const sentRequests = await this.model\r\n        .find({ requester: this.toObjectId(userId) })\r\n        .populate('recipient', 'name email jobTitle profilePic')\r\n        .sort({ requestSentAt: -1 })\r\n        .exec();\r\n\r\n      const receivedRequests = await this.model\r\n        .find({ recipient: this.toObjectId(userId), requestStatus: 'Pending' })\r\n        .populate('requester', 'name email jobTitle profilePic')\r\n        .sort({ requestSentAt: -1 })\r\n        .exec();\r\n\r\n      return { sentRequests, receivedRequests };\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching user requests: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching user requests: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getAllUserConnections = async(): Promise<IUserConnection[]> =>{\r\n    try {\r\n      logger.debug('Fetching all user connections');\r\n      return await this.model\r\n        .find()\r\n        .populate('requester', 'name email jobTitle profilePic')\r\n        .populate('recipient', 'name email jobTitle profilePic')\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching all user connections: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching all user connections: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getUserConnectionById = async(connectionId: string): Promise<IUserConnection | null> =>{\r\n    try {\r\n      logger.debug(`Fetching user connection by ID: ${connectionId}`);\r\n      const connection = await this.model\r\n        .findById(this.toObjectId(connectionId))\r\n        .populate('requester', 'name email jobTitle profilePic')\r\n        .populate('recipient', 'name email jobTitle profilePic')\r\n        .exec();\r\n      if (!connection) {\r\n        throw new RepositoryError('No user connection found for this ID');\r\n      }\r\n      return connection;\r\n    } catch (error: any) {\r\n      logger.error(`Error retrieving user connection: ${error.message}`);\r\n      throw new RepositoryError(`Error retrieving user connection: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   findExistingConnection = async(requesterId: string, recipientId: string): Promise<IUserConnection | null> =>{\r\n    try {\r\n      logger.debug(`Checking for existing connection: requester=${requesterId}, recipient=${recipientId}`);\r\n      return await this.model\r\n        .findOne({\r\n          requester: this.toObjectId(requesterId),\r\n          recipient: this.toObjectId(recipientId),\r\n          requestStatus: 'Pending',\r\n        })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error checking existing connection: ${error.message}`);\r\n      throw new RepositoryError(`Error checking existing connection: ${error.message}`);\r\n    }\r\n  }\r\n}"]}