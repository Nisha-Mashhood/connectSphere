{"version":3,"file":"userCollaborationController.js","sourceRoot":"","sources":["../../../../src/Modules/UserCollaboration/Controllers/userCollaborationController.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,wCAAwC,CAAC;AAC/E,OAAO,MAAM,MAAM,+BAA+B,CAAC;AAEnD,MAAM,OAAO,wBAAwB;IAC3B,qBAAqB,CAAwB;IAErD;QACE,IAAI,CAAC,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,GAAY,EAAE,GAAa;QAC3C,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACvC,MAAM,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,yCAAyC,WAAW,eAAe,WAAW,EAAE,CAAC,CAAC;YAC/F,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,yBAAyB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAC3G,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,yBAAyB;gBAClC,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,mCAAmC;aAC9D,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,GAAY,EAAE,GAAa;QAChD,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACpC,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,kDAAkD,YAAY,YAAY,MAAM,EAAE,CAAC,CAAC;YACjG,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACjG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,WAAW,MAAM,CAAC,WAAW,EAAE,EAAE;gBAC1C,IAAI,EAAE,MAAM;aACb,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,yCAAyC;aACpE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,GAAY,EAAE,GAAa;QACpD,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACpC,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,0CAA0C,YAAY,EAAE,CAAC,CAAC;YACvE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACjG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,yBAAyB;gBAClC,IAAI,EAAE,YAAY;aACnB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,kCAAkC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,iCAAiC;aAC5D,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,GAAY,EAAE,GAAa;QAClD,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,kCAAkC,MAAM,EAAE,CAAC,CAAC;YACzD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAClF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qBAAqB;gBAC9B,IAAI,EAAE,WAAW;aAClB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,gCAAgC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,6BAA6B;aACxD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,GAAY,EAAE,GAAa;QAC/C,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;YAC3D,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACtG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,oCAAoC;gBAC7C,IAAI,EAAE,EAAE,YAAY,EAAE,gBAAgB,EAAE;aACzC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,6BAA6B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,+BAA+B;aAC1D,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,IAAa,EAAE,GAAa;QACtD,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YAC9C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE,CAAC;YAC/E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,8BAA8B;gBACvC,IAAI,EAAE,WAAW;aAClB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACjE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,sCAAsC;aACjE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAY,EAAE,GAAa;QACrD,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,mCAAmC,YAAY,EAAE,CAAC,CAAC;YAChE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;YAC1F,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,yBAAyB;gBAClC,IAAI,EAAE,UAAU;aACjB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACjE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,iCAAiC;aAC5D,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF","sourcesContent":["import { Request, Response } from 'express';\r\nimport { UserConnectionService } from '../Service/UserCollaboartionService.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\n\r\nexport class UserConnectionController {\r\n  private userConnectionService: UserConnectionService;\r\n\r\n  constructor() {\r\n    this.userConnectionService = new UserConnectionService();\r\n  }\r\n\r\n  async sendRequest(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id: requesterId } = req.params;\r\n      const { recipientId } = req.body;\r\n      logger.debug(`Sending connection request: requester=${requesterId}, recipient=${recipientId}`);\r\n      const newConnection = await this.userConnectionService.sendUserConnectionRequest(requesterId, recipientId);\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Connection request sent',\r\n        data: newConnection,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in sendRequest: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to send connection request',\r\n      });\r\n    }\r\n  }\r\n\r\n  async respondToRequest(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { connectionId } = req.params;\r\n      const { action } = req.body;\r\n      logger.debug(`Responding to connection request: connectionId=${connectionId}, action=${action}`);\r\n      const result = await this.userConnectionService.respondToConnectionRequest(connectionId, action);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Request ${action.toLowerCase()}`,\r\n        data: result,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in respondToRequest: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to respond to connection request',\r\n      });\r\n    }\r\n  }\r\n\r\n  async disconnectConnection(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { connectionId } = req.params;\r\n      const { reason } = req.body;\r\n      logger.debug(`Disconnecting connection: connectionId=${connectionId}`);\r\n      const disconnected = await this.userConnectionService.disconnectConnection(connectionId, reason);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Connection disconnected',\r\n        data: disconnected,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in disconnectConnection: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to disconnect connection',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getUserConnections(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { userId } = req.params;\r\n      logger.debug(`Fetching connections for user: ${userId}`);\r\n      const connections = await this.userConnectionService.fetchUserConnections(userId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Connections fetched',\r\n        data: connections,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in getUserConnections: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch connections',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getUserRequests(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { userId } = req.params;\r\n      logger.debug(`Fetching user requests for user: ${userId}`);\r\n      const { sentRequests, receivedRequests } = await this.userConnectionService.fetchUserRequests(userId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'User requests fetched successfully',\r\n        data: { sentRequests, receivedRequests },\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in getUserRequests: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch user requests',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getAllUserConnections(_req: Request, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug('Fetching all user connections');\r\n      const connections = await this.userConnectionService.fetchAllUserConnections();\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'All user connections fetched',\r\n        data: connections,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in getAllUserConnections: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch all user connections',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getUserConnectionById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { connectionId } = req.params;\r\n      logger.debug(`Fetching user connection by ID: ${connectionId}`);\r\n      const connection = await this.userConnectionService.fetchUserConnectionById(connectionId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'User connection fetched',\r\n        data: connection,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error in getUserConnectionById: ${error.message}`);\r\n      res.status(404).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch user connection',\r\n      });\r\n    }\r\n  }\r\n}"]}