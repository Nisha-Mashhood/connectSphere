{"version":3,"file":"UserCollaboartionService.js","sourceRoot":"","sources":["../../../../src/Modules/UserCollaboration/Service/UserCollaboartionService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uCAAuC,CAAC;AACpE,OAAO,EAAE,YAAY,EAAE,MAAM,qCAAqC,CAAC;AACnE,OAAO,MAAM,MAAM,+BAA+B,CAAC;AACnD,OAAO,EAAE,wBAAwB,EAAE,MAAM,4CAA4C,CAAC;AACtF,OAAO,EAAE,iBAAiB,EAAE,MAAM,6CAA6C,CAAC;AAGhF,MAAM,OAAO,qBAAsB,SAAQ,WAAW;IAC5C,kBAAkB,CAA2B;IAC7C,WAAW,CAAoB;IAEvC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,kBAAkB,GAAG,IAAI,wBAAwB,EAAE,CAAC;QACzD,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,EAAE,CAAC;IAC7C,CAAC;IAEA,yBAAyB,GAAG,KAAK,EAAC,WAAmB,EAAE,WAAmB,EAA4B,EAAE;QACvG,MAAM,CAAC,KAAK,CAAC,yCAAyC,WAAW,eAAe,WAAW,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;QAE7C,IAAI,WAAW,KAAK,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC3D,MAAM,IAAI,YAAY,CAAC,kDAAkD,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAC1G,IAAI,kBAAkB,EAAE,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC,6CAA6C,WAAW,eAAe,WAAW,EAAE,CAAC,CAAC;YACnG,MAAM,IAAI,YAAY,CAAC,gDAAgD,CAAC,CAAC;QAC3E,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACtF,CAAC,CAAA;IAEA,0BAA0B,GAAE,KAAK,EAAC,YAAoB,EAAE,MAA+B,EAAgB,EAAE;QACxG,MAAM,CAAC,KAAK,CAAC,kDAAkD,YAAY,YAAY,MAAM,EAAE,CAAC,CAAC;QACjG,IAAI,CAAC,SAAS,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;QAEzC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACzG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,MAAM,CAAC,KAAK,CAAC,sCAAsC,YAAY,EAAE,CAAC,CAAC;YACnE,MAAM,IAAI,YAAY,CAAC,sBAAsB,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,MAAM,KAAK,UAAU,EAAE,CAAC;YAC1B,MAAM,WAAW,GAAG,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC3D,MAAM,WAAW,GAAG,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC3D,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC7C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;oBAC7B,MAAM,EAAE,WAAW;oBACnB,YAAY,EAAE,WAAW;oBACzB,gBAAgB,EAAE,YAAY;oBAC9B,IAAI,EAAE,WAAW;iBAClB,CAAC;gBACF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;oBAC7B,MAAM,EAAE,WAAW;oBACnB,YAAY,EAAE,WAAW;oBACzB,gBAAgB,EAAE,YAAY;oBAC9B,IAAI,EAAE,WAAW;iBAClB,CAAC;aACH,CAAC,CAAC;YACH,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC;QAC/D,CAAC;QAED,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC/B,CAAC,CAAA;IAEA,oBAAoB,GAAE,KAAK,EAAC,YAAoB,EAAE,MAAc,EAAmC,EAAE;QACpG,MAAM,CAAC,KAAK,CAAC,0CAA0C,YAAY,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,SAAS,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;QACzC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IACtF,CAAC,CAAA;IAEA,oBAAoB,GAAG,KAAK,EAAC,MAAc,EAA8B,EAAE;QAC1E,MAAM,CAAC,KAAK,CAAC,kCAAkC,MAAM,EAAE,CAAC,CAAC;QACzD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC,CAAA;IAEA,iBAAiB,GAAG,KAAK,EAAC,MAAc,EAAqF,EAAE;QAC9H,MAAM,CAAC,KAAK,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC,CAAA;IAEA,uBAAuB,GAAG,KAAK,IAA+B,EAAE;QAC/D,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC9C,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,CAAC;IAC/D,CAAC,CAAA;IAEA,uBAAuB,GAAG,KAAK,EAAC,YAAoB,EAAoC,EAAE;QACzF,MAAM,CAAC,KAAK,CAAC,mCAAmC,YAAY,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC7B,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAC3E,CAAC,CAAA;CACF","sourcesContent":["import { BaseService } from '../../../core/Services/BaseService.js';\r\nimport { ServiceError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { UserConnectionRepository } from '../Repositry/UserCollaborationRepositry.js';\r\nimport { ContactRepository } from '../../Contact/Repositry/ContactRepositry.js';\r\nimport { IUserConnection } from '../../../Interfaces/models/IUserConnection.js';\r\n\r\nexport class UserConnectionService extends BaseService {\r\n  private userConnectionRepo: UserConnectionRepository;\r\n  private contactRepo: ContactRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.userConnectionRepo = new UserConnectionRepository();\r\n    this.contactRepo = new ContactRepository();\r\n  }\r\n\r\n   sendUserConnectionRequest = async(requesterId: string, recipientId: string): Promise<IUserConnection> =>{\r\n    logger.debug(`Sending connection request: requester=${requesterId}, recipient=${recipientId}`);\r\n    this.checkData({ requesterId, recipientId });\r\n\r\n    if (requesterId === recipientId) {\r\n      logger.error('Attempt to send connection request to self');\r\n      throw new ServiceError('You cannot send a connection request to yourself');\r\n    }\r\n\r\n    const existingConnection = await this.userConnectionRepo.findExistingConnection(requesterId, recipientId);\r\n    if (existingConnection) {\r\n      logger.error(`Pending request already exists: requester=${requesterId}, recipient=${recipientId}`);\r\n      throw new ServiceError('A pending request already exists for this user');\r\n    }\r\n\r\n    return await this.userConnectionRepo.createUserConnection(requesterId, recipientId);\r\n  }\r\n\r\n   respondToConnectionRequest =async(connectionId: string, action: 'Accepted' | 'Rejected'): Promise<any> =>{\r\n    logger.debug(`Responding to connection request: connectionId=${connectionId}, action=${action}`);\r\n    this.checkData({ connectionId, action });\r\n\r\n    const updatedConnection = await this.userConnectionRepo.updateUserConnectionStatus(connectionId, action);\r\n    if (!updatedConnection) {\r\n      logger.error(`Connection not found: connectionId=${connectionId}`);\r\n      throw new ServiceError('Connection not found');\r\n    }\r\n\r\n    if (action === 'Accepted') {\r\n      const requesterId = updatedConnection.requester.toString();\r\n      const recipientId = updatedConnection.recipient.toString();\r\n      const [contact1, contact2] = await Promise.all([\r\n        this.contactRepo.createContact({\r\n          userId: requesterId,\r\n          targetUserId: recipientId,\r\n          userConnectionId: connectionId,\r\n          type: 'user-user',\r\n        }),\r\n        this.contactRepo.createContact({\r\n          userId: recipientId,\r\n          targetUserId: requesterId,\r\n          userConnectionId: connectionId,\r\n          type: 'user-user',\r\n        }),\r\n      ]);\r\n      return { updatedConnection, contacts: [contact1, contact2] };\r\n    }\r\n\r\n    return { updatedConnection };\r\n  }\r\n\r\n   disconnectConnection= async(connectionId: string, reason: string): Promise<IUserConnection | null> =>{\r\n    logger.debug(`Disconnecting connection: connectionId=${connectionId}`);\r\n    this.checkData({ connectionId, reason });\r\n    return await this.userConnectionRepo.disconnectUserConnection(connectionId, reason);\r\n  }\r\n\r\n   fetchUserConnections = async(userId: string): Promise<IUserConnection[]> => {\r\n    logger.debug(`Fetching connections for user: ${userId}`);\r\n    this.checkData(userId);\r\n    return await this.userConnectionRepo.getUserConnections(userId);\r\n  }\r\n\r\n   fetchUserRequests = async(userId: string): Promise<{ sentRequests: IUserConnection[]; receivedRequests: IUserConnection[] }> =>{\r\n    logger.debug(`Fetching user requests for user: ${userId}`);\r\n    this.checkData(userId);\r\n    return await this.userConnectionRepo.getUserRequests(userId);\r\n  }\r\n\r\n   fetchAllUserConnections = async(): Promise<IUserConnection[]> =>{\r\n    logger.debug('Fetching all user connections');\r\n    return await this.userConnectionRepo.getAllUserConnections();\r\n  }\r\n\r\n   fetchUserConnectionById = async(connectionId: string): Promise<IUserConnection  | null> =>{\r\n    logger.debug(`Fetching user connection by ID: ${connectionId}`);\r\n    this.checkData(connectionId);\r\n    return await this.userConnectionRepo.getUserConnectionById(connectionId);\r\n  }\r\n}"]}