{"version":3,"file":"SubCategoryService.js","sourceRoot":"","sources":["../../../../src/Modules/Subcategory/Service/SubCategoryService.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseService } from \"../../../core/Services/BaseService.js\";\r\nimport { SkillsRepository } from \"../../Skills/Repositry/SkillsRepositry.js\";\r\nimport { SubcategoryRepository } from \"../Repositry/SubCategoryRepositry.js\";\r\nimport { SubcategoryInterface as ISubcategory } from \"../../../Interfaces/models/SubcategoryInterface.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport { uploadMedia } from \"../../../core/Utils/Cloudinary.js\";\r\nimport { ServiceError } from \"../../../core/Utils/ErrorHandler.js\";\r\n\r\nexport class SubcategoryService extends BaseService {\r\n  private subcategoryRepo: SubcategoryRepository;\r\n  private skillsRepo: SkillsRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.subcategoryRepo = new SubcategoryRepository();\r\n    this.skillsRepo = new SkillsRepository();\r\n  }\r\n\r\n   createSubcategory = async(data: Partial<ISubcategory>, imagePath?: string, fileSize?: number): Promise<ISubcategory> =>{\r\n    try {\r\n      this.checkData(data);\r\n      logger.debug(`Creating subcategory: ${data.name} for category ${data.categoryId}`);\r\n      let imageUrl: string | null = null;\r\n      if (imagePath) {\r\n        const folder = 'sub-categories';\r\n        const { url } = await uploadMedia(imagePath, folder, fileSize);\r\n        imageUrl = url;\r\n        logger.info(`Uploaded image for subcategory: ${imageUrl}`);\r\n      }\r\n      const subcategory = await this.subcategoryRepo.createSubcategory({ ...data, imageUrl });\r\n      logger.info(`Subcategory created: ${subcategory._id} (${subcategory.name})`);\r\n      return subcategory;\r\n    } catch (error) {\r\n      logger.error(`Error creating subcategory: ${error}`);\r\n      throw new ServiceError(`Failed to create subcategory: ${error}`);\r\n    }\r\n  }\r\n\r\n   getAllSubcategories = async(categoryId: string): Promise<ISubcategory[]> =>{\r\n    try {\r\n      logger.debug(`Fetching subcategories for category: ${categoryId}`);\r\n      const subcategories = await this.subcategoryRepo.getAllSubcategories(categoryId);\r\n      logger.info(`Fetched ${subcategories.length} subcategories`);\r\n      return subcategories;\r\n    } catch (error) {\r\n      logger.error(`Error fetching subcategories for category ${categoryId}: ${error}`);\r\n      throw new ServiceError(`Failed to fetch subcategories: ${error}`);\r\n    }\r\n  }\r\n\r\n   getSubcategoryById = async(id: string): Promise<ISubcategory | null> =>{\r\n    try {\r\n      logger.debug(`Fetching subcategory: ${id}`);\r\n      const subcategory = await this.subcategoryRepo.getSubcategoryById(id);\r\n      if (!subcategory) {\r\n        logger.warn(`Subcategory not found: ${id}`);\r\n      } else {\r\n        logger.info(`Subcategory fetched: ${id} (${subcategory.name})`);\r\n      }\r\n      return subcategory;\r\n    } catch (error) {\r\n      logger.error(`Error fetching subcategory ${id}: ${error}`);\r\n      throw new ServiceError(`Failed to fetch subcategory: ${error}`);\r\n    }\r\n  }\r\n\r\n   updateSubcategory = async(id: string, data: Partial<ISubcategory>, imagePath?: string, fileSize?: number): Promise<ISubcategory | null> =>{\r\n    try {\r\n      this.checkData(data);\r\n      logger.debug(`Updating subcategory: ${id}`);\r\n      let imageUrl: string | null = null;\r\n      if (imagePath) {\r\n        const folder = 'sub-categories';\r\n        const { url } = await uploadMedia(imagePath, folder, fileSize);\r\n        imageUrl = url;\r\n        logger.info(`Uploaded image for subcategory: ${imageUrl}`);\r\n      }\r\n      const subcategory = await this.subcategoryRepo.updateSubcategory(id, { ...data, ...(imageUrl && { imageUrl }) });\r\n      if (!subcategory) {\r\n        logger.warn(`Subcategory not found for update: ${id}`);\r\n        this.throwError(`Subcategory not found: ${id}`);\r\n      }\r\n      logger.info(`Subcategory updated: ${id} (${subcategory?.name})`);\r\n      return subcategory;\r\n    } catch (error) {\r\n      logger.error(`Error updating subcategory ${id}: ${error}`);\r\n      throw new ServiceError(`Failed to update subcategory: ${error}`);\r\n    }\r\n  }\r\n\r\n   deleteSubcategory = async(id: string): Promise<ISubcategory | null> =>{\r\n    try {\r\n      logger.debug(`Deleting subcategory: ${id}`);\r\n      await this.skillsRepo.deleteManySkillsBySubcategoryId(id);\r\n      logger.info(`Deleted skills for subcategory: ${id}`);\r\n      const subcategory = await this.subcategoryRepo.deleteSubcategory(id);\r\n      if (!subcategory) {\r\n        logger.warn(`Subcategory not found for deletion: ${id}`);\r\n        this.throwError(`Subcategory not found: ${id}`);\r\n      }\r\n      logger.info(`Subcategory deleted: ${id} (${subcategory?.name})`);\r\n      return subcategory;\r\n    } catch (error) {\r\n      logger.error(`Error deleting subcategory ${id}: ${error}`);\r\n      throw new ServiceError(`Failed to delete subcategory and related data: ${error}`);\r\n    }\r\n  }\r\n}"]}