{"version":3,"file":"ContactUsController.js","sourceRoot":"","sources":["../../../../src/Modules/ContactUs/Controllers/ContactUsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { ContactMessageService } from '../Service/ContactUsService.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\n\r\nexport class ContactMessageController {\r\n  private contactMessageService: ContactMessageService;\r\n\r\n  constructor() {\r\n    this.contactMessageService = new ContactMessageService();\r\n  }\r\n\r\n  async createContactMessage(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, email, message } = req.body;\r\n      logger.debug(`Creating contact message from: ${email}`);\r\n      if (!name || !email || !message) {\r\n        logger.error('Missing required fields: name, email, or message');\r\n        throw new Error('Missing required fields: name, email, or message');\r\n      }\r\n      const contactMessage = await this.contactMessageService.createContactMessage({ name, email, message });\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Contact message sent and saved successfully',\r\n        data: contactMessage,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating contact message: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to process contact message',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getAllContactMessages(_req: Request, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug('Fetching all contact messages');\r\n      const messages = await this.contactMessageService.getAllContactMessages();\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contact messages fetched successfully',\r\n        data: messages,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching contact messages: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch contact messages',\r\n      });\r\n    }\r\n  }\r\n\r\n  async sendReply(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { contactMessageId } = req.params;\r\n      const { email, replyMessage } = req.body;\r\n      logger.debug(`Sending reply for contact message: ${contactMessageId}`);\r\n      if (!email || !replyMessage) {\r\n        logger.error('Missing required fields: email or replyMessage');\r\n        throw new Error('Missing required fields: email or replyMessage');\r\n      }\r\n      const updatedMessage = await this.contactMessageService.sendReply(contactMessageId, { email, replyMessage });\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Reply sent successfully',\r\n        data: updatedMessage,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error sending reply: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to send reply',\r\n      });\r\n    }\r\n  }\r\n}"]}