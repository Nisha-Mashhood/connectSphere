{"version":3,"file":"ContactUsService.js","sourceRoot":"","sources":["../../../../src/Modules/ContactUs/Service/ContactUsService.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseService } from '../../../core/Services/BaseService.js';\r\nimport { ServiceError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { ContactMessageRepository } from '../Repositry/ContactUsRepositry.js';\r\nimport { IContactMessage } from '../../../Interfaces/models/IContactMessage.js';\r\nimport { sendEmail } from '../../../core/Utils/Email.js';\r\nimport config from '../../../config/env.config.js';\r\n\r\nexport class ContactMessageService extends BaseService {\r\n  private contactMessageRepo: ContactMessageRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.contactMessageRepo = new ContactMessageRepository();\r\n  }\r\n\r\n  async createContactMessage(data: { name: string; email: string; message: string }): Promise<IContactMessage> {\r\n    try {\r\n      logger.debug(`Creating contact message from: ${data.email}`);\r\n      this.checkData(data);\r\n\r\n      const ReceiverEmail = config.adminEmail;\r\n      if (!ReceiverEmail) {\r\n        logger.error('Receiver email not configured');\r\n        throw new ServiceError('Receiver email required');\r\n      }\r\n\r\n      const contactMessage = await this.contactMessageRepo.createContactMessage(data);\r\n\r\n      const emailText = `New Contact Message\\n\\nName: ${data.name}\\nEmail: ${data.email}\\nMessage: ${data.message}\\n\\nSent at: ${new Date().toLocaleString()}`;\r\n      await sendEmail(ReceiverEmail, 'New Contact Message from ConnectSphere', emailText);\r\n\r\n      return contactMessage;\r\n    } catch (error: any) {\r\n      logger.error(`Error processing contact message: ${error.message}`);\r\n      throw new ServiceError(`Error processing contact message: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getAllContactMessages(): Promise<IContactMessage[]> {\r\n    try {\r\n      logger.debug('Fetching all contact messages');\r\n      return await this.contactMessageRepo.getAllContactMessages();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching contact messages: ${error.message}`);\r\n      throw new ServiceError(`Error fetching contact messages: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async sendReply(contactMessageId: string, replyData: { email: string; replyMessage: string }): Promise<IContactMessage> {\r\n    try {\r\n      logger.debug(`Sending reply for contact message: ${contactMessageId}`);\r\n      this.checkData({ contactMessageId, ...replyData });\r\n\r\n      const updatedMessage = await this.contactMessageRepo.updateReplyStatus(contactMessageId);\r\n\r\n      await sendEmail(\r\n        replyData.email,\r\n        'Reply from ConnectSphere',\r\n        `Hello ${updatedMessage.name},\\n\\n${replyData.replyMessage}\\n\\nBest regards,\\nConnectSphere Team`\r\n      );\r\n\r\n      return updatedMessage;\r\n    } catch (error: any) {\r\n      logger.error(`Error sending reply: ${error.message}`);\r\n      throw new ServiceError(`Error sending reply: ${error.message}`);\r\n    }\r\n  }\r\n}"]}