{"version":3,"file":"FeedBackRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Feedback/Repositry/FeedBackRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Types } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport Feedback from '../../../models/feedback.modal.js';\r\nimport { IFeedback } from '../../../Interfaces/models/IFeedback.js';\r\n\r\nexport class FeedbackRepository extends BaseRepository<IFeedback> {\r\n  constructor() {\r\n    super(Feedback as Model<IFeedback>);\r\n  }\r\n\r\n  private toObjectId(id: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = typeof id === 'string' ? id : id.toString();\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n  async createFeedback(feedbackData: Partial<IFeedback>): Promise<IFeedback> {\r\n    try {\r\n      logger.debug(`Creating feedback for collaboration: ${feedbackData.collaborationId}`);\r\n      return await this.create({\r\n        ...feedbackData,\r\n        userId: feedbackData.userId ? this.toObjectId(feedbackData.userId) : undefined,\r\n        mentorId: feedbackData.mentorId ? this.toObjectId(feedbackData.mentorId) : undefined,\r\n        collaborationId: feedbackData.collaborationId ? this.toObjectId(feedbackData.collaborationId) : undefined,\r\n        createdAt: new Date(),\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating feedback: ${error.message}`);\r\n      throw new RepositoryError(`Error creating feedback: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getFeedbacksByMentorId(mentorId: string): Promise<IFeedback[]> {\r\n    try {\r\n      logger.debug(`Fetching feedbacks for mentor: ${mentorId}`);\r\n      return await this.model\r\n        .find({ mentorId: this.toObjectId(mentorId) })\r\n        .populate('userId', 'name email profilePic')\r\n        .sort({ createdAt: -1 })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching feedbacks by mentor ID: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching feedbacks by mentor ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getFeedbacksByUserId(userId: string): Promise<IFeedback[]> {\r\n    try {\r\n      logger.debug(`Fetching feedbacks for user: ${userId}`);\r\n      return await this.model\r\n        .find({ userId: this.toObjectId(userId) })\r\n        .populate('mentorId', 'name profilePic')\r\n        .sort({ createdAt: -1 })\r\n        .limit(10)\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching feedbacks by user ID: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching feedbacks by user ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getFeedbackByCollaborationId(collaborationId: string): Promise<IFeedback[]> {\r\n    try {\r\n      logger.debug(`Fetching feedbacks for collaboration: ${collaborationId}`);\r\n      return await this.model\r\n        .find({ collaborationId: this.toObjectId(collaborationId) })\r\n        .populate('mentorId', 'name email profilePic')\r\n        .populate('userId', 'name email profilePic')\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching feedbacks by collaboration ID: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching feedbacks by collaboration ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getMentorAverageRating(mentorId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Calculating average rating for mentor: ${mentorId}`);\r\n      const result = await this.model.aggregate([\r\n        { $match: { mentorId: this.toObjectId(mentorId) } },\r\n        {\r\n          $group: {\r\n            _id: null,\r\n            averageRating: { $avg: '$rating' },\r\n            averageCommunication: { $avg: '$communication' },\r\n            averageExpertise: { $avg: '$expertise' },\r\n            averagePunctuality: { $avg: '$punctuality' },\r\n          },\r\n        },\r\n      ]);\r\n      return result[0]?.averageRating || 0;\r\n    } catch (error: any) {\r\n      logger.error(`Error calculating mentor average rating: ${error.message}`);\r\n      throw new RepositoryError(`Error calculating mentor average rating: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getFeedbackForProfile(profileId: string, profileType: 'mentor' | 'user'): Promise<IFeedback[]> {\r\n    try {\r\n      logger.debug(`Fetching feedbacks for profile: ${profileId}, type: ${profileType}`);\r\n      const query =\r\n        profileType === 'mentor'\r\n          ? { mentorId: this.toObjectId(profileId), isHidden: false }\r\n          : { userId: this.toObjectId(profileId), isHidden: false };\r\n\r\n      return await this.model\r\n        .find(query)\r\n        .populate('userId', 'name email profilePic')\r\n        .populate({\r\n          path: 'mentorId',\r\n          populate: {\r\n            path: 'userId',\r\n            select: 'name email profilePic',\r\n          },\r\n        })\r\n        .sort({ createdAt: -1 })\r\n        .limit(5)\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching feedbacks for profile: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching feedbacks for profile: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async toggleIsHidden(feedbackId: string): Promise<IFeedback> {\r\n    try {\r\n      logger.debug(`Toggling isHidden for feedback: ${feedbackId}`);\r\n      const feedback = await this.findById(feedbackId);\r\n      if (!feedback) {\r\n        logger.error(`Feedback not found: ${feedbackId}`);\r\n        throw new RepositoryError(`Feedback with ID ${feedbackId} not found`);\r\n      }\r\n      feedback.isHidden = !feedback.isHidden;\r\n      return await feedback.save();\r\n    } catch (error: any) {\r\n      logger.error(`Error toggling isHidden for feedback: ${error.message}`);\r\n      throw new RepositoryError(`Error toggling isHidden for feedback: ${error.message}`);\r\n    }\r\n  }\r\n}"]}