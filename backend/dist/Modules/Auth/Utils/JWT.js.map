{"version":3,"file":"JWT.js","sourceRoot":"","sources":["../../../../src/Modules/Auth/Utils/JWT.ts"],"names":[],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { Response } from 'express';\r\nimport config from '../../../config/env.config.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { ServiceError } from '../../../core/Utils/ErrorHandler.js';\r\nimport { UserRepository } from '../Repositry/UserRepositry.js';\r\n\r\ninterface JwtPayload {\r\n  [key: string]: any;\r\n}\r\n\r\nexport class AuthService {\r\n  private userRepo: UserRepository;\r\n\r\n  constructor() {\r\n    this.userRepo = new UserRepository();\r\n  }\r\n\r\n  public generateAccessToken = (payload: JwtPayload, expiresIn: string = '1h'): string => {\r\n    if (!config.jwtSecret) {\r\n      logger.error('JWT secret is not defined');\r\n      throw new ServiceError('JWT secret is not defined');\r\n    }\r\n    if (typeof payload !== 'object' || payload === null) {\r\n      logger.error('Payload must be a plain object');\r\n      throw new ServiceError('Payload must be a plain object');\r\n    }\r\n    try {\r\n      const token = jwt.sign(payload, config.jwtSecret, { expiresIn });\r\n      logger.debug(`Generated access token for payload: ${JSON.stringify(payload)}`);\r\n      return token;\r\n    } catch (error: any) {\r\n      logger.error(`Failed to generate access token: ${error.message}`);\r\n      throw new ServiceError(`Failed to generate access token: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public verifyAccessToken = (token: string): JwtPayload => {\r\n    logger.info(`Token Received : ${token}`);\r\n    if (!config.jwtSecret) {\r\n      logger.error('JWT secret is not defined');\r\n      throw new ServiceError('JWT secret is not defined');\r\n    }\r\n    try {\r\n      const payload = jwt.verify(token, config.jwtSecret) as JwtPayload;\r\n      logger.info(`Payload after verification : ${payload}`);\r\n      if(!payload){\r\n        throw new ServiceError('Payload for JWT not verified');\r\n      }\r\n      logger.debug(`Verified access token: ${token}`);\r\n      return payload;\r\n    } catch (error) {\r\n      logger.error(`Invalid or expired access token: ${token}`);\r\n      throw new ServiceError('Invalid or expired access token');\r\n    }\r\n  }\r\n\r\n  public generateRefreshToken = (payload: JwtPayload): string => {\r\n    if (!config.jwtSecret) {\r\n      logger.error('JWT secret is not defined');\r\n      throw new ServiceError('JWT secret is not defined');\r\n    }\r\n    if (typeof payload !== 'object' || payload === null) {\r\n      logger.error('Payload must be a plain object');\r\n      throw new ServiceError('Payload must be a plain object');\r\n    }\r\n    try {\r\n      const token = jwt.sign(payload, config.jwtSecret, { expiresIn: '7d' });\r\n      logger.debug(`Generated refresh token for payload: ${JSON.stringify(payload)}`);\r\n      return token;\r\n    } catch (error: any) {\r\n      logger.error(`Failed to generate refresh token: ${error.message}`);\r\n      throw new ServiceError(`Failed to generate refresh token: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public verifyRefreshToken = (token: string): JwtPayload => {\r\n    if (!config.jwtSecret) {\r\n      logger.error('JWT secret is not defined');\r\n      throw new ServiceError('JWT secret is not defined');\r\n    }\r\n    try {\r\n      const payload = jwt.verify(token, config.jwtSecret) as JwtPayload;\r\n      logger.debug(`Verified refresh token: ${token}`);\r\n      return payload;\r\n    } catch (error) {\r\n      logger.error(`Invalid or expired refresh token: ${token}`);\r\n      throw new ServiceError('Invalid or expired refresh token');\r\n    }\r\n  }\r\n\r\n  public setTokensInCookies = (res: Response, accessToken: string, refreshToken: string): void => {\r\n    const isProduction = config.node_env === 'production';\r\n    try {\r\n      res.cookie('accessToken', accessToken, {\r\n        httpOnly: true,\r\n        secure: isProduction,\r\n        sameSite: isProduction ? 'none' : 'lax',\r\n        maxAge: 60 * 60 * 1000, // 1 hour\r\n      });\r\n      res.cookie('refreshToken', refreshToken, {\r\n        httpOnly: true,\r\n        secure: isProduction,\r\n        sameSite: isProduction ? 'none' : 'lax',\r\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n      });\r\n      logger.debug('Set accessToken and refreshToken in cookies');\r\n    } catch (error: any) {\r\n      logger.error(`Failed to set tokens in cookies: ${error.message}`);\r\n      throw new ServiceError(`Failed to set tokens in cookies: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public clearCookies = (res: Response): void => {\r\n    try {\r\n      res.clearCookie('accessToken', { httpOnly: true, sameSite: 'strict' });\r\n      res.clearCookie('refreshToken', { httpOnly: true, sameSite: 'strict' });\r\n      logger.debug('Cleared accessToken and refreshToken cookies');\r\n    } catch (error: any) {\r\n      logger.error(`Failed to clear cookies: ${error.message}`);\r\n      throw new ServiceError(`Failed to clear cookies: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public removeRefreshToken = async(userEmail: string): Promise<{ message: string }> => {\r\n    try {\r\n      const user = await this.userRepo.findUserByEmail(userEmail);\r\n      if (!user) {\r\n        logger.error(`User not found for email: ${userEmail}`);\r\n        throw new ServiceError('User not found');\r\n      }\r\n      await this.userRepo.removeRefreshToken(userEmail);\r\n      logger.info(`Refresh token removed for user: ${userEmail}`);\r\n      return { message: 'Refresh token removed successfully' };\r\n    } catch (error: any) {\r\n      logger.error(`Error removing refresh token for user ${userEmail}: ${error.message}`);\r\n      throw new ServiceError(`Error removing refresh token: ${error.message}`);\r\n    }\r\n  }\r\n}"]}