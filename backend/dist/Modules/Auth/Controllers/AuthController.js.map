{"version":3,"file":"AuthController.js","sourceRoot":"","sources":["../../../../src/Modules/Auth/Controllers/AuthController.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseController } from './../../../core/Controller/BaseController.js';\r\nimport { AuthService } from '../Service/AuthService.js';\r\nimport { Request, Response } from 'express';\r\nimport { AuthService as JWTService } from  '../Utils/JWT.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { UserInterface as IUser } from '../../../Interfaces/models/IUser.js';\r\n\r\n// Interface for signup request body\r\ninterface SignupRequestBody {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Interface for login request body\r\ninterface LoginRequestBody {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Interface for OAuth request body\r\ninterface OAuthRequestBody {\r\n  code: string;\r\n}\r\n\r\n// Interface for refresh token request body\r\ninterface RefreshTokenRequestBody {\r\n  refreshToken: string;\r\n}\r\n\r\n// Interface for forgot password request body\r\ninterface ForgotPasswordRequestBody {\r\n  email: string;\r\n}\r\n\r\n// Interface for verify OTP request body\r\ninterface VerifyOTPRequestBody {\r\n  email: string;\r\n  otp: string;\r\n}\r\n\r\n// Interface for reset password request body\r\ninterface ResetPasswordRequestBody {\r\n  email: string;\r\n  newPassword: string;\r\n}\r\n\r\n// Interface for logout request body\r\ninterface LogoutRequestBody {\r\n  email: string;\r\n}\r\n\r\n// Interface for verify passkey request body\r\ninterface VerifyPasskeyRequestBody {\r\n  passkey: string;\r\n}\r\n\r\n// Interface for update profile request body\r\ninterface UpdateProfileRequestBody extends Partial<IUser> {\r\n  profilePicFile?: Express.Multer.File;\r\n  coverPicFile?: Express.Multer.File;\r\n}\r\n\r\n// Controller for authentication and user profile endpoints\r\nexport class AuthController extends BaseController {\r\n  private authService: AuthService;\r\n  private jwtService: JWTService;\r\n\r\n  constructor() {\r\n    super();\r\n    this.authService = new AuthService();\r\n    this.jwtService = new JWTService();\r\n  }\r\n\r\n  // Handle user signup\r\n  async signup(req: Request<{}, {}, SignupRequestBody>, res: Response) {\r\n    try {\r\n      const { name, email, password } = req.body;\r\n      logger.debug(`Signup attempt for email: ${email}`);\r\n      if (!name || !email || !password) {\r\n        this.throwError(400, 'Name, email, and password are required');\r\n      }\r\n      const user = await this.authService.signup({ name, email, password });\r\n      this.sendCreated(res, { userId: user._id }, 'User registered successfully');\r\n      logger.info(`User registered: ${user.userId} (${email})`);\r\n    } catch (error) {\r\n      logger.error(`Error in signup for email ${req.body.email || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle user login\r\n  async login(req: Request<{}, {}, LoginRequestBody>, res: Response) {\r\n    try {\r\n      const { email, password } = req.body;\r\n      logger.debug(`Login attempt for email: ${email}`);\r\n      if (!email || !password) {\r\n        this.throwError(400, 'Email and password are required');\r\n      }\r\n      const { user, accessToken, refreshToken, needsReviewPrompt } = await this.authService.login(email, password);\r\n      this.jwtService.setTokensInCookies(res, accessToken, refreshToken);\r\n      this.sendSuccess(res, { user, needsReviewPrompt }, 'Login successful');\r\n      logger.info(`User logged in: ${user.userId} (${email})`);\r\n    } catch (error) {\r\n      logger.error(`Error in login for email ${req.body.email || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle Google signup\r\n  async googleSignup(req: Request<{}, {}, OAuthRequestBody>, res: Response) {\r\n    try {\r\n      const { code } = req.body;\r\n      logger.debug(`Google signup attempt with code: ${code}`);\r\n      if (!code) {\r\n        this.throwError(400, 'Authorization code is required');\r\n      }\r\n      const user = await this.authService.googleSignup(code);\r\n      this.sendCreated(res, { userId: user._id }, 'User signed up successfully');\r\n      logger.info(`Google signup completed for user: ${user.userId} (${user.email})`);\r\n    } catch (error) {\r\n      logger.error(`Error in Google signup: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle Google login\r\n  async googleLogin(req: Request<{}, {}, OAuthRequestBody>, res: Response) {\r\n    try {\r\n      const { code } = req.body;\r\n      logger.debug(`Google login attempt with code: ${code}`);\r\n      if (!code) {\r\n        this.throwError(400, 'Authorization code is required');\r\n      }\r\n      const { user, accessToken, refreshToken, needsReviewPrompt } = await this.authService.googleLogin(code);\r\n      this.jwtService.setTokensInCookies(res, accessToken, refreshToken);\r\n      this.sendSuccess(res, { user, accessToken, refreshToken, needsReviewPrompt }, 'Google login successful');\r\n      logger.info(`Google login completed for user: ${user.userId} (${user.email})`);\r\n    } catch (error) {\r\n      logger.error(`Error in Google login: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle GitHub signup\r\n  async githubSignup(req: Request<{}, {}, OAuthRequestBody>, res: Response) {\r\n    try {\r\n      const { code } = req.body;\r\n      logger.debug(`GitHub signup attempt with code: ${code}`);\r\n      if (!code) {\r\n        this.throwError(400, 'Authorization code is required');\r\n      }\r\n      const user = await this.authService.githubSignup(code);\r\n      this.sendCreated(res, { userId: user._id }, 'User signed up successfully');\r\n      logger.info(`GitHub signup completed for user: ${user.userId} (${user.email})`);\r\n    } catch (error) {\r\n      logger.error(`Error in GitHub signup: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle GitHub login\r\n  async githubLogin(req: Request<{}, {}, OAuthRequestBody>, res: Response) {\r\n    try {\r\n      const { code } = req.body;\r\n      logger.debug(`GitHub login attempt with code: ${code}`);\r\n      if (!code) {\r\n        this.throwError(400, 'Authorization code is required');\r\n      }\r\n      const { user, accessToken, refreshToken, needsReviewPrompt } = await this.authService.githubLogin(code);\r\n      this.jwtService.setTokensInCookies(res, accessToken, refreshToken);\r\n      this.sendSuccess(res, { user, accessToken, refreshToken, needsReviewPrompt }, 'GitHub login successful');\r\n      logger.info(`GitHub login completed for user: ${user.userId} (${user.email})`);\r\n    } catch (error) {\r\n      logger.error(`Error in GitHub login: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle refresh token\r\n  async refreshToken(req: Request<{}, {}, RefreshTokenRequestBody>, res: Response) {\r\n    try {\r\n      const { refreshToken } = req.body;\r\n      logger.debug(`Refresh token attempt`);\r\n      if (!refreshToken) {\r\n        this.throwError(400, 'Refresh token is required');\r\n      }\r\n      const { newAccessToken } = await this.authService.refreshToken(refreshToken);\r\n      this.sendSuccess(res, { newAccessToken }, 'Access token refreshed');\r\n      logger.info(`Access token refreshed`);\r\n    } catch (error) {\r\n      logger.error(`Error in refresh token: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Check profile completion\r\n  async checkProfile(req: Request<{ id: string }>, res: Response) {\r\n    try {\r\n      const userId = req.params.id;\r\n      logger.debug(`Checking profile completion for userId: ${userId}`);\r\n      if (!userId) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      const isComplete = await this.authService.checkProfileCompletion(userId);\r\n      this.sendSuccess(res, { isProfileComplete: isComplete }, 'Profile completion checked');\r\n      logger.info(`Profile completion checked for userId: ${userId}: ${isComplete}`);\r\n    } catch (error) {\r\n      logger.error(`Error checking profile for userId ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Get profile details\r\n  async getProfileDetails(req: Request<{ id: string }>, res: Response) {\r\n    try {\r\n      const userId = req.params.id;\r\n      logger.debug(`Fetching profile details for userId: ${userId}`);\r\n      if (!userId) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      const userDetails = await this.authService.profileDetails(userId);\r\n      this.sendSuccess(res, { userDetails }, 'Profile details accessed successfully');\r\n      logger.info(`Profile details fetched for userId: ${userId}`);\r\n    } catch (error) {\r\n      logger.error(`Error fetching profile details for userId ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Update user profile\r\n  async updateUserDetails(req: Request<{ id: string }, {}, UpdateProfileRequestBody>, res: Response) {\r\n    try {\r\n      const userId = req.params.id;\r\n      logger.debug(`Updating profile for userId: ${userId}`);\r\n      if (!userId) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      const data: UpdateProfileRequestBody = req.body;\r\n      const profilePicFile = (req.files as { [fieldname: string]: Express.Multer.File[] })?.['profilePic']?.[0];\r\n      const coverPicFile = (req.files as { [fieldname: string]: Express.Multer.File[] })?.['coverPic']?.[0];\r\n      if (profilePicFile) data.profilePicFile = profilePicFile;\r\n      if (coverPicFile) data.coverPicFile = coverPicFile;\r\n      const updatedUser = await this.authService.updateUserProfile(userId, data);\r\n      this.sendSuccess(res, { user: updatedUser }, 'Profile updated successfully');\r\n      logger.info(`Profile updated for userId: ${userId}`);\r\n    } catch (error) {\r\n      logger.error(`Error updating profile for userId ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle logout\r\n  async logout(req: Request<{}, {}, LogoutRequestBody>, res: Response) {\r\n    try {\r\n      const { email } = req.body;\r\n      logger.debug(`Logout attempt for email: ${email}`);\r\n      if (!email) {\r\n        this.throwError(400, 'Email is required');\r\n      }\r\n      await this.authService.logout(email);\r\n      this.jwtService.clearCookies(res);\r\n      this.sendSuccess(res, {}, 'Logged out successfully');\r\n      logger.info(`User logged out: ${email}`);\r\n    } catch (error) {\r\n      logger.error(`Error in logout for email ${req.body.email || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle forgot password\r\n  async handleForgotPassword(req: Request<{}, {}, ForgotPasswordRequestBody>, res: Response) {\r\n    try {\r\n      const { email } = req.body;\r\n      logger.debug(`Forgot password request for email: ${email}`);\r\n      if (!email) {\r\n        this.throwError(400, 'Email is required');\r\n      }\r\n      const otp = await this.authService.forgotPassword(email);\r\n      this.sendSuccess(res, { otp }, 'OTP sent to email'); //change during deployement\r\n      logger.info(`OTP sent to email: ${email}`);\r\n    } catch (error) {\r\n      logger.error(`Error in forgot password for email ${req.body.email || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle verify OTP\r\n  async handleVerifyOTP(req: Request<{}, {}, VerifyOTPRequestBody>, res: Response) {\r\n    try {\r\n      const { email, otp } = req.body;\r\n      logger.debug(`Verify OTP attempt for email: ${email}`);\r\n      if (!email || !otp) {\r\n        this.throwError(400, 'Email and OTP are required');\r\n      }\r\n      const token = await this.authService.verifyOTP(email, otp);\r\n      this.sendSuccess(res, { token }, 'OTP verified');\r\n      logger.info(`OTP verified for email: ${email}`);\r\n    } catch (error) {\r\n      logger.error(`Error verifying OTP for email ${req.body.email || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Handle reset password\r\n  async handleResetPassword(req: Request<{}, {}, ResetPasswordRequestBody>, res: Response) {\r\n    try {\r\n      const { email, newPassword } = req.body;\r\n      logger.debug(`Reset password attempt for email: ${email}`);\r\n      if (!email || !newPassword) {\r\n        this.throwError(400, 'Email and new password are required');\r\n      }\r\n      await this.authService.resetPassword(email, newPassword);\r\n      this.sendSuccess(res, {}, 'Password reset successfully');\r\n      logger.info(`Password reset for email: ${email}`);\r\n    } catch (error) {\r\n      logger.error(`Error resetting password for email ${req.body.email || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  // Verify admin passkey\r\n  async verifyPasskey(req: Request<{}, {}, VerifyPasskeyRequestBody>, res: Response) {\r\n    try {\r\n      const { passkey } = req.body;\r\n      logger.debug(`Verify admin passkey attempt`);\r\n      if (!passkey) {\r\n        this.throwError(400, 'Passkey is required');\r\n      }\r\n      const isValid = await this.authService.verifyAdminPasskey(passkey);\r\n      this.sendSuccess(res, { valid: isValid }, 'Passkey verification completed');\r\n      logger.info(`Admin passkey verification: ${isValid}`);\r\n    } catch (error) {\r\n      logger.error(`Error verifying admin passkey: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  //get all User Details\r\n  async getAllUsers(_req: Request, res: Response) {\r\n    try {\r\n      logger.debug(`Fetching all users`);\r\n      const users = await this.authService.getAllUsers();\r\n      this.sendSuccess(res, { users }, 'Users retrieved successfully');\r\n      logger.info(`Fetched all users`);\r\n    } catch (error) {\r\n      logger.error(`Error fetching all users: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  //get user Deatils by Id\r\n  async getUserById(req: Request<{ id: string }>, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      logger.debug(`Fetching user by ID: ${id}`);\r\n      if (!id) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      const user = await this.authService.profileDetails(id);\r\n      this.sendSuccess(res, { user }, 'User retrieved successfully');\r\n      logger.info(`Fetched user: ${id}`);\r\n    } catch (error) {\r\n      logger.error(`Error fetching user ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  //Block teh given User\r\n  async blockUser(req: Request<{ id: string }>, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      logger.debug(`Blocking user: ${id}`);\r\n      if (!id) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      await this.authService.blockUser(id);\r\n      this.sendSuccess(res, {}, 'User blocked successfully');\r\n      logger.info(`Blocked user: ${id}`);\r\n    } catch (error) {\r\n      logger.error(`Error blocking user ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  //Unblock the given user\r\n  async unblockUser(req: Request<{ id: string }>, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      logger.debug(`Unblocking user: ${id}`);\r\n      if (!id) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      await this.authService.unblockUser(id);\r\n      this.sendSuccess(res, {}, 'User unblocked successfully');\r\n      logger.info(`Unblocked user: ${id}`);\r\n    } catch (error) {\r\n      logger.error(`Error unblocking user ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  //Change the user role\r\n  async changeRole(req: Request<{ id: string }, {}, { role: string }>, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const { role } = req.body;\r\n      logger.debug(`Changing role for user: ${id} to ${role}`);\r\n      if (!id || !role) {\r\n        this.throwError(400, 'User ID and role are required');\r\n      }\r\n      const updatedUser = await this.authService.changeRole(id, role);\r\n      this.sendSuccess(res, { user: updatedUser }, 'User role updated successfully');\r\n      logger.info(`Updated role for user: ${id} to ${role}`);\r\n    } catch (error) {\r\n      logger.error(`Error changing role for user ${req.params.id || 'unknown'}: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n}"]}