{"version":3,"file":"AuthService.js","sourceRoot":"","sources":["../../../../src/Modules/Auth/Service/AuthService.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseService } from \"../../../core/Services/BaseService.js\";\r\nimport { ServiceError } from \"../../../core/Utils/ErrorHandler.js\";\r\nimport { UserRepository } from \"../Repositry/UserRepositry.js\";\r\nimport { UserInterface as IUser } from \"../../../Interfaces/models/IUser.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { AuthService as JWTService } from \"../Utils/JWT.js\"\r\nimport { generateOTP } from \"../Utils/OTP.js\";\r\nimport { sendEmail } from \"../../../core/Utils/Email.js\";\r\nimport config from \"../../../config/env.config.js\";\r\nimport { uploadMedia } from \"../../../core/Utils/Cloudinary.js\";\r\nimport { OAuth2Client } from \"../Utils/GoogleConfig.js\";\r\nimport axios from \"axios\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\n\r\n// Interface for signup data\r\ninterface SignupData {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Interface for profile update data\r\ninterface ProfileUpdateData extends Partial<IUser> {\r\n  profilePicFile?: Express.Multer.File;\r\n  coverPicFile?: Express.Multer.File;\r\n}\r\n\r\n// Temporary OTP storage (replace with Redis in production)\r\nconst otpStore: Record<string, string> = {};\r\n\r\n// Service for authentication and user profile operations\r\nexport class AuthService extends BaseService {\r\n  private userRepository: UserRepository;\r\n  private jwtservice = new JWTService();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userRepository = new UserRepository();\r\n    this.jwtservice = new JWTService();\r\n  }\r\n\r\n  //  user signup\r\n  async signup(data: SignupData): Promise<IUser> {\r\n    try {\r\n      const { name, email, password } = data;\r\n      const userExists = await this.userRepository.findUserByEmail(email);\r\n      if (userExists) {\r\n        throw new ServiceError(\"User already exists\");\r\n      }\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n      return await this.userRepository.createUser({\r\n        name,\r\n        email,\r\n        password: hashedPassword,\r\n      });\r\n    } catch (error) {\r\n      logger.error(`Error in signup for email ${data.email}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to signup user\");\r\n    }\r\n  }\r\n\r\n  //  user login\r\n  async login(\r\n    email: string,\r\n    password: string\r\n  ): Promise<{\r\n    user: IUser;\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    needsReviewPrompt: boolean;\r\n  }> {\r\n    try {\r\n      const user = await this.userRepository.findUserByEmail(email);\r\n      if (!user) {\r\n        throw new ServiceError(\"User not found\");\r\n      }\r\n      if (user.isBlocked) {\r\n        throw new ServiceError(\"Blocked\");\r\n      }\r\n      if (!user.password) {\r\n        throw new ServiceError(\r\n          \"This account is registered using a third-party provider. Please log in with your provider\"\r\n        );\r\n      }\r\n      const isMatch = await bcrypt.compare(password, user.password);\r\n      if (!isMatch) {\r\n        throw new ServiceError(\"Invalid credentials\");\r\n      }\r\n      await this.userRepository.incrementLoginCount(user._id.toString());\r\n      const updatedUser = await this.userRepository.findById(\r\n        user._id.toString()\r\n      );\r\n      if (!updatedUser) {\r\n        throw new ServiceError(\"User not found after login count update\");\r\n      }\r\n      const accessToken = this.jwtservice.generateAccessToken({\r\n        userId: user._id,\r\n        userRole: user.role,\r\n      });\r\n      const refreshToken = this.jwtservice.generateRefreshToken({\r\n        userId: user._id,\r\n        userRole: user.role,\r\n      });\r\n      await this.userRepository.updateRefreshToken(\r\n        user._id.toString(),\r\n        refreshToken\r\n      );\r\n      const needsReviewPrompt =\r\n        updatedUser.loginCount >= 5 && !updatedUser.hasReviewed;\r\n      logger.info(\r\n        `User ${email} logged in. loginCount: ${updatedUser.loginCount}, needsReviewPrompt: ${needsReviewPrompt}`\r\n      );\r\n      return {\r\n        user: updatedUser,\r\n        accessToken,\r\n        refreshToken,\r\n        needsReviewPrompt,\r\n      };\r\n    } catch (error) {\r\n      logger.error(`Error in login for email ${email}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to login user\");\r\n    }\r\n  }\r\n\r\n  //  Google signup\r\n  async googleSignup(code: string): Promise<IUser> {\r\n    try {\r\n      const { tokens } = await OAuth2Client.getToken(code);\r\n      OAuth2Client.setCredentials(tokens);\r\n      const userRes = await axios.get(\r\n        `https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token=${tokens.access_token}`\r\n      );\r\n      const { email, name, picture } = userRes.data;\r\n      const existingUser = await this.userRepository.findUserByEmail(email);\r\n      if (existingUser) {\r\n        throw new ServiceError(\"Email already registered\");\r\n      }\r\n      return await this.userRepository.createUser({\r\n        name,\r\n        email,\r\n        provider: \"google\",\r\n        providerId: tokens.id_token,\r\n        profilePic: picture,\r\n        password: null,\r\n      });\r\n    } catch (error) {\r\n      logger.error(`Error in Google signup: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Google signup failed\");\r\n    }\r\n  }\r\n\r\n  //  Google login\r\n  async googleLogin(\r\n    code: string\r\n  ): Promise<{\r\n    user: IUser;\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    needsReviewPrompt: boolean;\r\n  }> {\r\n    try {\r\n      const { tokens } = await OAuth2Client.getToken(code);\r\n      OAuth2Client.setCredentials(tokens);\r\n      const userRes = await axios.get(\r\n        `https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token=${tokens.access_token}`\r\n      );\r\n      const { email } = userRes.data;\r\n      const existingUser = await this.userRepository.findUserByEmail(email);\r\n      if (!existingUser) {\r\n        throw new ServiceError(\"Email not registered\");\r\n      }\r\n      await this.userRepository.incrementLoginCount(\r\n        existingUser._id.toString()\r\n      );\r\n      const updatedUser = await this.userRepository.findById(\r\n        existingUser._id.toString()\r\n      );\r\n      if (!updatedUser) {\r\n        throw new ServiceError(\"User not found after login count update\");\r\n      }\r\n      const accessToken = this.jwtservice.generateAccessToken({\r\n        userId: existingUser._id,\r\n        userRole: existingUser.role,\r\n      });\r\n      const refreshToken = this.jwtservice.generateRefreshToken({\r\n        userId: existingUser._id,\r\n        userRole: existingUser.role,\r\n      });\r\n      await this.userRepository.updateRefreshToken(\r\n        existingUser._id.toString(),\r\n        refreshToken\r\n      );\r\n      const needsReviewPrompt =\r\n        updatedUser.loginCount >= 5 && !updatedUser.hasReviewed;\r\n      logger.info(\r\n        `Google login for ${email}. loginCount: ${updatedUser.loginCount}, needsReviewPrompt: ${needsReviewPrompt}`\r\n      );\r\n      return {\r\n        user: updatedUser,\r\n        accessToken,\r\n        refreshToken,\r\n        needsReviewPrompt,\r\n      };\r\n    } catch (error) {\r\n      logger.error(`Error in Google login: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Google login failed\");\r\n    }\r\n  }\r\n\r\n  //  GitHub signup\r\n  async githubSignup(code: string): Promise<IUser> {\r\n    try {\r\n      const tokenResponse = await axios.post(\r\n        \"https://github.com/login/oauth/access_token\",\r\n        {\r\n          client_id: config.githubclientid,\r\n          client_secret: config.githubclientsecret,\r\n          code,\r\n        },\r\n        { headers: { Accept: \"application/json\" } }\r\n      );\r\n      const { access_token } = tokenResponse.data;\r\n      const userResponse = await axios.get(\"https://api.github.com/user\", {\r\n        headers: { Authorization: `Bearer ${access_token}` },\r\n      });\r\n      let email = userResponse.data.email;\r\n      if (!email) {\r\n        const emailsResponse = await axios.get(\r\n          \"https://api.github.com/user/emails\",\r\n          {\r\n            headers: { Authorization: `Bearer ${access_token}` },\r\n          }\r\n        );\r\n        const primaryEmail = emailsResponse.data.find((e: any) => e.primary);\r\n        if (!primaryEmail) {\r\n          throw new ServiceError(\"Email not found for GitHub user\");\r\n        }\r\n        email = primaryEmail.email;\r\n      }\r\n      const existingUser = await this.userRepository.findUserByEmail(email);\r\n      if (existingUser) {\r\n        throw new ServiceError(\"Email already registered\");\r\n      }\r\n      return await this.userRepository.createUser({\r\n        name: userResponse.data.name || userResponse.data.login,\r\n        email,\r\n        provider: \"github\",\r\n        providerId: userResponse.data.login,\r\n        profilePic: userResponse.data.avatar_url,\r\n        password: null,\r\n      });\r\n    } catch (error) {\r\n      logger.error(`Error in GitHub signup: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"GitHub signup failed\");\r\n    }\r\n  }\r\n\r\n  //  GitHub login\r\n  async githubLogin(\r\n    code: string\r\n  ): Promise<{\r\n    user: IUser;\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    needsReviewPrompt: boolean;\r\n  }> {\r\n    try {\r\n      const tokenResponse = await axios.post(\r\n        \"https://github.com/login/oauth/access_token\",\r\n        {\r\n          client_id: config.githubclientid,\r\n          client_secret: config.githubclientsecret,\r\n          code,\r\n        },\r\n        { headers: { Accept: \"application/json\" } }\r\n      );\r\n      const { access_token } = tokenResponse.data;\r\n      const userResponse = await axios.get(\"https://api.github.com/user\", {\r\n        headers: { Authorization: `Bearer ${access_token}` },\r\n      });\r\n      let email = userResponse.data.email;\r\n      if (!email) {\r\n        const emailsResponse = await axios.get(\r\n          \"https://api.github.com/user/emails\",\r\n          {\r\n            headers: { Authorization: `Bearer ${access_token}` },\r\n          }\r\n        );\r\n        const primaryEmail = emailsResponse.data.find((e: any) => e.primary);\r\n        if (!primaryEmail) {\r\n          throw new ServiceError(\"Email not found for GitHub user\");\r\n        }\r\n        email = primaryEmail.email;\r\n      }\r\n      const existingUser = await this.userRepository.findUserByEmail(email);\r\n      if (!existingUser) {\r\n        throw new ServiceError(\"Email not registered\");\r\n      }\r\n      await this.userRepository.incrementLoginCount(\r\n        existingUser._id.toString()\r\n      );\r\n      const updatedUser = await this.userRepository.findById(\r\n        existingUser._id.toString()\r\n      );\r\n      if (!updatedUser) {\r\n        throw new ServiceError(\"User not found after login count update\");\r\n      }\r\n      const accessToken = this.jwtservice.generateAccessToken({\r\n        userId: existingUser._id,\r\n        userRole: existingUser.role,\r\n      });\r\n      const refreshToken = this.jwtservice.generateRefreshToken({\r\n        userId: existingUser._id,\r\n        userRole: existingUser.role,\r\n      });\r\n      await this.userRepository.updateRefreshToken(\r\n        existingUser._id.toString(),\r\n        refreshToken\r\n      );\r\n      const needsReviewPrompt =\r\n        updatedUser.loginCount >= 5 && !updatedUser.hasReviewed;\r\n      logger.info(\r\n        `GitHub login for ${email}. loginCount: ${updatedUser.loginCount}, needsReviewPrompt: ${needsReviewPrompt}`\r\n      );\r\n      return {\r\n        user: updatedUser,\r\n        accessToken,\r\n        refreshToken,\r\n        needsReviewPrompt,\r\n      };\r\n    } catch (error) {\r\n      logger.error(`Error in GitHub login: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"GitHub login failed\");\r\n    }\r\n  }\r\n\r\n  //  refresh token\r\n  async refreshToken(\r\n    refreshToken: string\r\n  ): Promise<{ newAccessToken: string }> {\r\n    try {\r\n      const decoded = this.jwtservice.verifyRefreshToken(refreshToken);\r\n      const newAccessToken = this.jwtservice.generateAccessToken({ userId: decoded.userId });\r\n      logger.info(`Refreshed access token for userId: ${decoded.userId}`);\r\n      return { newAccessToken };\r\n    } catch (error) {\r\n      logger.error(`Error refreshing token: ${error}`);\r\n      throw new ServiceError(\"Invalid or expired refresh token\");\r\n    }\r\n  }\r\n\r\n  //  forgot password\r\n  async forgotPassword(email: string): Promise<string> {\r\n    try {\r\n      const user = await this.userRepository.findUserByEmail(email);\r\n      if (!user) {\r\n        throw new ServiceError(\"User not found\");\r\n      }\r\n      const otp = generateOTP();\r\n      otpStore[email] = otp;\r\n      await sendEmail(email, \"Password Reset OTP\", `Your OTP is ${otp}`);\r\n      logger.info(`Sent OTP to ${email}`);\r\n      return otp; // Remove in production\r\n    } catch (error) {\r\n      logger.error(`Error in forgot password for ${email}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to send OTP\");\r\n    }\r\n  }\r\n\r\n  //  verify OTP\r\n  async verifyOTP(email: string, otp: string): Promise<string> {\r\n    try {\r\n      if (otpStore[email] !== otp) {\r\n        throw new ServiceError(\"Invalid or expired OTP\");\r\n      }\r\n      delete otpStore[email];\r\n      const token = this.jwtservice.generateAccessToken({ email }, \"10m\");\r\n      logger.info(`OTP verified for ${email}`);\r\n      return token;\r\n    } catch (error) {\r\n      logger.error(`Error verifying OTP for ${email}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to verify OTP\");\r\n    }\r\n  }\r\n\r\n  //  reset password\r\n  async resetPassword(email: string, newPassword: string): Promise<void> {\r\n    try {\r\n      const user = await this.userRepository.findUserByEmail(email);\r\n      if (!user) {\r\n        throw new ServiceError(\"User not found\");\r\n      }\r\n      if (user.password && (await bcrypt.compare(newPassword, user.password))) {\r\n        throw new ServiceError(\r\n          \"New password cannot be the same as the old password\"\r\n        );\r\n      }\r\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n      await this.userRepository.updatePassword(\r\n        user._id.toString(),\r\n        hashedPassword\r\n      );\r\n      logger.info(`Password reset for ${email}`);\r\n    } catch (error) {\r\n      logger.error(`Error resetting password for ${email}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to reset password\");\r\n    }\r\n  }\r\n\r\n  //  logout\r\n  async logout(email: string): Promise<void> {\r\n    try {\r\n      await this.userRepository.removeRefreshToken(email);\r\n      logger.info(`User ${email} logged out`);\r\n    } catch (error) {\r\n      logger.error(`Error logging out user ${email}: ${error}`);\r\n      throw new ServiceError(\"Failed to logout user\");\r\n    }\r\n  }\r\n\r\n  // Verify admin passkey\r\n  async verifyAdminPasskey(passkey: string): Promise<boolean> {\r\n    try {\r\n      if (passkey !== config.adminpasscode) {\r\n        throw new ServiceError(\"Invalid admin passkey\");\r\n      }\r\n      logger.info(`Admin passkey verified`);\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(`Error verifying admin passkey: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to verify admin passkey\");\r\n    }\r\n  }\r\n\r\n  // Check profile completion\r\n  async checkProfileCompletion(userId: string): Promise<boolean> {\r\n    try {\r\n      const user = await this.userRepository.findById(userId);\r\n      if (!user) {\r\n        throw new ServiceError(\"User not found\");\r\n      }\r\n      const isComplete = await this.userRepository.isProfileComplete(user);\r\n      logger.info(\r\n        `Profile completion checked for user ${userId}: ${isComplete}`\r\n      );\r\n      return isComplete;\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error checking profile completion for user ${userId}: ${error}`\r\n      );\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to check profile completion\");\r\n    }\r\n  }\r\n\r\n  // Get profile details\r\n  async profileDetails(userId: string): Promise<IUser> {\r\n    try {\r\n      const user = await this.userRepository.findById(userId);\r\n      if (!user) {\r\n        throw new ServiceError(\"User not found\");\r\n      }\r\n      logger.info(`Fetched profile details for user ${userId}`);\r\n      return user;\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error fetching profile details for user ${userId}: ${error}`\r\n      );\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to fetch profile details\");\r\n    }\r\n  }\r\n\r\n  // Update user profile\r\n  async updateUserProfile(\r\n    userId: string,\r\n    data: ProfileUpdateData\r\n  ): Promise<IUser> {\r\n    try {\r\n      const user = await this.userRepository.findById(userId);\r\n      if (!user) {\r\n        throw new ServiceError(\"User not found\");\r\n      }\r\n      let profilePic = user.profilePic;\r\n      let coverPic = user.coverPic;\r\n      if (data.profilePicFile) {\r\n        const { url } = await uploadMedia(\r\n          data.profilePicFile.path,\r\n          \"profiles\",\r\n          data.profilePicFile.size\r\n        );\r\n        profilePic = url;\r\n      }\r\n      if (data.coverPicFile) {\r\n        const { url } = await uploadMedia(\r\n          data.coverPicFile.path,\r\n          \"covers\",\r\n          data.coverPicFile.size\r\n        );\r\n        coverPic = url;\r\n      }\r\n      const updatedData: Partial<IUser> = {\r\n        name: data.name || user.name,\r\n        email: data.email || user.email,\r\n        phone: data.phone || user.phone,\r\n        dateOfBirth: data.dateOfBirth\r\n          ? new Date(data.dateOfBirth)\r\n          : user.dateOfBirth,\r\n        jobTitle: data.jobTitle || user.jobTitle,\r\n        industry: data.industry || user.industry,\r\n        reasonForJoining: data.reasonForJoining || user.reasonForJoining,\r\n        profilePic,\r\n        coverPic,\r\n      };\r\n      const updatedUser = await this.userRepository.update(userId, updatedData);\r\n      if (!updatedUser) {\r\n        throw new ServiceError(\"Failed to update user profile\");\r\n      }\r\n      logger.info(`Updated profile for user ${userId}`);\r\n      return updatedUser;\r\n    } catch (error) {\r\n      logger.error(`Error updating profile for user ${userId}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to update user profile\");\r\n    }\r\n  }\r\n\r\n  //get All User Details\r\n  async getAllUsers(): Promise<IUser[]> {\r\n    try {\r\n      logger.debug(`Fetching all users`);\r\n      return await this.userRepository.getAllUsers();\r\n    } catch (error) {\r\n      logger.error(`Error fetching all users: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(\"Failed to fetch all users\");\r\n    }\r\n  }\r\n\r\n  //block the given user\r\n  async blockUser(id: string): Promise<void> {\r\n    try {\r\n      this.checkData(id);\r\n      const user = await this.userRepository.getUserById(id);\r\n      if (!user) {\r\n        this.throwError(\"User not found\");\r\n      }\r\n      await this.userRepository.blockUser(id);\r\n      logger.info(`Blocked user: ${id}`);\r\n    } catch (error) {\r\n      logger.error(`Error blocking user ${id}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(`Failed to block user ${id}`);\r\n    }\r\n  }\r\n\r\n  //Unblock the given User\r\n  async unblockUser(id: string): Promise<void> {\r\n    try {\r\n      this.checkData(id);\r\n      const user = await this.userRepository.getUserById(id);\r\n      if (!user) {\r\n        this.throwError(\"User not found\");\r\n      }\r\n      await this.userRepository.unblockUser(id);\r\n      logger.info(`Unblocked user: ${id}`);\r\n    } catch (error) {\r\n      logger.error(`Error unblocking user ${id}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(`Failed to unblock user ${id}`);\r\n    }\r\n  }\r\n\r\n  //Change the user Role\r\n  async changeRole(userId: string, role: string): Promise<IUser> {\r\n    try {\r\n      this.checkData({ userId, role });\r\n      const user = await this.userRepository.getUserById(userId);\r\n      if (!user) {\r\n        this.throwError(\"User not found\");\r\n      }\r\n      const updatedUser = await this.userRepository.updateUserRole(\r\n        userId,\r\n        role\r\n      );\r\n      if (!updatedUser) {\r\n        this.throwError(\"Failed to update user role\");\r\n      }\r\n      logger.info(`Updated role for user ${userId} to ${role}`);\r\n      return updatedUser;\r\n    } catch (error) {\r\n      logger.error(`Error updating role for user ${userId}: ${error}`);\r\n      throw error instanceof ServiceError\r\n        ? error\r\n        : new ServiceError(`Failed to update role for user ${userId}`);\r\n    }\r\n  }\r\n}\r\n"]}