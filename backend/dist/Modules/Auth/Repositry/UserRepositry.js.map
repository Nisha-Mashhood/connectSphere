{"version":3,"file":"UserRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Auth/Repositry/UserRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import User from \"../../../models/user.model.js\";\r\nimport { UserInterface } from \"../../../Interfaces/models/IUser.js\";\r\nimport { BaseRepository } from \"../../../core/Repositries/BaseRepositry.js\";\r\nimport { RepositoryError } from \"../../../core/Utils/ErrorHandler.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\n\r\n// Repository for User-specific database operations\r\nexport class UserRepository extends BaseRepository<UserInterface> {\r\n  constructor() {\r\n    super(User);\r\n  }\r\n\r\n  // Create a new user\r\n   createUser=async(userData: Partial<UserInterface>): Promise<UserInterface> =>{\r\n    try {\r\n      return await this.create(userData);\r\n    } catch (error) {\r\n      logger.error(`Error creating user: ${error}`);\r\n      throw new RepositoryError(\"Failed to create user\");\r\n    }\r\n  }\r\n\r\n  // Find a user by email\r\n   findUserByEmail=async(email: string): Promise<UserInterface | null> =>{\r\n    try {\r\n      return await this.findOne({ email });\r\n    } catch (error) {\r\n      logger.error(`Error finding user by email ${email}: ${error}`);\r\n      throw new RepositoryError(`Failed to find user by email ${email}`);\r\n    }\r\n  }\r\n\r\n  //Find a User By id\r\n   getUserById=async(id?: string): Promise<UserInterface | null> =>{\r\n    if(!id){\r\n      throw new RepositoryError(\"id is not provided\");\r\n    }\r\n    try {\r\n      return await this.findById(id);\r\n    } catch (error) {\r\n      logger.error(`Error finding user by id ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to find user by id ${id}`);\r\n    }\r\n  }\r\n\r\n  // Find or create a user by OAuth profile\r\n   findOrCreateUser=async(\r\n    profile: {\r\n      email: string;\r\n      displayName?: string;\r\n      id?: string;\r\n      photos?: { value: string }[];\r\n    },\r\n    provider: string\r\n  ): Promise<UserInterface> =>{\r\n    try {\r\n      const email = profile.email;\r\n      let user = await this.findUserByEmail(email);\r\n      if (!user) {\r\n        user = await this.create({\r\n          name: profile.displayName || \"Unknown\",\r\n          email,\r\n          provider,\r\n          providerId: profile.id,\r\n          profilePic: profile.photos?.[0]?.value || null,\r\n          role: \"user\",\r\n        });\r\n        logger.info(`Created OAuth user: ${email} via ${provider}`);\r\n      }\r\n      return user;\r\n    } catch (error) {\r\n      logger.error(`Error in findOrCreateUser for ${profile.email}: ${error}`);\r\n      throw new RepositoryError(\r\n        `Failed to find or create user for ${profile.email}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Update user password\r\n   updatePassword=async(\r\n    id: string,\r\n    password: string\r\n  ): Promise<UserInterface | null> =>{\r\n    try {\r\n      return await this.update(id, { password });\r\n    } catch (error) {\r\n      logger.error(`Error updating password for user ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to update password for user ${id}`);\r\n    }\r\n  }\r\n\r\n  // Increment login count\r\n   incrementLoginCount=async(userId: string): Promise<UserInterface | null> =>{\r\n    try {\r\n      return await this.findByIdAndUpdate(userId, { $inc: { loginCount: 1 } });\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error incrementing login count for user ${userId}: ${error}`\r\n      );\r\n      throw new RepositoryError(\r\n        `Failed to increment login count for user ${userId}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Update refresh token\r\n   updateRefreshToken=async(\r\n    userId: string,\r\n    refreshToken: string\r\n  ): Promise<UserInterface | null> =>{\r\n    try {\r\n      return await this.update(userId, { refreshToken });\r\n    } catch (error) {\r\n      logger.error(`Error updating refresh token for user ${userId}: ${error}`);\r\n      throw new RepositoryError(\r\n        `Failed to update refresh token for user ${userId}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Remove refresh token\r\n   removeRefreshToken= async(email: string): Promise<void> =>{\r\n    try {\r\n      await this.model.updateOne({ email }, { $unset: { refreshToken: \"\" } });\r\n      logger.info(`Removed refresh token for user with email: ${email}`);\r\n    } catch (error) {\r\n      logger.error(`Error removing refresh token for email ${email}: ${error}`);\r\n      throw new RepositoryError(\r\n        `Failed to remove refresh token for email ${email}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Check if profile is complete\r\n   isProfileComplete=async(user: UserInterface): Promise<boolean> =>{\r\n    try {\r\n      const requiredFields: (keyof UserInterface)[] = [\r\n        \"phone\",\r\n        \"dateOfBirth\",\r\n        \"jobTitle\",\r\n        \"industry\",\r\n        \"reasonForJoining\",\r\n      ];\r\n      for (const field of requiredFields) {\r\n        if (!user[field]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error checking profile completion for user ${user._id}: ${error}`\r\n      );\r\n      throw new RepositoryError(\r\n        `Failed to check profile completion for user ${user._id}`\r\n      );\r\n    }\r\n  }\r\n\r\n  //Fetch All User Details\r\n   getAllUsers=async(): Promise<UserInterface[]> =>{\r\n    try {\r\n      logger.debug(`Fetching all users`);\r\n      return await this.model.find({ role: { $ne: \"admin\" } }).exec();\r\n    } catch (error) {\r\n      logger.error(`Error fetching all users: ${error}`);\r\n      throw new RepositoryError(\"Failed to fetch all users\");\r\n    }\r\n  }\r\n\r\n  //Update The User Profile\r\n   updateUserProfile=async(\r\n    id: string,\r\n    data: Partial<UserInterface>\r\n  ): Promise<UserInterface | null> => {\r\n    try {\r\n      logger.debug(`Updating user profile for ID: ${id}`);\r\n      return await this.findByIdAndUpdate(id, data, { new: true });\r\n    } catch (error) {\r\n      logger.error(`Error updating user profile for ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to update user profile for ID ${id}`);\r\n    }\r\n  }\r\n\r\n  //Block the given User\r\n   blockUser=async(id: string): Promise<void> =>{\r\n    try {\r\n      logger.debug(`Blocking user: ${id}`);\r\n      await this.findByIdAndUpdate(id, { isBlocked: true });\r\n    } catch (error) {\r\n      logger.error(`Error blocking user ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to block user ${id}`);\r\n    }\r\n  }\r\n\r\n  //Unblock the given user\r\n   unblockUser=async(id: string): Promise<void> =>{\r\n    try {\r\n      logger.debug(`Unblocking user: ${id}`);\r\n      await this.findByIdAndUpdate(id, { isBlocked: false });\r\n    } catch (error) {\r\n      logger.error(`Error unblocking user ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to unblock user ${id}`);\r\n    }\r\n  }\r\n\r\n  //Update The user Role\r\n   updateUserRole=async(\r\n    userId: string,\r\n    role: string\r\n  ): Promise<UserInterface | null> =>{\r\n    try {\r\n      logger.debug(`Updating role for user: ${userId} to ${role}`);\r\n      return await this.findByIdAndUpdate(userId, { role }, { new: true });\r\n    } catch (error) {\r\n      logger.error(`Error updating role for user ${userId}: ${error}`);\r\n      throw new RepositoryError(`Failed to update role for user ${userId}`);\r\n    }\r\n  }\r\n}\r\n"]}