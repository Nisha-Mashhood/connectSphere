{"version":3,"file":"AdminDashboardRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/AdminDashboard/Repositry/AdminDashboardRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import mentorModel from \"../../../models/mentor.model.js\";\r\nimport collaboration from \"../../../models/collaboration.js\";\r\nimport User from \"../../../models/user.model.js\";\r\nimport MentorRequest from \"../../../models/mentorRequset.js\";\r\n\r\nclass AdminRepository {\r\n    // User  counts\r\n   getTotalUsersCount = async() => {\r\n    return await User.countDocuments({ role: 'user' });\r\n  }\r\n  //mentor counts\r\n   getTotalMentorsCount = async() => {\r\n    return await User.countDocuments({ role: 'mentor' });\r\n  }\r\n\r\n  //get Total Revenue\r\n   getTotalRevenue = async() => {\r\n    const result = await collaboration.aggregate([\r\n        {\r\n            $match: \r\n            { \r\n                payment: true }\r\n          },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              totalRevenue: { $sum: '$price' }\r\n            }\r\n          }\r\n    ])\r\n\r\n    const totalRevenue = result.length > 0 ? result[0].totalRevenue : 0;\r\n    //platform takes a fixed percentage (e.g., 10%)\r\n    const platformProfit = totalRevenue * 0.1;\r\n\r\n    return { totalRevenue, platformProfit };\r\n  }\r\n\r\n  // Pending collaboration requests \r\n   getPendingMentorRequestsCount = async() => {\r\n    return await MentorRequest.countDocuments({ isAccepted : \"Pending\" });\r\n  }\r\n\r\n  //active collaborations\r\n   getActiveCollaborationsCount = async() => {\r\n    return await collaboration.countDocuments({ isCancelled : false });\r\n  }\r\n\r\n  // Revenue trends data\r\n   getRevenueTrends = async(timeFormat: string, days: number) =>{\r\n    const startDate = new Date();\r\n\r\n    startDate.setDate(startDate.getDate() - days);\r\n\r\n    const result = await collaboration.aggregate([\r\n        {\r\n            $match: \r\n            {\r\n              createdAt: { $gte: startDate },\r\n              payment: true\r\n            }\r\n          },\r\n          {\r\n            $group: {\r\n              _id: { $dateToString: { format: timeFormat, date: '$createdAt' } },\r\n              totalRevenue: { $sum: '$price' },\r\n              count: { $sum: 1 }\r\n            }\r\n          },\r\n          {\r\n            $sort: { '_id': 1 }\r\n          }\r\n    ])\r\n\r\n    return result.map(item => ({\r\n        name: item._id,\r\n        totalRevenue: item.totalRevenue,\r\n        platformRevenue: Math.round(item.totalRevenue * 0.1), // 10% platform fee\r\n        mentorRevenue: Math.round(item.totalRevenue * 0.9), // 90% to mentors\r\n      }));\r\n  }\r\n\r\n\r\n  //User Growth Data\r\n   getUserGrowth = async(timeFormat: string, days: number) => {\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - days);\r\n\r\n    const userGrowth = await User.aggregate([\r\n        {\r\n            $match: {\r\n              createdAt: { $gte: startDate }\r\n            }\r\n          },\r\n          {\r\n            $group: {\r\n              _id: { \r\n                date: { $dateToString: { format: timeFormat, date: '$createdAt' } },\r\n                role: '$role'\r\n              },\r\n              count: { $sum: 1 }\r\n            }\r\n          },\r\n          {\r\n            $sort: { '_id.date': 1 }\r\n          }\r\n    ])\r\n\r\n    const groupedByDate : Record<string, { name: string; users: number; mentors: number }> = {};\r\n    userGrowth.forEach(item => {\r\n      if (!groupedByDate[item._id.date]) {\r\n        groupedByDate[item._id.date] = { name: item._id.date, users: 0, mentors: 0 };\r\n      }\r\n      \r\n      if (item._id.role === 'user') {\r\n        groupedByDate[item._id.date].users = item.count;\r\n      } else if (item._id.role === 'mentor') {\r\n        groupedByDate[item._id.date].mentors = item.count;\r\n      }\r\n    });\r\n\r\n    return Object.values(groupedByDate);\r\n  }\r\n\r\n  // Pending mentor requests\r\n   getPendingMentorRequests = async(limit?: number) => {\r\n    const query = mentorModel.find({ isApproved: 'Processing' })\r\n      .populate('userId', 'name email')\r\n      .sort({ createdAt: -1 });\r\n    \r\n    if (limit) {\r\n      query.limit(limit);\r\n    }\r\n    \r\n    return await query.exec();\r\n  }\r\n\r\n  // Top mentors\r\n   getTopMentors = async(limit: number) => {\r\n    try {\r\n      const topMentors = await collaboration.aggregate([\r\n        {\r\n          $match: { payment: true, isCancelled: false }, // completed & paid collaborations\r\n        },\r\n        {\r\n          $group: {\r\n            _id: \"$mentorId\",\r\n            totalEarnings: { $sum: \"$price\" }, // earnings\r\n            collaborationCount: { $sum: 1 }, // Counting collaborations\r\n          },\r\n        },\r\n        {\r\n          $sort: { totalEarnings: -1 }, // (highest first)\r\n        },\r\n        {\r\n          $limit: limit, // Limiting results\r\n        },\r\n        {\r\n          $lookup: {\r\n            from: \"mentors\",\r\n            localField: \"_id\",\r\n            foreignField: \"_id\",\r\n            as: \"mentorInfo\",\r\n          },\r\n        },\r\n        {\r\n          $unwind: \"$mentorInfo\",\r\n        },\r\n        {\r\n          $lookup: {\r\n            from: \"users\",\r\n            localField: \"mentorInfo.userId\",\r\n            foreignField: \"_id\",\r\n            as: \"userInfo\",\r\n          },\r\n        },\r\n        {\r\n          $unwind: \"$userInfo\",\r\n        },\r\n        {\r\n          $project: {\r\n            _id: \"$mentorInfo._id\",\r\n            name: \"$userInfo.name\",\r\n            email: \"$userInfo.email\",\r\n            profilePic: \"$userInfo.profilePic\",\r\n            totalEarnings: 1,\r\n            collaborationCount: 1,\r\n          },\r\n        },\r\n      ]);\r\n  \r\n      return topMentors;\r\n    } catch (error) {\r\n      console.error(\"Error fetching top mentors:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //get recent collaborations\r\n   getRecentCollaborations = async(limit: number) => {\r\n    return await collaboration.find({ isCancelled: false })\r\n      .populate({ path: 'userId', select: 'name profilePic' })\r\n      .populate({\r\n        path: 'mentorId',\r\n        populate: { path: 'userId', select: 'name profilePic' },\r\n      })\r\n      .sort({ createdAt: -1 })\r\n      .limit(limit);\r\n  }\r\n\r\n}\r\n\r\nexport default new AdminRepository();"]}