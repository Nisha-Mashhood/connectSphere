{"version":3,"file":"ChatController.js","sourceRoot":"","sources":["../../../../src/Modules/Chat/Controllers/ChatController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { BaseController } from '../../../core/Controller/BaseController.js';\r\nimport { ChatService } from '../Service/ChatService.js';\r\nimport { ChatRepository } from '../Repositry/ChatRepositry.js';\r\nimport { uploadMedia } from '../../../core/Utils/Cloudinary.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { HttpError } from '../../../core/Utils/ErrorHandler.js';\r\n\r\nexport class ChatController extends BaseController {\r\n  private chatService: ChatService;\r\n   private chatRepo: ChatRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.chatService = new ChatService();\r\n    this.chatRepo = new ChatRepository();\r\n  }\r\n\r\n  getChatMessages = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { contactId, groupId, page = '1', limit = '10' } = req.query;\r\n      const messages = await this.chatService.getChatMessages(\r\n        contactId as string | undefined,\r\n        groupId as string | undefined,\r\n        parseInt(page as string),\r\n        parseInt(limit as string)\r\n      );\r\n      this.sendSuccess(res, messages, 'Chat messages retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  uploadAndSaveMessage = async(req: Request, res: Response): Promise<void> => {\r\n    try {\r\n      const { senderId, targetId, type, collaborationId, userConnectionId, groupId } = req.body;\r\n      if (!req.file || !senderId || !targetId || !type) {\r\n        this.throwError(400, 'Missing required fields');\r\n      }\r\n\r\n      const filePath = req.file?.path;\r\n      if(!filePath){\r\n        this.throwError(400, 'Missing File Path');\r\n      }\r\n      const folder = type === 'group' ? 'group_chat_media' : 'chat_media';\r\n      const contentType = req.file?.mimetype.startsWith('image/')\r\n        ? 'image'\r\n        : req.file?.mimetype.startsWith('video/')\r\n        ? 'video'\r\n        : 'file';\r\n      const { url, thumbnailUrl } = await uploadMedia(filePath as string, folder, req.file?.size, contentType);\r\n\r\n      const message = await this.chatRepo.saveChatMessage({\r\n        senderId,\r\n        content: url,\r\n        thumbnailUrl,\r\n        contentType,\r\n        ...(type === 'user-mentor' && { collaborationId }),\r\n        ...(type === 'user-user' && { userConnectionId }),\r\n        ...(type === 'group' && { groupId }),\r\n        fileMetadata: {\r\n          fileName: req.file?.originalname,\r\n          fileSize: req.file?.size,\r\n          mimeType: req.file?.mimetype,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n\r\n      logger.info(`Saved message: ${message._id}`);\r\n      this.sendCreated(res, { url, thumbnailUrl, messageId: message._id }, 'Message uploaded and saved');\r\n    } catch (error: any) {\r\n      if (error.http_code === 400 && error.message.includes('Video is too large')) {\r\n        this.handleError(new HttpError(400, 'Video is too large; processing may take time'), res);\r\n      } else {\r\n        this.handleError(error, res);\r\n      }\r\n    }\r\n  }\r\n\r\n  getUnreadMessageCounts = async(req: Request, res: Response): Promise<void> => {\r\n    try {\r\n      const { userId } = req.query;\r\n      if (!userId) {\r\n        this.throwError(400, 'User ID is required');\r\n      }\r\n      const unreadCounts = await this.chatService.getUnreadMessageCounts(userId as string);\r\n      this.sendSuccess(res, unreadCounts, 'Unread message counts retrieved successfully');\r\n    } catch (error: any) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n}"]}