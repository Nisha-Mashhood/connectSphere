{"version":3,"file":"ChatRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Chat/Repositry/ChatRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types, Model } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport ChatMessage from '../../../models/chat.model.js';\r\nimport { IChatMessage } from '../../../Interfaces/models/IChatMessage.js';\r\n\r\nexport class ChatRepository extends BaseRepository<IChatMessage> {\r\n  constructor() {\r\n    super(ChatMessage as Model<IChatMessage>);\r\n  }\r\n\r\n  private toObjectId(id?: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = id instanceof Types.ObjectId ? id.toString() : id;\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n  async saveChatMessage(messageData: Partial<IChatMessage>): Promise<IChatMessage> {\r\n    try {\r\n      logger.debug(`Saving chat message for sender: ${messageData.senderId}`);\r\n      return await this.create({\r\n        ...messageData,\r\n        senderId: messageData.senderId ? this.toObjectId(messageData.senderId) : undefined,\r\n        collaborationId: messageData.collaborationId ? this.toObjectId(messageData.collaborationId) : undefined,\r\n        userConnectionId: messageData.userConnectionId ? this.toObjectId(messageData.userConnectionId) : undefined,\r\n        groupId: messageData.groupId ? this.toObjectId(messageData.groupId) : undefined,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error saving chat message: ${error.message}`);\r\n      throw new RepositoryError(`Error saving chat message: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findChatMessageById(messageId: string): Promise<IChatMessage | null> {\r\n    return await this.findById(messageId);\r\n  }\r\n\r\n  async findChatMessagesByCollaborationId(collaborationId: string, page: number, limit: number): Promise<IChatMessage[]> {\r\n    try {\r\n      logger.debug(`Finding messages for collaboration: ${collaborationId}`);\r\n      const id = this.toObjectId(collaborationId);\r\n      return await this.model\r\n        .find({ collaborationId: id })\r\n        .sort({ timestamp: -1 })\r\n        .skip((page - 1) * limit)\r\n        .limit(limit)\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error finding messages by collaboration ID: ${error.message}`);\r\n      throw new RepositoryError(`Error finding chat messages by collaboration ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findChatMessagesByUserConnectionId(userConnectionId: string, page: number, limit: number): Promise<IChatMessage[]> {\r\n    try {\r\n      logger.debug(`Finding messages for user connection: ${userConnectionId}`);\r\n      const id = this.toObjectId(userConnectionId);\r\n      return await this.model\r\n        .find({ userConnectionId: id })\r\n        .sort({ timestamp: -1 })\r\n        .skip((page - 1) * limit)\r\n        .limit(limit)\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error finding messages by user connection ID: ${error.message}`);\r\n      throw new RepositoryError(`Error finding chat messages by user connection ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findChatMessagesByGroupId(groupId: string, page: number, limit: number): Promise<IChatMessage[]> {\r\n    try {\r\n      logger.debug(`Finding messages for group: ${groupId}`);\r\n      const id = this.toObjectId(groupId);\r\n      return await this.model\r\n        .find({ groupId: id })\r\n        .sort({ timestamp: -1 })\r\n        .skip((page - 1) * limit)\r\n        .limit(limit)\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error finding messages by group ID: ${error.message}`);\r\n      throw new RepositoryError(`Error finding chat messages by group ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async countMessagesByCollaborationId(collaborationId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting messages for collaboration: ${collaborationId}`);\r\n      const id = this.toObjectId(collaborationId);\r\n      return await this.model.countDocuments({ collaborationId: id });\r\n    } catch (error: any) {\r\n      logger.error(`Error counting messages by collaboration ID: ${error.message}`);\r\n      throw new RepositoryError(`Error counting messages by collaboration ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async countMessagesByUserConnectionId(userConnectionId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting messages for user connection: ${userConnectionId}`);\r\n      const id = this.toObjectId(userConnectionId);\r\n      return await this.model.countDocuments({ userConnectionId: id });\r\n    } catch (error: any) {\r\n      logger.error(`Error counting messages by user connection ID: ${error.message}`);\r\n      throw new RepositoryError(`Error counting messages by user connection ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async countMessagesByGroupId(groupId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting messages for group: ${groupId}`);\r\n      const id = this.toObjectId(groupId);\r\n      return await this.model.countDocuments({ groupId: id });\r\n    } catch (error: any) {\r\n      logger.error(`Error counting messages by group ID: ${error.message}`);\r\n      throw new RepositoryError(`Error counting messages by group ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async countUnreadMessagesByGroupId(groupId: string, userId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting unread messages for group: ${groupId}, user: ${userId}`);\r\n      const gId = this.toObjectId(groupId);\r\n      const uId = this.toObjectId(userId);\r\n      const count = await this.model.countDocuments({\r\n        groupId: gId,\r\n        isRead: false,\r\n        senderId: { $ne: uId },\r\n      });\r\n      logger.debug(`Unread count for group ${groupId}: ${count}`);\r\n      return count;\r\n    } catch (error: any) {\r\n      logger.error(`Error counting unread messages by group ID: ${error.message}`);\r\n      throw new RepositoryError(`Error counting unread messages by group ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async countUnreadMessagesByCollaborationId(collaborationId: string, userId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting unread messages for collaboration: ${collaborationId}, user: ${userId}`);\r\n      const cId = this.toObjectId(collaborationId);\r\n      const uId = this.toObjectId(userId);\r\n      const count = await this.model.countDocuments({\r\n        collaborationId: cId,\r\n        isRead: false,\r\n        senderId: { $ne: uId },\r\n      });\r\n      logger.debug(`Unread count for collaboration ${collaborationId}: ${count}`);\r\n      return count;\r\n    } catch (error: any) {\r\n      logger.error(`Error counting unread messages by collaboration ID: ${error.message}`);\r\n      throw new RepositoryError(`Error counting unread messages by collaboration ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async countUnreadMessagesByUserConnectionId(userConnectionId: string, userId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting unread messages for user connection: ${userConnectionId}, user: ${userId}`);\r\n      const ucId = this.toObjectId(userConnectionId);\r\n      const uId = this.toObjectId(userId);\r\n      const count = await this.model.countDocuments({\r\n        userConnectionId: ucId,\r\n        isRead: false,\r\n        senderId: { $ne: uId },\r\n      });\r\n      logger.debug(`Unread count for user connection ${userConnectionId}: ${count}`);\r\n      return count;\r\n    } catch (error: any) {\r\n      logger.error(`Error counting unread messages by user connection ID: ${error.message}`);\r\n      throw new RepositoryError(`Error counting unread messages by user connection ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async markMessagesAsRead(chatKey: string, userId: string, type: 'group' | 'user-mentor' | 'user-user'): Promise<string[]> {\r\n    try {\r\n      logger.debug(`Marking messages as read: ${chatKey}, user: ${userId}, type: ${type}`);\r\n      const filter: any = { isRead: false, senderId: { $ne: this.toObjectId(userId) } };\r\n      if (type === 'group') {\r\n        filter.groupId = this.toObjectId(chatKey.replace('group_', ''));\r\n      } else if (type === 'user-mentor') {\r\n        filter.collaborationId = this.toObjectId(chatKey.replace('user-mentor_', ''));\r\n      } else {\r\n        filter.userConnectionId = this.toObjectId(chatKey.replace('user-user_', ''));\r\n      }\r\n      const unreadMessages = await this.model.find(filter).select('_id').exec();\r\n      const messageIds = unreadMessages.map((msg) => msg._id.toString());\r\n\r\n      if (messageIds.length > 0) {\r\n        await this.model.updateMany(\r\n          { _id: { $in: messageIds.map((id) => this.toObjectId(id)) } },\r\n          { $set: { isRead: true, status: 'read' } }\r\n        );\r\n        logger.info(`Marked ${messageIds.length} messages as read for ${chatKey}`);\r\n      }\r\n\r\n      return messageIds;\r\n    } catch (error: any) {\r\n      logger.error(`Error marking messages as read: ${error.message}`);\r\n      throw new RepositoryError(`Error marking messages as read: ${error.message}`);\r\n    }\r\n  }\r\n}"]}