{"version":3,"file":"ChatService.js","sourceRoot":"","sources":["../../../../src/Modules/Chat/Service/ChatService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,WAAW,EAAE,MAAM,uCAAuC,CAAC;AACpE,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAE/D,OAAO,EAAE,iBAAiB,EAAE,MAAM,6CAA6C,CAAC;AAChF,OAAO,MAAM,MAAM,+BAA+B,CAAC;AAGnD,MAAM,OAAO,WAAY,SAAQ,WAAW;IACpC,QAAQ,CAAiB;IACzB,WAAW,CAAoB;IACnC;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,EAAE,CAAC;IAC7C,CAAC;IAEJ,eAAe,GAAG,KAAK,EACtB,SAAkB,EAClB,OAAgB,EAChB,OAAe,CAAC,EAChB,QAAgB,EAAE,EACoC,EAAE;QACxD,MAAM,CAAC,KAAK,CAAC,uCAAuC,SAAS,YAAY,OAAO,WAAW,IAAI,YAAY,KAAK,EAAE,CAAC,CAAC;QACpH,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,UAAU,CAAC,2DAA2D,CAAC,CAAC;QAC/E,CAAC;QACD,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;YACzB,IAAI,CAAC,UAAU,CAAC,sDAAsD,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,QAAQ,GAAmB,EAAE,CAAC;QAClC,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACxB,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC/E,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC9D,CAAC;aAAM,IAAI,SAAS,EAAE,CAAC;YACrB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC1B,qEAAqE;YACrE,MAAM,OAAO,GAAoB,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YACnF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;YACrC,CAAC;YAED,IAAI,OAAO,EAAE,IAAI,KAAK,aAAa,IAAI,OAAO,EAAE,eAAe,EAAE,CAAC;gBAChE,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iCAAiC,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAClH,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,8BAA8B,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;YACjG,CAAC;iBAAM,IAAI,OAAO,EAAE,IAAI,KAAK,WAAW,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;gBACrE,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,kCAAkC,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBACpH,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,+BAA+B,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnG,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,UAAU,CAAC,0CAA0C,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC;QAED,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC;IACjD,CAAC,CAAA;IAEA,sBAAsB,GAAG,KAAK,EAAC,MAAc,EAAsC,EAAE;QACpF,MAAM,CAAC,KAAK,CAAC,4CAA4C,MAAM,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YACpC,IAAI,CAAC,UAAU,CAAC,oDAAoD,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACrE,MAAM,CAAC,KAAK,CAAC,SAAS,QAAQ,CAAC,MAAM,uBAAuB,MAAM,EAAE,CAAC,CAAC;QACtE,MAAM,YAAY,GAA8B,EAAE,CAAC;QAEnD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,IAAI,CAAC;gBACH,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;oBAChD,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAC9C,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBAC7E,MAAM,CAAC,KAAK,CAAC,6BAA6B,UAAU,KAAK,KAAK,EAAE,CAAC,CAAC;oBAClE,YAAY,CAAC,SAAS,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC;gBAC9C,CAAC;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,aAAa,IAAI,OAAO,CAAC,eAAe,EAAE,CAAC;oBACrE,MAAM,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;oBACvD,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,oCAAoC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;oBACtF,MAAM,CAAC,KAAK,CAAC,qCAAqC,WAAW,KAAK,KAAK,EAAE,CAAC,CAAC;oBAC3E,YAAY,CAAC,eAAe,WAAW,EAAE,CAAC,GAAG,KAAK,CAAC;gBACrD,CAAC;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;oBACpE,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;oBAC1D,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;oBACzF,MAAM,CAAC,KAAK,CAAC,iCAAiC,aAAa,KAAK,KAAK,EAAE,CAAC,CAAC;oBACzE,YAAY,CAAC,aAAa,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC;gBACrD,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,6CAA6C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACtF,CAAC;YACH,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,4BAA4B,OAAO,CAAC,GAAG,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACzE,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,OAAO,CAAC,eAAe,EAAE,QAAQ,EAAE,IAAI,OAAO,CAAC,gBAAgB,EAAE,QAAQ,EAAE,CAAC;gBACtH,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,IAAI,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACtE,OAAO,YAAY,CAAC;IACtB,CAAC,CAAA;CACF","sourcesContent":["import { Types } from 'mongoose';\r\nimport { BaseService } from '../../../core/Services/BaseService.js';\r\nimport { ChatRepository } from '../Repositry/ChatRepositry.js';\r\nimport { IChatMessage } from '../../../Interfaces/models/IChatMessage.js';\r\nimport { ContactRepository } from '../../Contact/Repositry/ContactRepositry.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { IContact } from '../../../Interfaces/models/IContact.js';\r\n\r\nexport class ChatService extends BaseService {\r\nprivate chatRepo: ChatRepository;\r\nprivate contactRepo: ContactRepository;\r\n    constructor() {\r\n        super();\r\n        this.chatRepo = new ChatRepository();\r\n        this.contactRepo = new ContactRepository();\r\n      }\r\n\r\n   getChatMessages = async(\r\n    contactId?: string,\r\n    groupId?: string,\r\n    page: number = 1,\r\n    limit: number = 10\r\n  ): Promise<{ messages: IChatMessage[]; total: number }> => {\r\n    logger.debug(`Fetching chat messages for contact: ${contactId}, group: ${groupId}, page: ${page}, limit: ${limit}`);\r\n    if (!contactId && !groupId) {\r\n      this.throwError('Contact ID or Group ID is required to fetch chat messages');\r\n    }\r\n    if (contactId && groupId) {\r\n      this.throwError('Provide only one of Contact ID or Group ID, not both');\r\n    }\r\n\r\n    let messages: IChatMessage[] = [];\r\n    let total = 0;\r\n\r\n    if (groupId) {\r\n      this.checkData(groupId);\r\n      messages = await this.chatRepo.findChatMessagesByGroupId(groupId, page, limit);\r\n      total = await this.chatRepo.countMessagesByGroupId(groupId);\r\n    } else if (contactId) {\r\n      this.checkData(contactId);\r\n      // const contact = await this.contactRepo.findContactById(contactId);\r\n      const contact: IContact | null = await this.contactRepo.findContactById(contactId);\r\n      if (!contact) {\r\n        this.throwError('Invalid contact');\r\n      }\r\n\r\n      if (contact?.type === 'user-mentor' && contact?.collaborationId) {\r\n        messages = await this.chatRepo.findChatMessagesByCollaborationId(contact.collaborationId.toString(), page, limit);\r\n        total = await this.chatRepo.countMessagesByCollaborationId(contact.collaborationId.toString());\r\n      } else if (contact?.type === 'user-user' && contact.userConnectionId) {\r\n        messages = await this.chatRepo.findChatMessagesByUserConnectionId(contact.userConnectionId.toString(), page, limit);\r\n        total = await this.chatRepo.countMessagesByUserConnectionId(contact.userConnectionId.toString());\r\n      } else {\r\n        this.throwError('No valid connection ID found for contact');\r\n      }\r\n    }\r\n\r\n    return { messages: messages.reverse(), total };\r\n  }\r\n\r\n   getUnreadMessageCounts = async(userId: string): Promise<{ [key: string]: number }> => {\r\n    logger.debug(`Fetching unread message counts for user: ${userId}`);\r\n    this.checkData(userId);\r\n    if (!Types.ObjectId.isValid(userId)) {\r\n      this.throwError('Invalid user ID: must be a 24 character hex string');\r\n    }\r\n\r\n    const contacts = await this.contactRepo.findContactsByUserId(userId);\r\n    logger.debug(`Found ${contacts.length} contacts for user: ${userId}`);\r\n    const unreadCounts: { [key: string]: number } = {};\r\n\r\n    for (const contact of contacts) {\r\n      let count = 0;\r\n      try {\r\n        if (contact.type === 'group' && contact.groupId) {\r\n          const groupIdStr = contact.groupId.toString();\r\n          count = await this.chatRepo.countUnreadMessagesByGroupId(groupIdStr, userId);\r\n          logger.debug(`Unread messages for group ${groupIdStr}: ${count}`);\r\n          unreadCounts[`group_${groupIdStr}`] = count;\r\n        } else if (contact.type === 'user-mentor' && contact.collaborationId) {\r\n          const collabIdStr = contact.collaborationId.toString();\r\n          count = await this.chatRepo.countUnreadMessagesByCollaborationId(collabIdStr, userId);\r\n          logger.debug(`Unread messages for collaboration ${collabIdStr}: ${count}`);\r\n          unreadCounts[`user-mentor_${collabIdStr}`] = count;\r\n        } else if (contact.type === 'user-user' && contact.userConnectionId) {\r\n          const userConnIdStr = contact.userConnectionId.toString();\r\n          count = await this.chatRepo.countUnreadMessagesByUserConnectionId(userConnIdStr, userId);\r\n          logger.debug(`Unread messages for user-user ${userConnIdStr}: ${count}`);\r\n          unreadCounts[`user-user_${userConnIdStr}`] = count;\r\n        } else {\r\n          logger.warn(`Skipping contact with invalid ID or type: ${JSON.stringify(contact)}`);\r\n        }\r\n      } catch (error: any) {\r\n        logger.warn(`Error processing contact ${contact._id}: ${error.message}`);\r\n        const id = contact.groupId?.toString() || contact.collaborationId?.toString() || contact.userConnectionId?.toString();\r\n        unreadCounts[`${contact.type}_${id || 'unknown'}`] = 0;\r\n      }\r\n    }\r\n\r\n    logger.info(`Unread message counts: ${JSON.stringify(unreadCounts)}`);\r\n    return unreadCounts;\r\n  }\r\n}"]}