{"version":3,"file":"CategoryController.js","sourceRoot":"","sources":["../../../../src/Modules/Category/Controllers/CategoryController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { CategoryService } from '../Service/CategoryService.js';\r\nimport { CategoryInterface as ICategory } from \"../../../Interfaces/models/CategoryInterface.js\";\r\nimport { BaseController } from '../../../core/Controller/BaseController.js';\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\n\r\ninterface CategoryRequest extends Request {\r\n  body: Partial<ICategory>;\r\n  params: { id?: string };\r\n}\r\n\r\nexport class CategoryController extends BaseController {\r\n  private categoryService: CategoryService;\r\n\r\n  constructor() {\r\n    super();\r\n    this.categoryService = new CategoryService();\r\n  }\r\n\r\n   createCategory = async(req: CategoryRequest, res: Response): Promise<void> => {\r\n    try {\r\n      logger.debug(`Creating category: ${req.body.name}`);\r\n      if (!req.body.name) {\r\n        this.throwError(400, 'Category Name is required');\r\n      }\r\n      const isDuplicate = await this.categoryService.isDuplicateCategoryName(req.body.name);\r\n      if (isDuplicate) {\r\n        this.throwError(400, 'Category name already exists');\r\n      }\r\n      const imagePath = req.file?.path;\r\n      const fileSize = req.file?.size;\r\n      const category = await this.categoryService.createCategory(req.body, imagePath, fileSize);\r\n      this.sendCreated(res, category, 'Category created successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   getAllCategories = async(_req: Request, res: Response): Promise<void> => {\r\n    try {\r\n      logger.debug('Fetching all categories');\r\n      const categories = await this.categoryService.getAllCategories();\r\n      this.sendSuccess(res, categories, 'Categories fetched successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   getCategoryById = async(req: CategoryRequest, res: Response): Promise<void> => {\r\n    try {\r\n      logger.debug(`Fetching category: ${req.params.id}`);\r\n      const category = await this.categoryService.getCategoryById(req.params.id!);\r\n      if (!category) {\r\n        this.throwError(404, 'Category not found');\r\n      }\r\n      this.sendSuccess(res, category, 'Category fetched successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   updateCategory = async(req: CategoryRequest, res: Response): Promise<void> => {\r\n    try {\r\n      logger.debug(`Updating category: ${req.params.id}`);\r\n      if (!req.body.name) {\r\n        this.throwError(400, 'Category Name is required');\r\n      }\r\n      const isDuplicate = await this.categoryService.isDuplicateCategoryName(req.body.name, req.params.id);\r\n      if (isDuplicate) {\r\n        this.throwError(400, 'Category name already exists');\r\n      }\r\n      const imagePath = req.file?.path;\r\n      const fileSize = req.file?.size;\r\n      const updatedCategory = await this.categoryService.updateCategory(req.params.id!, req.body, imagePath, fileSize);\r\n      if (!updatedCategory) {\r\n        this.throwError(404, 'Category not found');\r\n      }\r\n      this.sendSuccess(res, updatedCategory, 'Category updated successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n   deleteCategory = async(req: CategoryRequest, res: Response): Promise<void> => {\r\n    try {\r\n      logger.debug(`Deleting category: ${req.params.id}`);\r\n      const deletedCategory = await this.categoryService.deleteCategory(req.params.id!);\r\n      if (!deletedCategory) {\r\n        this.throwError(404, 'Category not found');\r\n      }\r\n      this.sendNoContent(res, 'Category deleted successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n}"]}