{"version":3,"file":"CategoryRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Category/Repositry/CategoryRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseRepository } from \"../../../core/Repositries/BaseRepositry.js\";\r\nimport { RepositoryError } from \"../../../core/Utils/ErrorHandler.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport { CategoryInterface as ICategory } from \"../../../Interfaces/models/CategoryInterface.js\";\r\nimport { Category } from \"../../../models/category.model.js\";\r\n\r\nexport class CategoryRepository extends BaseRepository<ICategory> {\r\n  constructor() {\r\n    super(Category);\r\n  }\r\n\r\n   createCategory = async(data: Partial<ICategory>): Promise<ICategory> => {\r\n    try {\r\n      logger.debug(`Creating category: ${data.name}`);\r\n      const category = await this.create(data);\r\n      logger.info(`Category created: ${category._id} (${category.name})`);\r\n      return category;\r\n    } catch (error) {\r\n      logger.error(`Error creating category: ${error}`);\r\n      throw new RepositoryError(`Failed to create category: ${error}`);\r\n    }\r\n  }\r\n\r\n   getAllCategories = async(): Promise<ICategory[]> => {\r\n    try {\r\n      logger.debug(\"Fetching all categories\");\r\n      const categories = await this.findAll();\r\n      logger.info(`Fetched ${categories.length} categories`);\r\n      return categories;\r\n    } catch (error) {\r\n      logger.error(`Error fetching categories: ${error}`);\r\n      throw new RepositoryError(`Failed to fetch categories: ${error}`);\r\n    }\r\n  }\r\n\r\n   getCategoryById = async(id: string): Promise<ICategory | null> => {\r\n    try {\r\n      logger.debug(`Fetching category by ID: ${id}`);\r\n      const category = await this.findById(id);\r\n      if (!category) {\r\n        logger.warn(`Category not found: ${id}`);\r\n      } else {\r\n        logger.info(`Category fetched: ${id} (${category.name})`);\r\n      }\r\n      return category;\r\n    } catch (error) {\r\n      logger.error(`Error fetching category by ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to fetch category: ${error}`);\r\n    }\r\n  }\r\n\r\n   updateCategory = async(\r\n    id: string,\r\n    data: Partial<ICategory>\r\n  ): Promise<ICategory | null> => {\r\n    try {\r\n      logger.debug(`Updating category: ${id}`);\r\n      const category = await this.findByIdAndUpdate(id, data, { new: true });\r\n      if (!category) {\r\n        logger.warn(`Category not found for update: ${id}`);\r\n      } else {\r\n        logger.info(`Category updated: ${id} (${category.name})`);\r\n      }\r\n      return category;\r\n    } catch (error) {\r\n      logger.error(`Error updating category ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to update category: ${error}`);\r\n    }\r\n  }\r\n\r\n   deleteCategory = async(id: string): Promise<ICategory | null> => {\r\n    try {\r\n      logger.debug(`Deleting category: ${id}`);\r\n      const category = await this.findByIdAndDelete(id);\r\n      if (!category) {\r\n        logger.warn(`Category not found for deletion: ${id}`);\r\n      } else {\r\n        logger.info(`Category deleted: ${id} (${category.name})`);\r\n      }\r\n      return category;\r\n    } catch (error) {\r\n      logger.error(`Error deleting category ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to delete category: ${error}`);\r\n    }\r\n  }\r\n\r\n   isDuplicateCategoryName = async(\r\n    name?: string,\r\n    excludeId?: string\r\n  ): Promise<boolean> => {\r\n    try {\r\n      logger.debug(`Checking duplicate category name: ${name}`);\r\n      const filter: any = { name };\r\n      if (excludeId) {\r\n        filter._id = { $ne: excludeId };\r\n      }\r\n      const existingCategory = await this.findOne(filter);\r\n      const isDuplicate = !!existingCategory;\r\n      logger.info(`Duplicate check for category name ${name}: ${isDuplicate}`);\r\n      return isDuplicate;\r\n    } catch (error) {\r\n      logger.error(`Error checking duplicate category name ${name}: ${error}`);\r\n      throw new RepositoryError(\r\n        `Failed to check duplicate category name: ${error}`\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}