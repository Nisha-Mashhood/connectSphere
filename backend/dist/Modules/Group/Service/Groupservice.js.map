{"version":3,"file":"Groupservice.js","sourceRoot":"","sources":["../../../../src/Modules/Group/Service/Groupservice.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseService } from '../../../core/Services/BaseService.js';\r\nimport { GroupRepository, GroupFormData } from '../Repositry/GroupRepositry.js';\r\nimport { ContactRepository } from '../../Contact/Repositry/ContactRepositry.js';\r\nimport { UserRepository } from '../../Auth/Repositry/UserRepositry.js';\r\nimport { sendEmail } from '../../../core/Utils/Email.js';\r\nimport stripe from '../../../core/Utils/Stripe.js';\r\nimport { v4 as uuid } from 'uuid';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { GroupDocument } from '../../../Interfaces/models/GroupDocument.js';\r\nimport { GroupRequestDocument } from '../../../Interfaces/models/GroupRequestDocument.js';\r\nimport { ServiceError } from '../../../core/Utils/ErrorHandler.js';\r\n\r\nexport class GroupService extends BaseService {\r\n  private groupRepo: GroupRepository;\r\n  private contactRepo: ContactRepository;\r\n  private userRepo: UserRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.groupRepo = new GroupRepository();\r\n    this.contactRepo = new ContactRepository();\r\n    this.userRepo = new UserRepository();\r\n  }\r\n\r\n  async createGroup(groupData: GroupFormData): Promise<GroupDocument> {\r\n    logger.debug(`Creating group: ${groupData.name}`);\r\n    this.checkData(groupData);\r\n    if (!groupData.name || !groupData.bio || !groupData.adminId || !groupData.startDate) {\r\n      throw new ServiceError('Missing required fields: name, bio, adminId, or startDate');\r\n    }\r\n    if (!groupData.availableSlots || groupData.availableSlots.length === 0) {\r\n      throw new ServiceError('At least one available slot is required');\r\n    }\r\n    if (groupData.maxMembers > 4) {\r\n      throw new ServiceError('Maximum members cannot exceed 4');\r\n    }\r\n    const newGroup = await this.groupRepo.createGroup({\r\n      ...groupData,\r\n      createdAt: new Date(),\r\n    });\r\n    await this.contactRepo.createContact({\r\n      userId: groupData.adminId,\r\n      groupId: newGroup._id.toString(),\r\n      type: 'group',\r\n    });\r\n    return newGroup;\r\n  }\r\n\r\n  async getGroupDetails(adminId: string): Promise<GroupDocument[]> {\r\n    logger.debug(`Fetching groups for admin: ${adminId}`);\r\n    this.checkData(adminId);\r\n    return await this.groupRepo.getGroupsByAdminId(adminId);\r\n  }\r\n\r\n  async getGroupById(groupId: string): Promise<GroupDocument | null> {\r\n    logger.debug(`Fetching group by ID: ${groupId}`);\r\n    this.checkData(groupId);\r\n    return await this.groupRepo.getGroupById(groupId);\r\n  }\r\n\r\n  async getAllGroups(): Promise<GroupDocument[]> {\r\n    logger.debug('Fetching all groups');\r\n    return await this.groupRepo.getAllGroups();\r\n  }\r\n\r\n  async requestToJoinGroup(groupId: string, userId: string): Promise<GroupRequestDocument> {\r\n    logger.debug(`Creating group request for group: ${groupId}, user: ${userId}`);\r\n    this.checkData({ groupId, userId });\r\n    return await this.groupRepo.createGroupRequest({ groupId, userId });\r\n  }\r\n\r\n  async getGroupRequestsByGroupId(groupId: string): Promise<GroupRequestDocument[]> {\r\n    logger.debug(`Fetching group requests for group: ${groupId}`);\r\n    this.checkData(groupId);\r\n    return await this.groupRepo.getGroupRequestsByGroupId(groupId);\r\n  }\r\n\r\n  async getGroupRequestsByAdminId(adminId: string): Promise<GroupRequestDocument[]> {\r\n    logger.debug(`Fetching group requests for admin: ${adminId}`);\r\n    this.checkData(adminId);\r\n    return await this.groupRepo.getGroupRequestsByAdminId(adminId);\r\n  }\r\n\r\n  async getGroupRequestsByUserId(userId: string): Promise<GroupRequestDocument[]> {\r\n    logger.debug(`Fetching group requests for user: ${userId}`);\r\n    this.checkData(userId);\r\n    return await this.groupRepo.getGroupRequestsByUserId(userId);\r\n  }\r\n\r\n  async getGroupRequestById(requestId: string): Promise<GroupRequestDocument | null> {\r\n    logger.debug(`Fetching group request by ID: ${requestId}`);\r\n    this.checkData(requestId);\r\n    return await this.groupRepo.findGroupRequestById(requestId);\r\n  }\r\n\r\n  async modifyGroupRequestStatus(\r\n    requestId: string,\r\n    status: 'Accepted' | 'Rejected'\r\n  ): Promise<{ message: string }> {\r\n    logger.debug(`Modifying group request status: ${requestId} to ${status}`);\r\n    this.checkData({ requestId, status });\r\n    const request = await this.groupRepo.findGroupRequestById(requestId);\r\n    if (!request) {\r\n      throw new ServiceError('Group request not found');\r\n    }\r\n    const group = await this.groupRepo.getGroupById(request.groupId.toString());\r\n    if (!group) {\r\n      throw new ServiceError('Group not found');\r\n    }\r\n    if (status === 'Accepted') {\r\n      if (group.isFull || group.members.length >= group.maxMembers) {\r\n        throw new ServiceError('Cannot accept request. Group is full (maximum 4 members)');\r\n      }\r\n      await this.groupRepo.updateGroupRequestStatus(requestId, 'Accepted');\r\n      if (group.price > 0) {\r\n        return { message: 'Request accepted. Awaiting payment' };\r\n      } else {\r\n        await this.groupRepo.addMemberToGroup(group._id.toString(), request.userId.toString());\r\n        await this.contactRepo.createContact({\r\n          userId: request.userId.toString(),\r\n          groupId: group._id.toString(),\r\n          type: 'group',\r\n        });\r\n        await this.groupRepo.deleteGroupRequest(requestId);\r\n        const updatedGroup = await this.groupRepo.getGroupById(group._id.toString());\r\n        if (\r\n          !updatedGroup?.members.some((m) => m.userId.toString() === request.userId.toString())\r\n        ) {\r\n          throw new ServiceError('Failed to add member to group');\r\n        }\r\n        return { message: 'User added to group successfully' };\r\n      }\r\n    } else {\r\n      await this.groupRepo.updateGroupRequestStatus(requestId, 'Rejected');\r\n      return { message: 'Request rejected successfully' };\r\n    }\r\n  }\r\n\r\n  async processGroupPayment(\r\n    paymentMethodId: string | { id: string },\r\n    amount: number,\r\n    requestId: string,\r\n    email: string,\r\n    groupRequestData: { groupId: string; userId: string },\r\n    returnUrl: string\r\n  ): Promise<{ paymentIntent: any }> {\r\n    logger.debug(`Processing payment for group request: ${requestId}`);\r\n    this.checkData({ paymentMethodId, amount, requestId, email, groupRequestData, returnUrl });\r\n\r\n    const request = await this.groupRepo.findGroupRequestById(requestId);\r\n    if (!request) {\r\n      throw new ServiceError('Group request not found');\r\n    }\r\n    const group = await this.groupRepo.getGroupById(request.groupId.toString());\r\n    if (!group) {\r\n      throw new ServiceError('Group not found');\r\n    }\r\n    if (group.isFull || group.members.length >= group.maxMembers) {\r\n      throw new ServiceError('Cannot complete payment. Group is full (maximum 4 members)');\r\n    }\r\n\r\n    const paymentMethodIdString =\r\n      typeof paymentMethodId === 'string' ? paymentMethodId : paymentMethodId.id;\r\n    if (!paymentMethodIdString) {\r\n      throw new ServiceError('Invalid paymentMethodId');\r\n    }\r\n\r\n    const idempotencyKey = uuid();\r\n    let customers = await stripe.customers.list({ email, limit: 1 });\r\n    let customer = customers.data.length > 0 ? customers.data[0] : null;\r\n\r\n    if (!customer) {\r\n      customer = await stripe.customers.create({\r\n        email,\r\n        payment_method: paymentMethodIdString,\r\n        invoice_settings: { default_payment_method: paymentMethodIdString },\r\n      });\r\n    }\r\n\r\n    const paymentIntent = await stripe.paymentIntents.create(\r\n      {\r\n        amount,\r\n        currency: 'inr',\r\n        customer: customer.id,\r\n        payment_method: paymentMethodIdString,\r\n        confirm: true,\r\n        description: `Payment for Group Request ID: ${requestId}`,\r\n        receipt_email: email,\r\n        metadata: { requestId, groupId: groupRequestData.groupId, userId: groupRequestData.userId },\r\n        return_url: `${returnUrl}?payment_status=success&request_id=${requestId}`,\r\n      },\r\n      { idempotencyKey }\r\n    );\r\n\r\n    if (paymentIntent.status === 'succeeded') {\r\n      await this.groupRepo.updateGroupPaymentStatus(requestId, amount / 100);\r\n      await this.groupRepo.addMemberToGroup(groupRequestData.groupId, groupRequestData.userId);\r\n      await this.contactRepo.createContact({\r\n        userId: groupRequestData.userId,\r\n        groupId: groupRequestData.groupId,\r\n        type: 'group',\r\n      });\r\n      await this.groupRepo.deleteGroupRequest(requestId);\r\n    }\r\n\r\n    return { paymentIntent };\r\n  }\r\n\r\n  async removeGroupMember(groupId: string, userId: string): Promise<GroupDocument> {\r\n    logger.debug(`Removing user ${userId} from group ${groupId}`);\r\n    this.checkData({ groupId, userId });\r\n    const group = await this.groupRepo.getGroupById(groupId);\r\n    if (!group) {\r\n      throw new ServiceError('Group not found');\r\n    }\r\n    const user = await this.userRepo.findById(userId);\r\n    if (!user) {\r\n      throw new ServiceError('User not found');\r\n    }\r\n    const updatedGroup = await this.groupRepo.removeGroupMember(groupId, userId);\r\n    if (!updatedGroup) {\r\n      throw new ServiceError('Failed to remove member from group');\r\n    }\r\n    const subject = `You have been removed from the group \"${group.name}\"`;\r\n    const text = `Hi ${user.name},\\n\\nWe wanted to inform you that you have been removed from the group \"${group.name}\" on ConnectSphere.\\n\\nIf you believe this was a mistake or have any questions, feel free to reach out to our support team.\\n\\nBest regards,\\nConnectSphere Team`;\r\n    await sendEmail(user.email, subject, text);\r\n    logger.info(`Removal email sent to: ${user.email}`);\r\n    return updatedGroup;\r\n  }\r\n\r\n  async deleteGroup(groupId: string): Promise<GroupDocument | null> {\r\n    logger.debug(`Deleting group: ${groupId}`);\r\n    this.checkData(groupId);\r\n    const group = await this.groupRepo.getGroupById(groupId);\r\n    if (!group) {\r\n      throw new ServiceError('Group not found');\r\n    }\r\n    await this.groupRepo.deleteGroupRequestsByGroupId(groupId);\r\n    return await this.groupRepo.deleteGroupById(groupId);\r\n  }\r\n\r\n  async updateGroupImage(\r\n    groupId: string,\r\n    profilePic?: string,\r\n    coverPic?: string\r\n  ): Promise<GroupDocument | null> {\r\n    logger.debug(`Updating group image for group: ${groupId}`);\r\n    this.checkData(groupId);\r\n    const updateData: { profilePic?: string; coverPic?: string } = {};\r\n    if (profilePic) updateData.profilePic = profilePic;\r\n    if (coverPic) updateData.coverPic = coverPic;\r\n    if (Object.keys(updateData).length === 0) {\r\n      throw new ServiceError('No image data provided');\r\n    }\r\n    return await this.groupRepo.updateGroupImage(groupId, updateData);\r\n  }\r\n\r\n  async getGroupDetailsForMembers(userId: string): Promise<GroupDocument[]> {\r\n    logger.debug(`Fetching group details for member: ${userId}`);\r\n    this.checkData(userId);\r\n    const groups = await this.groupRepo.getGroupDetailsByUserId(userId);\r\n    if (!groups || groups.length === 0) {\r\n      throw new ServiceError('User is not a member of any groups');\r\n    }\r\n    return groups;\r\n  }\r\n\r\n  async getAllGroupRequests(): Promise<GroupRequestDocument[]> {\r\n    logger.debug('Fetching all group requests');\r\n    return await this.groupRepo.getAllGroupRequests();\r\n  }\r\n}"]}