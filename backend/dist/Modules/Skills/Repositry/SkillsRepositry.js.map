{"version":3,"file":"SkillsRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Skills/Repositry/SkillsRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseRepository } from \"../../../core/Repositries/BaseRepositry.js\";\r\nimport { RepositoryError } from \"../../../core/Utils/ErrorHandler.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport { SkillInterface as ISkill } from \"../../../Interfaces/models/SkillInterface.js\";\r\nimport { Skill } from \"../../../models/skills.model.js\";\r\n\r\nexport class SkillsRepository extends BaseRepository<ISkill> {\r\n  constructor() {\r\n    super(Skill);\r\n  }\r\n\r\n   createSkill = async(data: Partial<ISkill>): Promise<ISkill> =>{\r\n    try {\r\n      logger.debug(\r\n        `Creating skill: ${data.name} for subcategory ${data.subcategoryId}`\r\n      );\r\n      const skill = await this.create(data);\r\n      logger.info(`Skill created: ${skill._id} (${skill.name})`);\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error creating skill: ${error}`);\r\n      throw new RepositoryError(`Failed to create skill: ${error}`);\r\n    }\r\n  }\r\n\r\n   getAllSkills = async(subcategoryId: string): Promise<ISkill[]> =>{\r\n    try {\r\n      logger.debug(`Fetching skills for subcategory: ${subcategoryId}`);\r\n      const skills = await this.model\r\n        .find({ subcategoryId })\r\n        .populate(\"categoryId\")\r\n        .populate(\"subcategoryId\")\r\n        .exec();\r\n      logger.info(\r\n        `Fetched ${skills.length} skills for subcategory ${subcategoryId}`\r\n      );\r\n      return skills;\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error fetching skills for subcategory ${subcategoryId}: ${error}`\r\n      );\r\n      throw new RepositoryError(`Failed to fetch skills: ${error}`);\r\n    }\r\n  }\r\n\r\n   getSkillById = async(id: string): Promise<ISkill | null> =>{\r\n    try {\r\n      logger.debug(`Fetching skill by ID: ${id}`);\r\n      const skill = await this.model\r\n        .findById(id)\r\n        .populate(\"categoryId\")\r\n        .populate(\"subcategoryId\")\r\n        .exec();\r\n      if (!skill) {\r\n        logger.warn(`Skill not found: ${id}`);\r\n      } else {\r\n        logger.info(`Skill fetched: ${id} (${skill.name})`);\r\n      }\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error fetching skill by ID ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to fetch skill: ${error}`);\r\n    }\r\n  }\r\n\r\n   updateSkill = async(id: string, data: Partial<ISkill>): Promise<ISkill | null> =>{\r\n    try {\r\n      logger.debug(`Updating skill: ${id}`);\r\n      const skill = await this.findByIdAndUpdate(id, data, { new: true });\r\n      if (!skill) {\r\n        logger.warn(`Skill not found for update: ${id}`);\r\n      } else {\r\n        logger.info(`Skill updated: ${id} (${skill.name})`);\r\n      }\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error updating skill ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to update skill: ${error}`);\r\n    }\r\n  }\r\n\r\n   deleteSkill = async(id: string): Promise<ISkill | null>=> {\r\n    try {\r\n      logger.debug(`Deleting skill: ${id}`);\r\n      const skill = await this.findByIdAndDelete(id);\r\n      if (!skill) {\r\n        logger.warn(`Skill not found for deletion: ${id}`);\r\n      } else {\r\n        logger.info(`Skill deleted: ${id} (${skill.name})`);\r\n      }\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error deleting skill ${id}: ${error}`);\r\n      throw new RepositoryError(`Failed to delete skill: ${error}`);\r\n    }\r\n  }\r\n\r\n   deleteManySkills = async(\r\n    categoryId: string\r\n  ): Promise<{ deletedCount: number }> =>{\r\n    try {\r\n      logger.debug(`Deleting skills for category: ${categoryId}`);\r\n      const result = await this.model.deleteMany({ categoryId }).exec();\r\n      logger.info(\r\n        `Deleted ${result.deletedCount} skills for category ${categoryId}`\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error deleting skills for category ${categoryId}: ${error}`\r\n      );\r\n      throw new RepositoryError(`Failed to delete skills: ${error}`);\r\n    }\r\n  }\r\n\r\n   deleteManySkillsBySubcategoryId = async(\r\n    subcategoryId: string\r\n  ): Promise<{ deletedCount: number }> =>{\r\n    try {\r\n      logger.debug(`Deleting skills for subcategory: ${subcategoryId}`);\r\n      const result = await this.model.deleteMany({ subcategoryId }).exec();\r\n      logger.info(\r\n        `Deleted ${result.deletedCount} skills for subcategory ${subcategoryId}`\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(\r\n        `Error deleting skills for subcategory ${subcategoryId}: ${error}`\r\n      );\r\n      throw new RepositoryError(`Failed to delete skills: ${error}`);\r\n    }\r\n  }\r\n\r\n   getSkills = async(): Promise<{ _id: string; name: string }[]> =>{\r\n    try {\r\n      logger.debug(\"Fetching all skills (name and ID only)\");\r\n      const skills = await this.model\r\n        .find({}, { name: 1, _id: 1 })\r\n        .lean()\r\n        .exec();\r\n      const result = skills.map((skill) => ({\r\n        _id: skill._id.toString(),\r\n        name: skill.name,\r\n      }));\r\n      logger.info(`Fetched ${result.length} skills`);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(`Error fetching skills: ${error}`);\r\n      throw new RepositoryError(`Failed to fetch skills: ${error}`);\r\n    }\r\n  }\r\n}\r\n"]}