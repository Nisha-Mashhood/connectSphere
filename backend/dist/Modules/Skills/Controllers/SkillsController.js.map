{"version":3,"file":"SkillsController.js","sourceRoot":"","sources":["../../../../src/Modules/Skills/Controllers/SkillsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { BaseController } from '../../../core/Controller/BaseController.js';\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport { SkillsService } from '../Service/SkillService.js';\r\nimport { SkillsRepository } from \"../Repositry/SkillsRepositry.js\";\r\nimport { SkillInterface as ISkill } from \"../../../Interfaces/models/SkillInterface.js\";\r\n\r\ninterface SkillRequest extends Request {\r\n  body: Partial<ISkill>;\r\n  params: { id?: string; subcategoryId?: string };\r\n}\r\n\r\nexport class SkillsController extends BaseController {\r\n  private skillsService: SkillsService;\r\n  private skillsRepo: SkillsRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.skillsService = new SkillsService();\r\n    this.skillsRepo = new SkillsRepository();\r\n  }\r\n\r\n  async createSkill(req: SkillRequest, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug(`Creating skill: ${req.body.name}`);\r\n      const isDuplicate = await this.skillsRepo.findOne({\r\n        name: req.body.name,\r\n        subcategoryId: req.body.subcategoryId,\r\n      });\r\n      if (isDuplicate) {\r\n        this.throwError(400, 'Skill name already exists in this subcategory');\r\n      }\r\n      const imagePath = req.file?.path;\r\n      const fileSize = req.file?.size;\r\n      const skill = await this.skillsService.createSkill(req.body, imagePath, fileSize);\r\n      this.sendCreated(res, skill, 'Skill created successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  async getAllSkills(req: SkillRequest, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug(`Fetching skills for subcategory: ${req.params.subcategoryId}`);\r\n      const skills = await this.skillsService.getAllSkills(req.params.subcategoryId!);\r\n      this.sendSuccess(res, skills, 'Skills fetched successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  async getSkillById(req: SkillRequest, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug(`Fetching skill: ${req.params.id}`);\r\n      const skill = await this.skillsService.getSkillById(req.params.id!);\r\n      if (!skill) {\r\n        this.throwError(404, 'Skill not found');\r\n      }\r\n      this.sendSuccess(res, skill, 'Skill fetched successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  async updateSkill(req: SkillRequest, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug(`Updating skill: ${req.params.id}`);\r\n      const isDuplicate = await this.skillsRepo.findOne({\r\n        name: req.body.name,\r\n        subcategoryId: req.body.subcategoryId || (await this.skillsRepo.getSkillById(req.params.id!))?.subcategoryId,\r\n        _id: { $ne: req.params.id },\r\n      });\r\n      if (isDuplicate) {\r\n        this.throwError(400, 'Skill name already exists in this subcategory');\r\n      }\r\n      const imagePath = req.file?.path;\r\n      const fileSize = req.file?.size;\r\n      const updatedSkill = await this.skillsService.updateSkill(req.params.id!, req.body, imagePath, fileSize);\r\n      if (!updatedSkill) {\r\n        this.throwError(404, 'Skill not found');\r\n      }\r\n      this.sendSuccess(res, updatedSkill, 'Skill updated successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  async deleteSkill(req: SkillRequest, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug(`Deleting skill: ${req.params.id}`);\r\n      const deletedSkill = await this.skillsService.deleteSkill(req.params.id!);\r\n      if (!deletedSkill) {\r\n        this.throwError(404, 'Skill not found');\r\n      }\r\n      this.sendNoContent(res, 'Skill deleted successfully');\r\n    } catch (error) {\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n\r\n  async getSkills(_req: Request, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug('Fetching all skills (name and ID only)');\r\n      const skills = await this.skillsService.getSkills();\r\n      this.sendSuccess(res, skills, 'Skills fetched successfully');\r\n    } catch (error) {\r\n      logger.error(`Error fetching skills: ${error}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n}"]}