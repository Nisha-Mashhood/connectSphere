{"version":3,"file":"SkillService.js","sourceRoot":"","sources":["../../../../src/Modules/Skills/Service/SkillService.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseService } from \"../../../core/Services/BaseService.js\";\r\nimport { SkillsRepository } from \"../Repositry/SkillsRepositry.js\";\r\nimport { SkillInterface as ISkill } from \"../../../Interfaces/models/SkillInterface.js\";\r\nimport logger from \"../../../core/Utils/Logger.js\";\r\nimport { uploadMedia } from \"../../../core/Utils/Cloudinary.js\";\r\nimport { ServiceError } from \"../../../core/Utils/ErrorHandler.js\";\r\n\r\nexport class SkillsService extends BaseService {\r\n  private skillsRepo: SkillsRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.skillsRepo = new SkillsRepository();\r\n  }\r\n\r\n  async createSkill(data: Partial<ISkill>, imagePath?: string, fileSize?: number): Promise<ISkill> {\r\n    try {\r\n      this.checkData(data);\r\n      logger.debug(`Creating skill: ${data.name} for subcategory ${data.subcategoryId}`);\r\n      let imageUrl: string | null = null;\r\n      if (imagePath) {\r\n        const folder = 'skills';\r\n        const { url } = await uploadMedia(imagePath, folder, fileSize);\r\n        imageUrl = url;\r\n        logger.info(`Uploaded image for skill: ${imageUrl}`);\r\n      }\r\n      const skill = await this.skillsRepo.createSkill({ ...data, imageUrl });\r\n      logger.info(`Skill created: ${skill._id} (${skill.name})`);\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error creating skill: ${error}`);\r\n      throw new ServiceError(`Failed to create skill: ${error}`);\r\n    }\r\n  }\r\n\r\n  async getAllSkills(subcategoryId: string): Promise<ISkill[]> {\r\n    try {\r\n      logger.debug(`Fetching skills for subcategory: ${subcategoryId}`);\r\n      const skills = await this.skillsRepo.getAllSkills(subcategoryId);\r\n      logger.info(`Fetched ${skills.length} skills`);\r\n      return skills;\r\n    } catch (error) {\r\n      logger.error(`Error fetching skills for subcategory ${subcategoryId}: ${error}`);\r\n      throw new ServiceError(`Failed to fetch skills: ${error}`);\r\n    }\r\n  }\r\n\r\n  async getSkillById(id: string): Promise<ISkill | null> {\r\n    try {\r\n      logger.debug(`Fetching skill: ${id}`);\r\n      const skill = await this.skillsRepo.getSkillById(id);\r\n      if (!skill) {\r\n        logger.warn(`Skill not found: ${id}`);\r\n      } else {\r\n        logger.info(`Skill fetched: ${id} (${skill.name})`);\r\n      }\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error fetching skill ${id}: ${error}`);\r\n      throw new ServiceError(`Failed to fetch skill: ${error}`);\r\n    }\r\n  }\r\n\r\n  async updateSkill(id: string, data: Partial<ISkill>, imagePath?: string, fileSize?: number): Promise<ISkill | null> {\r\n    try {\r\n      this.checkData(data);\r\n      logger.debug(`Updating skill: ${id}`);\r\n      let imageUrl: string | null = null;\r\n      if (imagePath) {\r\n        const folder = 'skills';\r\n        const { url } = await uploadMedia(imagePath, folder, fileSize);\r\n        imageUrl = url;\r\n        logger.info(`Uploaded image for skill: ${imageUrl}`);\r\n      }\r\n      const skill = await this.skillsRepo.updateSkill(id, { ...data, ...(imageUrl && { imageUrl }) });\r\n      if (!skill) {\r\n        logger.warn(`Skill not found for update: ${id}`);\r\n        this.throwError(`Skill not found: ${id}`);\r\n      }\r\n      logger.info(`Skill updated: ${id} (${skill?.name})`);\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error updating skill ${id}: ${error}`);\r\n      throw new ServiceError(`Failed to update skill: ${error}`);\r\n    }\r\n  }\r\n\r\n  async deleteSkill(id: string): Promise<ISkill | null> {\r\n    try {\r\n      logger.debug(`Deleting skill: ${id}`);\r\n      const skill = await this.skillsRepo.deleteSkill(id);\r\n      if (!skill) {\r\n        logger.warn(`Skill not found for deletion: ${id}`);\r\n        this.throwError(`Skill not found: ${id}`);\r\n      }\r\n      logger.info(`Skill deleted: ${id} (${skill?.name})`);\r\n      return skill;\r\n    } catch (error) {\r\n      logger.error(`Error deleting skill ${id}: ${error}`);\r\n      throw new ServiceError(`Failed to delete skill: ${error}`);\r\n    }\r\n  }\r\n\r\n  async getSkills(): Promise<{ _id: string; name: string }[]> {\r\n    try {\r\n      logger.debug('Fetching all skills (name and ID only)');\r\n      const skills = await this.skillsRepo.getSkills();\r\n      logger.info(`Fetched ${skills.length} skills`);\r\n      return skills;\r\n    } catch (error) {\r\n      logger.error(`Error fetching skills: ${error}`);\r\n      throw new ServiceError(`Failed to fetch skills: ${error}`);\r\n    }\r\n  }\r\n}"]}