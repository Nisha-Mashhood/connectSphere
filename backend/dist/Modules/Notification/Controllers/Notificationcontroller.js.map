{"version":3,"file":"Notificationcontroller.js","sourceRoot":"","sources":["../../../../src/Modules/Notification/Controllers/Notificationcontroller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { NotificationService } from '../Service/NotificationService.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\n\r\nexport class NotificationController {\r\n  private notificationService: NotificationService;\r\n\r\n  constructor() {\r\n    this.notificationService = new NotificationService();\r\n  }\r\n\r\n  getNotifications  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const userId = req.query.userId as string;\r\n      logger.debug(`Fetching notifications for user: ${userId}`);\r\n      if (!userId) {\r\n        logger.error('Missing userId');\r\n        throw new Error('userId is required');\r\n      }\r\n      const notifications = await this.notificationService.getNotifications(userId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Notifications fetched successfully',\r\n        data: notifications,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching notifications: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch notifications',\r\n      });\r\n    }\r\n  }\r\n\r\n  markAsRead  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const { notificationId } = req.params;\r\n      logger.debug(`Marking notification as read: ${notificationId}`);\r\n      const notification = await this.notificationService.markNotificationAsRead(notificationId);\r\n      if (!notification) {\r\n        logger.warn(`Notification not found: ${notificationId}`);\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Notification not found',\r\n        });\r\n        return;\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Notification marked as read',\r\n        data: notification,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error marking notification as read: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to mark notification as read',\r\n      });\r\n    }\r\n  }\r\n\r\n  getUnreadCount  = async(req: Request, res: Response): Promise<void> =>{\r\n    try {\r\n      const userId = req.query.userId as string;\r\n      logger.debug(`Fetching unread notification count for user: ${userId}`);\r\n      if (!userId) {\r\n        logger.error('Missing userId');\r\n        throw new Error('userId is required');\r\n      }\r\n      const count = await this.notificationService.getUnreadCount(userId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Unread notification count fetched successfully',\r\n        data: { count },\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching unread notification count: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Failed to fetch unread notification count',\r\n      });\r\n    }\r\n  }\r\n}"]}