{"version":3,"file":"NotificationRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Notification/Repositry/NotificationRepositry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,KAAK,EAAE,MAAM,UAAU,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,4CAA4C,CAAC;AAC5E,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AACtE,OAAO,MAAM,MAAM,+BAA+B,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,uCAAuC,CAAC;AAG7E,OAAO,aAAa,MAAM,kCAAkC,CAAC;AAC7D,OAAO,KAAK,MAAM,gCAAgC,CAAC;AAEnD,OAAO,mBAAmB,MAAM,yCAAyC,CAAC;AAC1E,OAAO,EAAE,IAAI,EAAE,MAAM,+BAA+B,CAAC;AAYrD,MAAM,OAAO,sBAAuB,SAAQ,cAAgC;IAC1E;QACE,KAAK,CAAC,oBAA+C,CAAC,CAAC;IACzD,CAAC;IAEO,UAAU,CAAC,EAA2B;QAC5C,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC3B,MAAM,IAAI,eAAe,CAAC,4BAA4B,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,KAAK,GAAG,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC1D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,eAAe,KAAK,EAAE,CAAC,CAAC;YACrC,MAAM,IAAI,eAAe,CAAC,+CAA+C,CAAC,CAAC;QAC7E,CAAC;QACD,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,MAAc;QAC1C,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,mCAAmC,MAAM,EAAE,CAAC,CAAC;YAC1D,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC;gBACxB,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;gBAC5B,MAAM,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE;gBAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;gBACtB,gBAAgB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;aAChC,CAAC,CAAC,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,yCAAyC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACvE,MAAM,IAAI,eAAe,CAAC,yCAAyC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACtF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B;QAC9B,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACpD,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC;gBACrB,MAAM,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE;gBAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;gBACtB,gBAAgB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;gBAC/B,gBAAgB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;aACpC,CAAC,CAAC,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,8CAA8C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5E,MAAM,IAAI,eAAe,CAAC,8CAA8C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,OAAe;QACnC,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,qCAAqC,OAAO,EAAE,CAAC,CAAC;YAC7D,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;YACtF,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAClF,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,eAAe,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,eAAuB;QAChD,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,mDAAmD,eAAe,EAAE,CAAC,CAAC;YACnF,MAAM,iBAAiB,GAAG,CAAC,MAAM,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;iBACtF,QAAQ,CAAwB,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;iBACvE,MAAM,CAAC,iBAAiB,CAAC;iBACzB,IAAI,EAAE,CAA6B,CAAC;YAEvC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACvB,MAAM,CAAC,IAAI,CAAC,4BAA4B,eAAe,EAAE,CAAC,CAAC;gBAC3D,OAAO,IAAI,CAAC;YACd,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,iBAAiB,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAC3C,YAAY,EAAE,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,IAAI;aACrE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,qCAAqC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACnE,MAAM,IAAI,eAAe,CAAC,qCAAqC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,YAAoB;QAC7C,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,gDAAgD,YAAY,EAAE,CAAC,CAAC;YAC7E,MAAM,UAAU,GAAG,MAAM,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;iBACjF,MAAM,CAAC,qBAAqB,CAAC;iBAC7B,IAAI,EAAE,CAAC;YACV,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,yBAAyB,YAAY,EAAE,CAAC,CAAC;gBACrD,OAAO,IAAI,CAAC;YACd,CAAC;YACD,OAAO;gBACL,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE;gBAC1C,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE;aAC3C,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACrE,MAAM,IAAI,eAAe,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CACxB,MAAc,EACd,MAAc,EACd,gBAAyB,EACzB,gBAAyB;QAEzB,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,uCAAuC,MAAM,WAAW,MAAM,EAAE,CAAC,CAAC;YAC/E,OAAO,MAAM,IAAI,CAAC,KAAK;iBACpB,OAAO,CAAC;gBACP,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;gBAC/B,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,MAAM;gBACjB,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC3E,gBAAgB;aACjB,CAAC;iBACD,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAClE,MAAM,IAAI,eAAe,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,cAAsB,EAAE,MAAyB;QAC9E,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,iCAAiC,cAAc,OAAO,MAAM,EAAE,CAAC,CAAC;YAC7E,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK;iBAClC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;iBACpG,IAAI,EAAE,CAAC;YACV,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC,2BAA2B,cAAc,EAAE,CAAC,CAAC;YAC3D,CAAC;YACD,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACrE,MAAM,IAAI,eAAe,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,SAAiB,EACjB,gBAAuB,EACvB,gBAAyB;QAEzB,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,yCAAyC,SAAS,EAAE,CAAC,CAAC;YACnE,MAAM,UAAU,GAAG;gBACjB,GAAG,CAAC,gBAAgB,IAAI,EAAE,gBAAgB,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBACzE,GAAG,CAAC,gBAAgB,IAAI,EAAE,gBAAgB,EAAE,CAAC;gBAC7C,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CACxC,EAAE,SAAS,EAAE,IAAI,EAAE,eAAe,EAAE,EACpC,EAAE,IAAI,EAAE,UAAU,EAAE,CACrB,CAAC,IAAI,EAAE,CAAC;YACT,OAAO,EAAE,aAAa,EAAE,MAAM,CAAC,aAAa,EAAE,CAAC;QACjD,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,sCAAsC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACpE,MAAM,IAAI,eAAe,CAAC,sCAAsC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACnF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,YAAuC;QAC9D,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,mCAAmC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;YACvE,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC;gBACvB,GAAG,YAAY;gBACf,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC9E,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;gBACpF,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,gCAAgC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC9D,MAAM,IAAI,eAAe,CAAC,gCAAgC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,MAAc;QAC3C,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;YAC3D,OAAO,MAAM,IAAI,CAAC,KAAK;iBACpB,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;iBAC3D,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;iBACvB,KAAK,CAAC,EAAE,CAAC;iBACT,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,4CAA4C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC1E,MAAM,IAAI,eAAe,CAAC,4CAA4C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,MAAc,EAAE,MAAc;QAC3D,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,oCAAoC,MAAM,cAAc,MAAM,EAAE,CAAC,CAAC;YAC/E,OAAO,MAAM,IAAI,CAAC,KAAK;iBACpB,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;iBAC7F,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACxE,MAAM,IAAI,eAAe,CAAC,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAC9B,MAAc,EACd,MAAc,EACd,OAAe;QAEf,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kDAAkD,MAAM,WAAW,MAAM,EAAE,CAAC,CAAC;YAC1F,OAAO,MAAM,IAAI,CAAC,KAAK;iBACpB,gBAAgB,CACf,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,EACpF,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,EACvD,EAAE,GAAG,EAAE,IAAI,EAAE,CACd;iBACA,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACxE,MAAM,IAAI,eAAe,CAAC,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,cAAsB;QACjD,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,iCAAiC,cAAc,EAAE,CAAC,CAAC;YAChE,OAAO,MAAM,IAAI,CAAC,KAAK;iBACpB,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;iBAC5G,IAAI,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACrE,MAAM,IAAI,eAAe,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,MAAc;QAC7C,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,2CAA2C,MAAM,EAAE,CAAC,CAAC;YAClE,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACvG,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,wCAAwC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACtE,MAAM,IAAI,eAAe,CAAC,wCAAwC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACrF,CAAC;IACH,CAAC;CACF","sourcesContent":["import { Model, Types } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { AppNotificationModel } from '../../../models/notification.modal.js';\r\nimport { AppNotification as IAppNotification } from '../../../Interfaces/models/AppNotification.js';\r\nimport { ITask } from '../../../Interfaces/models/ITask.js';\r\nimport Collaboration from '../../../models/collaboration.js';\r\nimport Group from '../../../models/group.model.js';\r\nimport { IMentor } from '../../../Interfaces/models/IMentor.js';\r\nimport UserConnectionModal from '../../../models/userConnection.modal.js';\r\nimport { Task } from '../../../models/task.modal.js';\r\n\r\ninterface CollaborationData {\r\n  userId: Types.ObjectId;\r\n  mentorId: IMentor;\r\n}\r\n\r\ninterface UserIds {\r\n  userId: string;\r\n  mentorUserId: string | null;\r\n}\r\n\r\nexport class NotificationRepository extends BaseRepository<IAppNotification> {\r\n  constructor() {\r\n    super(AppNotificationModel as Model<IAppNotification>);\r\n  }\r\n\r\n  private toObjectId(id: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = typeof id === 'string' ? id : id.toString();\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n  async getTasksForNotification(taskId: string): Promise<ITask | null> {\r\n    try {\r\n      logger.debug(`Fetching task for notification: ${taskId}`);\r\n      const now = new Date();\r\n      return await Task.findOne({\r\n        _id: this.toObjectId(taskId),\r\n        status: { $ne: 'completed' },\r\n        dueDate: { $gte: now },\r\n        notificationDate: { $lte: now },\r\n      }).exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching task for notification: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching task for notification: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getAllTasksForNotification(): Promise<ITask[]> {\r\n    try {\r\n      logger.debug('Fetching all tasks for notification');\r\n      const now = new Date();\r\n      return await Task.find({\r\n        status: { $ne: 'completed' },\r\n        dueDate: { $gte: now },\r\n        notificationDate: { $lte: now },\r\n        notificationTime: { $exists: true },\r\n      }).exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching all tasks for notification: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching all tasks for notification: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getGroupMembers(groupId: string): Promise<Types.ObjectId[]> {\r\n    try {\r\n      logger.debug(`Fetching group members for group: ${groupId}`);\r\n      const group = await Group.findById(this.toObjectId(groupId)).select('members').exec();\r\n      return group ? group.members.map(member => this.toObjectId(member.userId)) : [];\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching group members: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching group members: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getMentorIdAndUserId(collaborationId: string): Promise<UserIds | null> {\r\n    try {\r\n      logger.debug(`Fetching mentor and user IDs for collaboration: ${collaborationId}`);\r\n      const collaborationData = (await Collaboration.findById(this.toObjectId(collaborationId))\r\n        .populate<{ mentorId: IMentor }>({ path: 'mentorId', select: 'userId' })\r\n        .select('userId mentorId')\r\n        .exec()) as CollaborationData | null;\r\n\r\n      if (!collaborationData) {\r\n        logger.warn(`Collaboration not found: ${collaborationId}`);\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        userId: collaborationData.userId.toString(),\r\n        mentorUserId: collaborationData.mentorId?.userId?.toString() || null,\r\n      };\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching collaboration IDs: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching collaboration IDs: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getConnectionUserIds(connectionId: string): Promise<{ requester: string; recipient: string } | null> {\r\n    try {\r\n      logger.debug(`Fetching connection user IDs for connection: ${connectionId}`);\r\n      const connection = await UserConnectionModal.findById(this.toObjectId(connectionId))\r\n        .select('requester recipient')\r\n        .exec();\r\n      if (!connection) {\r\n        logger.warn(`Connection not found: ${connectionId}`);\r\n        return null;\r\n      }\r\n      return {\r\n        requester: connection.requester.toString(),\r\n        recipient: connection.recipient.toString(),\r\n      };\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching connection user IDs: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching connection user IDs: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findTaskNotification(\r\n    userId: string,\r\n    taskId: string,\r\n    notificationDate?: string,\r\n    notificationTime?: string\r\n  ): Promise<IAppNotification | null> {\r\n    try {\r\n      logger.debug(`Finding task notification for user: ${userId}, task: ${taskId}`);\r\n      return await this.model\r\n        .findOne({\r\n          userId: this.toObjectId(userId),\r\n          type: 'task_reminder',\r\n          relatedId: taskId,\r\n          notificationDate: notificationDate ? new Date(notificationDate) : undefined,\r\n          notificationTime,\r\n        })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error finding task notification: ${error.message}`);\r\n      throw new RepositoryError(`Error finding task notification: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async updateNotificationStatus(notificationId: string, status: 'unread' | 'read'): Promise<IAppNotification | null> {\r\n    try {\r\n      logger.debug(`Updating notification status: ${notificationId} to ${status}`);\r\n      const notification = await this.model\r\n        .findByIdAndUpdate(this.toObjectId(notificationId), { status, updatedAt: new Date() }, { new: true })\r\n        .exec();\r\n      if (!notification) {\r\n        logger.warn(`Notification not found: ${notificationId}`);\r\n      }\r\n      return notification;\r\n    } catch (error: any) {\r\n      logger.error(`Error updating notification status: ${error.message}`);\r\n      throw new RepositoryError(`Error updating notification status: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async updateTaskNotifications(\r\n    relatedId: string,\r\n    notificationDate?: Date,\r\n    notificationTime?: string\r\n  ): Promise<{ modifiedCount: number }> {\r\n    try {\r\n      logger.debug(`Updating task notifications for task: ${relatedId}`);\r\n      const updateData = {\r\n        ...(notificationDate && { notificationDate: new Date(notificationDate) }),\r\n        ...(notificationTime && { notificationTime }),\r\n        updatedAt: new Date(),\r\n      };\r\n      const result = await this.model.updateMany(\r\n        { relatedId, type: 'task_reminder' },\r\n        { $set: updateData }\r\n      ).exec();\r\n      return { modifiedCount: result.modifiedCount };\r\n    } catch (error: any) {\r\n      logger.error(`Error updating task notifications: ${error.message}`);\r\n      throw new RepositoryError(`Error updating task notifications: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async createNotification(notification: Partial<IAppNotification>): Promise<IAppNotification> {\r\n    try {\r\n      logger.debug(`Creating notification for user: ${notification.userId}`);\r\n      return await this.create({\r\n        ...notification,\r\n        userId: notification.userId ? this.toObjectId(notification.userId) : undefined,\r\n        senderId: notification.senderId ? this.toObjectId(notification.senderId) : undefined,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating notification: ${error.message}`);\r\n      throw new RepositoryError(`Error creating notification: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findNotificationByUserId(userId: string): Promise<IAppNotification[]> {\r\n    try {\r\n      logger.debug(`Fetching notifications for user: ${userId}`);\r\n      return await this.model\r\n        .find({ userId: this.toObjectId(userId), status: 'unread' })\r\n        .sort({ createdAt: -1 })\r\n        .limit(50)\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching notifications by user ID: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching notifications by user ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findNotificationByCallId(userId: string, callId: string): Promise<IAppNotification | null> {\r\n    try {\r\n      logger.debug(`Finding notification by call ID: ${callId} for user: ${userId}`);\r\n      return await this.model\r\n        .findOne({ userId: this.toObjectId(userId), callId, type: 'incoming_call', status: 'unread' })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error finding notification by call ID: ${error.message}`);\r\n      throw new RepositoryError(`Error finding notification by call ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async updateNotificationToMissed(\r\n    userId: string,\r\n    callId: string,\r\n    content: string\r\n  ): Promise<IAppNotification | null> {\r\n    try {\r\n      logger.debug(`Updating notification to missed call for user: ${userId}, call: ${callId}`);\r\n      return await this.model\r\n        .findOneAndUpdate(\r\n          { userId: this.toObjectId(userId), callId, type: 'incoming_call', status: 'unread' },\r\n          { type: 'missed_call', content, updatedAt: new Date() },\r\n          { new: true }\r\n        )\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error updating notification to missed: ${error.message}`);\r\n      throw new RepositoryError(`Error updating notification to missed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async markNotificationAsRead(notificationId: string): Promise<IAppNotification | null> {\r\n    try {\r\n      logger.debug(`Marking notification as read: ${notificationId}`);\r\n      return await this.model\r\n        .findByIdAndUpdate(this.toObjectId(notificationId), { status: 'read', updatedAt: new Date() }, { new: true })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error marking notification as read: ${error.message}`);\r\n      throw new RepositoryError(`Error marking notification as read: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getNotificationUnreadCount(userId: string): Promise<number> {\r\n    try {\r\n      logger.debug(`Counting unread notifications for user: ${userId}`);\r\n      return await this.model.countDocuments({ userId: this.toObjectId(userId), status: 'unread' }).exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error counting unread notifications: ${error.message}`);\r\n      throw new RepositoryError(`Error counting unread notifications: ${error.message}`);\r\n    }\r\n  }\r\n}"]}