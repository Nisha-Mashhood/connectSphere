{"version":3,"file":"NotificationService.js","sourceRoot":"","sources":["../../../../src/Modules/Notification/Service/NotificationService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uCAAuC,CAAC;AACpE,OAAO,EAAE,YAAY,EAAE,MAAM,qCAAqC,CAAC;AACnE,OAAO,MAAM,MAAM,+BAA+B,CAAC;AACnD,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAC;AAC/E,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AAIvE,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAAE,qBAAqB,EAAE,MAAM,oBAAoB,CAAC;AAE3D,IAAI,EAAE,GAAkB,IAAI,CAAC;AAqB7B,MAAM,OAAO,mBAAoB,SAAQ,WAAW;IAC1C,gBAAgB,CAAyB;IACzC,QAAQ,CAAiB;IAEjC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,gBAAgB,GAAG,IAAI,sBAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;IACvC,CAAC;IAED,gBAAgB,CAAC,GAAW;QAC1B,EAAE,GAAG,GAAG,CAAC;QACT,MAAM,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;IACjE,CAAC;IAEA,oBAAoB,GAAG,KAAK,EAC3B,MAAc,EACd,cAAuB,EACvB,gBAAyB,EACzB,gBAAyB,EACW,EAAE;QACtC,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,uCAAuC,MAAM,EAAE,CAAC,CAAC;YAC9D,MAAM,aAAa,GAA8B,EAAE,CAAC;YACpD,MAAM,IAAI,GAAiB,MAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;YACvF,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,CAAC,IAAI,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC;gBAC9C,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAC/B,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;gBAChC,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM,kBAAkB,CAAC,CAAC;gBAC5D,OAAO,aAAa,CAAC;YACvB,CAAC;YACD,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,WAAW,EAAE,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM,sBAAsB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;gBAC/E,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,IAAI,cAAc,GAAG,KAAK,CAAC;YAC3B,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACnD,MAAM,oBAAoB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC7D,MAAM,SAAS,GACb,WAAW,CAAC,OAAO,EAAE,KAAK,oBAAoB,CAAC,OAAO,EAAE;oBACxD,WAAW,CAAC,QAAQ,EAAE,KAAK,oBAAoB,CAAC,QAAQ,EAAE;oBAC1D,WAAW,CAAC,WAAW,EAAE,KAAK,oBAAoB,CAAC,WAAW,EAAE,CAAC;gBAEnE,IAAI,SAAS,EAAE,CAAC;oBACd,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBAC5D,IAAI,MAAM,EAAE,CAAC;wBACX,MAAM,oBAAoB,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;wBACnD,oBAAoB,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;wBAClE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC;wBAClF,cAAc,GAAG,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,mBAAmB;oBAC7D,CAAC;gBACH,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,+CAA+C,CAAC,CAAC;gBAChF,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,IAAI,CAAC,cAAc,EAAE,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM,sBAAsB,CAAC,CAAC;gBAChE,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,IAAI,UAAU,GAAa,EAAE,CAAC;YAC9B,IAAI,cAAc,EAAE,CAAC;gBACnB,UAAU,GAAG,CAAC,cAAc,CAAC,CAAC;YAChC,CAAC;iBAAM,IAAI,IAAI,CAAC,WAAW,KAAK,eAAe,EAAE,CAAC;gBAChD,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACrG,IAAI,gBAAgB,EAAE,CAAC;oBACrB,UAAU,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,CAAC,YAAY,CAAC,CAAC,MAAM,CAC1E,CAAC,EAAE,EAAgB,EAAE,CAAC,EAAE,KAAK,IAAI,CAClC,CAAC;gBACJ,CAAC;YACH,CAAC;iBAAM,IAAI,IAAI,CAAC,WAAW,KAAK,OAAO,EAAE,CAAC;gBACxC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5F,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7D,CAAC;iBAAM,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;gBAC1C,UAAU,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACzF,UAAU,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YACxC,CAAC;YAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,MAAM,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBACrD,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzE,MAAM,YAAY,GAAG,QAAQ,EAAE,IAAI,IAAI,SAAS,CAAC;YAEjD,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE,CAAC;gBAChC,IAAI,WAAW,GAAG,KAAK,CAAC;gBACxB,IAAI,EAAE,EAAE,CAAC;oBACP,MAAM,IAAI,GAAG,QAAQ,MAAM,EAAE,CAAC;oBAC9B,MAAM,aAAa,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;oBACrD,WAAW,GAAG,aAAa,CAAC,IAAI,GAAG,CAAC,CAAC;oBACrC,MAAM,CAAC,KAAK,CAAC,QAAQ,MAAM,uBAAuB,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC,CAAC;gBACnF,CAAC;gBAED,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CACjE,MAAM,EACN,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EACnB,gBAAgB,EAChB,gBAAgB,CACjB,CAAC;gBAEF,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;oBACnD,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAC7G,CAAC;gBAED,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,MAAM,UAAU,GAAG,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;oBACxD,MAAM,OAAO,GAAG,UAAU;wBACxB,CAAC,CAAC,wBAAwB,IAAI,CAAC,IAAI,eAAe;wBAClD,CAAC,CAAC,mBAAmB,IAAI,CAAC,IAAI,iBAAiB,YAAY,cAAc,CAAC;oBAE5E,MAAM,gBAAgB,GAA8B;wBAClD,MAAM;wBACN,IAAI,EAAE,eAAe;wBACrB,OAAO;wBACP,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;wBAC9B,QAAQ,EAAE,IAAI,CAAC,SAAS;wBACxB,MAAM,EAAE,QAAQ;wBAChB,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS;wBAC3E,gBAAgB;wBAChB,WAAW,EAAE;4BACX,WAAW,EAAE,IAAI,CAAC,WAAW;4BAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;yBACrC;qBACF,CAAC;oBAEF,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;oBAChF,IAAI,CAAC,YAAY,EAAE,CAAC;wBAClB,MAAM,CAAC,IAAI,CAAC,0CAA0C,MAAM,YAAY,MAAM,EAAE,CAAC,CAAC;wBAClF,SAAS;oBACX,CAAC;gBACH,CAAC;gBAED,MAAM,OAAO,GAA4B;oBACvC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE;oBAChC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE;oBACtC,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,OAAO,EAAE,YAAY,CAAC,OAAO;oBAC7B,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE;oBAC1C,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,gBAAgB,EAAE,YAAY,CAAC,gBAAgB,EAAE,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC5E,gBAAgB,EAAE,YAAY,CAAC,gBAAgB;oBAC/C,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,WAAW,EAAE,YAAY,CAAC,WAAW;iBACtC,CAAC;gBAEF,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,IAAI,WAAW,IAAI,EAAE,EAAE,CAAC;oBACtB,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;oBAClD,MAAM,CAAC,IAAI,CAAC,wBAAwB,YAAY,CAAC,GAAG,YAAY,MAAM,aAAa,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBACpG,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,uBAAuB,YAAY,CAAC,GAAG,qBAAqB,MAAM,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC3G,CAAC;YACH,CAAC;YACD,OAAO,aAAa,CAAC;QACvB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAClE,MAAM,IAAI,YAAY,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC,CAAA;IAEA,yBAAyB,GAAG,KAAK,IAAuC,EAAE;QACzE,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACnD,MAAM,gBAAgB,GAA8B,EAAE,CAAC;YACvD,MAAM,KAAK,GAAY,MAAM,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,CAAC;YAChF,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAE/B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,WAAW,EAAE,CAAC;oBAC5H,SAAS;gBACX,CAAC;gBACD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,oBAAoB,CACnD,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EACnB,SAAS,EACT,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EACjD,IAAI,CAAC,gBAAgB,CACtB,CAAC;gBACF,gBAAgB,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;YAC1C,CAAC;YAED,OAAO,gBAAgB,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3E,MAAM,IAAI,YAAY,CAAC,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACvF,CAAC;IACH,CAAC,CAAA;IAEA,gBAAgB,GAAG,KAAK,EACvB,MAAc,EACd,gBAA0C,EAC1C,QAAgB,EAChB,SAAiB,EACjB,WAAoB,EACpB,MAAe,EACY,EAAE;QAC7B,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,iCAAiC,MAAM,WAAW,gBAAgB,EAAE,CAAC,CAAC;YACnF,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;YAElE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,OAAe,CAAC;YAEpB,IAAI,gBAAgB,KAAK,SAAS,EAAE,CAAC;gBACnC,OAAO,GAAG,OAAO,WAAW,IAAI,MAAM,iBAAiB,MAAM,EAAE,IAAI,IAAI,QAAQ,EAAE,CAAC;YACpF,CAAC;iBAAM,IAAI,gBAAgB,KAAK,eAAe,EAAE,CAAC;gBAChD,OAAO,GAAG,YAAY,WAAW,IAAI,MAAM,cAAc,MAAM,EAAE,IAAI,IAAI,QAAQ,EAAE,CAAC;YACtF,CAAC;iBAAM,IAAI,gBAAgB,KAAK,aAAa,EAAE,CAAC;gBAC9C,OAAO,GAAG,UAAU,WAAW,IAAI,MAAM,cAAc,MAAM,EAAE,IAAI,IAAI,QAAQ,EAAE,CAAC;YACpF,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;gBAC5E,IAAI,CAAC,IAAI,EAAE,CAAC;oBACV,OAAO,GAAG,sBAAsB,MAAM,EAAE,IAAI,IAAI,QAAQ,EAAE,CAAC;gBAC7D,CAAC;qBAAM,CAAC;oBACN,MAAM,UAAU,GAAG,MAAM,KAAK,QAAQ,CAAC;oBACvC,OAAO,GAAG,UAAU;wBAClB,CAAC,CAAC,wBAAwB,IAAI,CAAC,IAAI,eAAe;wBAClD,CAAC,CAAC,mBAAmB,IAAI,CAAC,IAAI,iBAAiB,MAAM,EAAE,IAAI,IAAI,QAAQ,cAAc,CAAC;gBAC1F,CAAC;YACH,CAAC;YAED,MAAM,gBAAgB,GAA8B;gBAClD,MAAM;gBACN,IAAI,EAAE,gBAAgB;gBACtB,OAAO;gBACP,SAAS;gBACT,QAAQ;gBACR,MAAM,EAAE,QAAQ;gBAChB,MAAM;aACP,CAAC;YAEF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;YAEtF,IAAI,EAAE,EAAE,CAAC;gBACP,MAAM,aAAa,GAAG,MAAM,EAAE,CAAC,EAAE,CAAC,QAAQ,MAAM,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;gBACjE,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;oBAC3B,MAAM,OAAO,GAA4B;wBACvC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE;wBAChC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE;wBACtC,IAAI,EAAE,YAAY,CAAC,IAAI;wBACvB,OAAO,EAAE,YAAY,CAAC,OAAO;wBAC7B,SAAS,EAAE,YAAY,CAAC,SAAS;wBACjC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE;wBAC1C,MAAM,EAAE,YAAY,CAAC,MAAM;wBAC3B,MAAM,EAAE,YAAY,CAAC,MAAM;wBAC3B,gBAAgB,EAAE,YAAY,CAAC,gBAAgB,EAAE,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC5E,gBAAgB,EAAE,YAAY,CAAC,gBAAgB;wBAC/C,SAAS,EAAE,YAAY,CAAC,SAAS;wBACjC,SAAS,EAAE,YAAY,CAAC,SAAS;wBACjC,WAAW,EAAE,YAAY,CAAC,WAAW;qBACtC,CAAC;oBACF,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;oBAClD,MAAM,CAAC,IAAI,CAAC,wBAAwB,YAAY,CAAC,GAAG,YAAY,MAAM,EAAE,CAAC,CAAC;gBAC5E,CAAC;YACH,CAAC;YAED,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC7D,MAAM,IAAI,YAAY,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzE,CAAC;IACH,CAAC,CAAA;IAEA,8BAA8B,GAAG,KAAK,EACrC,MAAc,EACd,MAAc,EACd,OAAe,EACmB,EAAE;QACpC,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,kDAAkD,MAAM,WAAW,MAAM,EAAE,CAAC,CAAC;YAC1F,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;YAE5C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YACrG,IAAI,YAAY,IAAI,EAAE,EAAE,CAAC;gBACvB,MAAM,OAAO,GAA4B;oBACvC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE;oBAChC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE;oBACtC,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,OAAO,EAAE,YAAY,CAAC,OAAO;oBAC7B,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE;oBAC1C,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,gBAAgB,EAAE,YAAY,CAAC,gBAAgB,EAAE,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC5E,gBAAgB,EAAE,YAAY,CAAC,gBAAgB;oBAC/C,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,SAAS,EAAE,YAAY,CAAC,SAAS;oBACjC,WAAW,EAAE,YAAY,CAAC,WAAW;iBACtC,CAAC;gBACF,mBAAmB,CAAC,IAAI,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;YAC5D,CAAC;YACD,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,+CAA+C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC7E,MAAM,IAAI,YAAY,CAAC,+CAA+C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzF,CAAC;IACH,CAAC,CAAA;IAEA,gBAAgB,GAAG,KAAK,EAAC,MAAc,EAA+B,EAAE;QACvE,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,oCAAoC,MAAM,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACvB,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;QACtE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,YAAY,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC,CAAA;IAEA,sBAAsB,GAAG,KAAK,EAAC,cAAsB,EAAoC,EAAE;QAC1F,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,iCAAiC,cAAc,EAAE,CAAC,CAAC;YAChE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC/B,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QAC5E,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACrE,MAAM,IAAI,YAAY,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACjF,CAAC;IACH,CAAC,CAAA;IAEA,cAAc,GAAG,KAAK,EAAC,MAAc,EAAmB,EAAE;QACzD,IAAI,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,gDAAgD,MAAM,EAAE,CAAC,CAAC;YACvE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACvB,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QACxE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3E,MAAM,IAAI,YAAY,CAAC,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACvF,CAAC;IACH,CAAC,CAAA;CACF","sourcesContent":["import { BaseService } from '../../../core/Services/BaseService.js';\r\nimport { ServiceError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport { NotificationRepository } from '../Repositry/NotificationRepositry.js';\r\nimport { UserRepository } from '../../Auth/Repositry/UserRepositry.js';\r\nimport { AppNotification as IAppNotification } from '../../../Interfaces/models/AppNotification.js';\r\nimport { ITask } from '../../../Interfaces/models/ITask.js';\r\nimport { Server } from 'socket.io';\r\nimport { notificationEmitter } from '../../../socket/socket.js';\r\nimport { convertTo24HourFormat } from '../Utils/Helper.js';\r\n\r\nlet io: Server | null = null;\r\n\r\nexport interface TaskNotificationPayload {\r\n  _id: string;\r\n  userId: string;\r\n  type: 'message' | 'incoming_call' | 'missed_call' | 'task_reminder';\r\n  content: string;\r\n  relatedId: string;\r\n  senderId: string;\r\n  status: 'unread' | 'read';\r\n  callId?: string;\r\n  notificationDate?: string;\r\n  notificationTime?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  taskContext?: {\r\n    contextType: 'profile' | 'group' | 'collaboration' | 'userconnection';\r\n    contextId: string;\r\n  };\r\n}\r\n\r\nexport class NotificationService extends BaseService {\r\n  private notificationRepo: NotificationRepository;\r\n  private userRepo: UserRepository;\r\n\r\n  constructor() {\r\n    super();\r\n    this.notificationRepo = new NotificationRepository();\r\n    this.userRepo = new UserRepository();\r\n  }\r\n\r\n  initializeSocket(_io: Server) {\r\n    io = _io;\r\n    logger.info('Notification service initialized with Socket.IO');\r\n  }\r\n\r\n   sendTaskNotification = async(\r\n    taskId: string,\r\n    specificUserId?: string,\r\n    notificationDate?: string,\r\n    notificationTime?: string\r\n  ): Promise<TaskNotificationPayload[]> => {\r\n    try {\r\n      logger.debug(`Sending task notification for task: ${taskId}`);\r\n      const notifications: TaskNotificationPayload[] = [];\r\n      const task: ITask | null = await this.notificationRepo.getTasksForNotification(taskId);\r\n      if (!task) {\r\n        logger.warn(`No task found for ID ${taskId}`);\r\n        return notifications;\r\n      }\r\n\r\n      const currentTime = new Date();\r\n      if (task.status === 'completed') {\r\n        logger.info(`Skipping task ${task.taskId}: Task completed`);\r\n        return notifications;\r\n      }\r\n      if (new Date(task.dueDate) < currentTime) {\r\n        logger.info(`Skipping task ${task.taskId}: Due date passed (${task.dueDate})`);\r\n        return notifications;\r\n      }\r\n\r\n      let isTimeToNotify = false;\r\n      if (task.notificationDate && task.notificationTime) {\r\n        const taskNotificationDate = new Date(task.notificationDate);\r\n        const isSameDay =\r\n          currentTime.getDate() === taskNotificationDate.getDate() &&\r\n          currentTime.getMonth() === taskNotificationDate.getMonth() &&\r\n          currentTime.getFullYear() === taskNotificationDate.getFullYear();\r\n\r\n        if (isSameDay) {\r\n          const time24 = convertTo24HourFormat(task.notificationTime);\r\n          if (time24) {\r\n            const taskNotificationTime = new Date(currentTime);\r\n            taskNotificationTime.setHours(time24.hours, time24.minutes, 0, 0);\r\n            const timeDiff = Math.abs(currentTime.getTime() - taskNotificationTime.getTime());\r\n            isTimeToNotify = timeDiff <= 60 * 1000; // ±1 minute window\r\n          }\r\n        }\r\n      } else {\r\n        logger.warn(`Task ${task.taskId} missing notificationDate or notificationTime`);\r\n        return notifications;\r\n      }\r\n\r\n      if (!isTimeToNotify) {\r\n        logger.info(`Skipping task ${task.taskId}: Not time to notify`);\r\n        return notifications;\r\n      }\r\n\r\n      let recipients: string[] = [];\r\n      if (specificUserId) {\r\n        recipients = [specificUserId];\r\n      } else if (task.contextType === 'collaboration') {\r\n        const collaborationIds = await this.notificationRepo.getMentorIdAndUserId(task.contextId.toString());\r\n        if (collaborationIds) {\r\n          recipients = [collaborationIds.userId, collaborationIds.mentorUserId].filter(\r\n            (id): id is string => id !== null\r\n          );\r\n        }\r\n      } else if (task.contextType === 'group') {\r\n        const groupMembers = await this.notificationRepo.getGroupMembers(task.contextId.toString());\r\n        recipients = groupMembers.map(member => member.toString());\r\n      } else if (task.contextType === 'profile') {\r\n        recipients = [task.createdBy.toString(), ...task.assignedUsers.map(id => id.toString())];\r\n        recipients = [...new Set(recipients)];\r\n      }\r\n\r\n      if (recipients.length === 0) {\r\n        logger.warn(`No recipients for task ${task.taskId}`);\r\n        return notifications;\r\n      }\r\n\r\n      const assigner = await this.userRepo.findById(task.createdBy.toString());\r\n      const assignerName = assigner?.name || 'Unknown';\r\n\r\n      for (const userId of recipients) {\r\n        let isConnected = false;\r\n        if (io) {\r\n          const room = `user_${userId}`;\r\n          const socketsInRoom = await io.in(room).allSockets();\r\n          isConnected = socketsInRoom.size > 0;\r\n          logger.debug(`User ${userId} connected for task ${task.taskId}: ${isConnected}`);\r\n        }\r\n\r\n        let notification = await this.notificationRepo.findTaskNotification(\r\n          userId,\r\n          task._id.toString(),\r\n          notificationDate,\r\n          notificationTime\r\n        );\r\n\r\n        if (notification && notification.status === 'read') {\r\n          notification = await this.notificationRepo.updateNotificationStatus(notification._id.toString(), 'unread');\r\n        }\r\n\r\n        if (!notification) {\r\n          const isAssigner = userId === task.createdBy.toString();\r\n          const content = isAssigner\r\n            ? `Reminder: Your task \"${task.name}\" is due soon`\r\n            : `Reminder: Task \"${task.name}\" assigned by ${assignerName} is due soon`;\r\n\r\n          const notificationData: Partial<IAppNotification> = {\r\n            userId,\r\n            type: 'task_reminder',\r\n            content,\r\n            relatedId: task._id.toString(),\r\n            senderId: task.createdBy,\r\n            status: 'unread',\r\n            notificationDate: notificationDate ? new Date(notificationDate) : undefined,\r\n            notificationTime,\r\n            taskContext: {\r\n              contextType: task.contextType,\r\n              contextId: task.contextId.toString(),\r\n            },\r\n          };\r\n\r\n          notification = await this.notificationRepo.createNotification(notificationData);\r\n          if (!notification) {\r\n            logger.warn(`Failed to create notification for user ${userId} on task ${taskId}`);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        const payload: TaskNotificationPayload = {\r\n          _id: notification._id.toString(),\r\n          userId: notification.userId.toString(),\r\n          type: notification.type,\r\n          content: notification.content,\r\n          relatedId: notification.relatedId,\r\n          senderId: notification.senderId.toString(),\r\n          status: notification.status,\r\n          callId: notification.callId,\r\n          notificationDate: notification.notificationDate?.toISOString().split('T')[0],\r\n          notificationTime: notification.notificationTime,\r\n          createdAt: notification.createdAt,\r\n          updatedAt: notification.updatedAt,\r\n          taskContext: notification.taskContext,\r\n        };\r\n\r\n        notifications.push(payload);\r\n        if (isConnected && io) {\r\n          notificationEmitter.emit('notification', payload);\r\n          logger.info(`Emitted notification ${notification._id} to user ${userId} for task ${task.taskId}`);\r\n        } else {\r\n          logger.info(`Stored notification ${notification._id} for offline user ${userId} on task ${task.taskId}`);\r\n        }\r\n      }\r\n      return notifications;\r\n    } catch (error: any) {\r\n      logger.error(`Error sending task notification: ${error.message}`);\r\n      throw new ServiceError(`Error sending task notification: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   checkAndSendNotifications = async(): Promise<TaskNotificationPayload[]> => {\r\n    try {\r\n      logger.debug('Checking and sending notifications');\r\n      const allNotifications: TaskNotificationPayload[] = [];\r\n      const tasks: ITask[] = await this.notificationRepo.getAllTasksForNotification();\r\n      const currentTime = new Date();\r\n\r\n      for (const task of tasks) {\r\n        if (!task.notificationDate || !task.notificationTime || task.status === 'completed' || new Date(task.dueDate) < currentTime) {\r\n          continue;\r\n        }\r\n        const notifications = await this.sendTaskNotification(\r\n          task._id.toString(),\r\n          undefined,\r\n          task.notificationDate.toISOString().split('T')[0],\r\n          task.notificationTime\r\n        );\r\n        allNotifications.push(...notifications);\r\n      }\r\n\r\n      return allNotifications;\r\n    } catch (error: any) {\r\n      logger.error(`Error checking and sending notifications: ${error.message}`);\r\n      throw new ServiceError(`Error checking and sending notifications: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   sendNotification = async(\r\n    userId: string,\r\n    notificationType: IAppNotification['type'],\r\n    senderId: string,\r\n    relatedId: string,\r\n    contentType?: string,\r\n    callId?: string\r\n  ): Promise<IAppNotification> => {\r\n    try {\r\n      logger.debug(`Sending notification to user: ${userId}, type: ${notificationType}`);\r\n      this.checkData({ userId, notificationType, senderId, relatedId });\r\n\r\n      const sender = await this.userRepo.findById(senderId);\r\n      let content: string;\r\n\r\n      if (notificationType === 'message') {\r\n        content = `New ${contentType || 'text'} message from ${sender?.name || senderId}`;\r\n      } else if (notificationType === 'incoming_call') {\r\n        content = `Incoming ${contentType || 'call'} call from ${sender?.name || senderId}`;\r\n      } else if (notificationType === 'missed_call') {\r\n        content = `Missed ${contentType || 'call'} call from ${sender?.name || senderId}`;\r\n      } else {\r\n        const task = await this.notificationRepo.getTasksForNotification(relatedId);\r\n        if (!task) {\r\n          content = `Task reminder from ${sender?.name || senderId}`;\r\n        } else {\r\n          const isAssigner = userId === senderId;\r\n          content = isAssigner\r\n            ? `Reminder: Your task \"${task.name}\" is due soon`\r\n            : `Reminder: Task \"${task.name}\" assigned by ${sender?.name || senderId} is due soon`;\r\n        }\r\n      }\r\n\r\n      const notificationData: Partial<IAppNotification> = {\r\n        userId,\r\n        type: notificationType,\r\n        content,\r\n        relatedId,\r\n        senderId,\r\n        status: 'unread',\r\n        callId,\r\n      };\r\n\r\n      const notification = await this.notificationRepo.createNotification(notificationData);\r\n\r\n      if (io) {\r\n        const socketsInRoom = await io.in(`user_${userId}`).allSockets();\r\n        if (socketsInRoom.size > 0) {\r\n          const payload: TaskNotificationPayload = {\r\n            _id: notification._id.toString(),\r\n            userId: notification.userId.toString(),\r\n            type: notification.type,\r\n            content: notification.content,\r\n            relatedId: notification.relatedId,\r\n            senderId: notification.senderId.toString(),\r\n            status: notification.status,\r\n            callId: notification.callId,\r\n            notificationDate: notification.notificationDate?.toISOString().split('T')[0],\r\n            notificationTime: notification.notificationTime,\r\n            createdAt: notification.createdAt,\r\n            updatedAt: notification.updatedAt,\r\n            taskContext: notification.taskContext,\r\n          };\r\n          notificationEmitter.emit('notification', payload);\r\n          logger.info(`Emitted notification ${notification._id} to user ${userId}`);\r\n        }\r\n      }\r\n\r\n      return notification;\r\n    } catch (error: any) {\r\n      logger.error(`Error sending notification: ${error.message}`);\r\n      throw new ServiceError(`Error sending notification: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   updateCallNotificationToMissed = async(\r\n    userId: string,\r\n    callId: string,\r\n    content: string\r\n  ): Promise<IAppNotification | null> => {\r\n    try {\r\n      logger.debug(`Updating call notification to missed for user: ${userId}, call: ${callId}`);\r\n      this.checkData({ userId, callId, content });\r\n\r\n      const notification = await this.notificationRepo.updateNotificationToMissed(userId, callId, content);\r\n      if (notification && io) {\r\n        const payload: TaskNotificationPayload = {\r\n          _id: notification._id.toString(),\r\n          userId: notification.userId.toString(),\r\n          type: notification.type,\r\n          content: notification.content,\r\n          relatedId: notification.relatedId,\r\n          senderId: notification.senderId.toString(),\r\n          status: notification.status,\r\n          callId: notification.callId,\r\n          notificationDate: notification.notificationDate?.toISOString().split('T')[0],\r\n          notificationTime: notification.notificationTime,\r\n          createdAt: notification.createdAt,\r\n          updatedAt: notification.updatedAt,\r\n          taskContext: notification.taskContext,\r\n        };\r\n        notificationEmitter.emit('notification.updated', payload);\r\n      }\r\n      return notification;\r\n    } catch (error: any) {\r\n      logger.error(`Error updating call notification to missed: ${error.message}`);\r\n      throw new ServiceError(`Error updating call notification to missed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getNotifications = async(userId: string): Promise<IAppNotification[]> => {\r\n    try {\r\n      logger.debug(`Fetching notifications for user: ${userId}`);\r\n      this.checkData(userId);\r\n      return await this.notificationRepo.findNotificationByUserId(userId);\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching notifications: ${error.message}`);\r\n      throw new ServiceError(`Error fetching notifications: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   markNotificationAsRead = async(notificationId: string): Promise<IAppNotification | null> => {\r\n    try {\r\n      logger.debug(`Marking notification as read: ${notificationId}`);\r\n      this.checkData(notificationId);\r\n      return await this.notificationRepo.markNotificationAsRead(notificationId);\r\n    } catch (error: any) {\r\n      logger.error(`Error marking notification as read: ${error.message}`);\r\n      throw new ServiceError(`Error marking notification as read: ${error.message}`);\r\n    }\r\n  }\r\n\r\n   getUnreadCount = async(userId: string): Promise<number> => {\r\n    try {\r\n      logger.debug(`Fetching unread notification count for user: ${userId}`);\r\n      this.checkData(userId);\r\n      return await this.notificationRepo.getNotificationUnreadCount(userId);\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching unread notification count: ${error.message}`);\r\n      throw new ServiceError(`Error fetching unread notification count: ${error.message}`);\r\n    }\r\n  }\r\n}"]}