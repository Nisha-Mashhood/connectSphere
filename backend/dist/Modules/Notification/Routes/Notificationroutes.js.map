{"version":3,"file":"Notificationroutes.js","sourceRoot":"","sources":["../../../../src/Modules/Notification/Routes/Notificationroutes.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAE,sBAAsB,EAAE,MAAM,0CAA0C,CAAC;AAClF,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,8CAA8C,CAAC;AAC1E,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AAEzE,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAChC,MAAM,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AAC5D,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;AAE5C,gCAAgC;AAChC,0CAA0C;AAC1C,yCAAyC;AACzC,qCAAqC;AACrC,cAAc;AAEd,MAAM,CAAC,GAAG,CACR,mBAAmB,CAAC,gBAAgB,EACpC,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAC3E,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CACrE,CAAC;AAEF,MAAM,CAAC,KAAK,CACV,mBAAmB,CAAC,UAAU,EAC9B,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAC3E,sBAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAC/D,CAAC;AAEF,MAAM,CAAC,GAAG,CACR,mBAAmB,CAAC,cAAc,EAClC,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAC3E,sBAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,sBAAsB,CAAC,CACnE,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import express from 'express';\r\nimport { NotificationController } from '../Controllers/Notificationcontroller.js';\r\nimport { AuthMiddleware } from '../../../middlewares/auth.middleware.js';\r\nimport { apiLimiter } from '../../../middlewares/ratelimit.middleware.js';\r\nimport { NOTIFICATION_ROUTES } from '../Constant/Notification.routes.js';\r\n\r\nconst router = express.Router();\r\nconst notificationController = new NotificationController();\r\nconst authMiddleware = new AuthMiddleware();\r\n\r\n// const NOTIFICATION_ROUTES = {\r\n//   GetNotifications: '/getNotification',\r\n//   MarkAsRead: '/:notificationId/read',\r\n//   GetUnreadCount: '/unread-count',\r\n// } as const;\r\n\r\nrouter.get(\r\n  NOTIFICATION_ROUTES.GetNotifications,\r\n  [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus],\r\n  notificationController.getNotifications.bind(notificationController)\r\n);\r\n\r\nrouter.patch(\r\n  NOTIFICATION_ROUTES.MarkAsRead,\r\n  [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus],\r\n  notificationController.markAsRead.bind(notificationController)\r\n);\r\n\r\nrouter.get(\r\n  NOTIFICATION_ROUTES.GetUnreadCount,\r\n  [apiLimiter, authMiddleware.verifyToken, authMiddleware.checkBlockedStatus],\r\n  notificationController.getUnreadCount.bind(notificationController)\r\n);\r\n\r\nexport default router;"]}