{"version":3,"file":"ReviewRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Review/Repositry/ReviewRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, Types } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport Review from '../../../models/Review.modal.js';\r\nimport { IReview } from '../../../Interfaces/models/IReview.js';\r\n\r\nexport class ReviewRepository extends BaseRepository<IReview> {\r\n  constructor() {\r\n    super(Review as Model<IReview>);\r\n  }\r\n\r\n  private toObjectId(id: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = typeof id === 'string' ? id : id.toString();\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n  async createReview(data: { userId: string; rating: number; comment: string }): Promise<IReview> {\r\n    try {\r\n      logger.debug(`Creating review for user: ${data.userId}`);\r\n      return await this.create({\r\n        userId: this.toObjectId(data.userId),\r\n        rating: data.rating,\r\n        comment: data.comment,\r\n        isApproved: false,\r\n        isSelect: false,\r\n        createdAt: new Date(),\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating review: ${error.message}`);\r\n      throw new RepositoryError(`Error creating review: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findById(reviewId: string): Promise<IReview | null> {\r\n    try {\r\n      logger.debug(`Fetching review by ID: ${reviewId}`);\r\n      return await this.model\r\n        .findOne({ reviewId })\r\n        .populate('userId', 'email username')\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching review by ID: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching review by ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getAllReviews(): Promise<IReview[]> {\r\n    try {\r\n      logger.debug('Fetching all reviews');\r\n      return await this.model\r\n        .find()\r\n        .populate('userId', 'email username')\r\n        .sort({ createdAt: -1 })\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching all reviews: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching all reviews: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async updateReview(reviewId: string, updates: { isApproved?: boolean; isSelect?: boolean }): Promise<IReview | null> {\r\n    try {\r\n      logger.debug(`Updating review: ${reviewId}`);\r\n      const review = await this.model\r\n        .findOneAndUpdate({ reviewId }, updates, { new: true })\r\n        .populate('userId', 'email username')\r\n        .exec();\r\n      if (!review) {\r\n        logger.error(`Review not found: ${reviewId}`);\r\n        throw new RepositoryError('Review not found');\r\n      }\r\n      return review;\r\n    } catch (error: any) {\r\n      logger.error(`Error updating review: ${error.message}`);\r\n      throw new RepositoryError(`Error updating review: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getSelectedReviews(): Promise<IReview[]> {\r\n    try {\r\n      logger.debug('Fetching selected and approved reviews');\r\n      return await this.model\r\n        .find({ isSelect: true, isApproved: true })\r\n        .populate('userId', 'email username')\r\n        .exec();\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching selected reviews: ${error.message}`);\r\n      throw new RepositoryError(`Error fetching selected reviews: ${error.message}`);\r\n    }\r\n  }\r\n}"]}