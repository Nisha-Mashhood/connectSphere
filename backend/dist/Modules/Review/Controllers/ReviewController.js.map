{"version":3,"file":"ReviewController.js","sourceRoot":"","sources":["../../../../src/Modules/Review/Controllers/ReviewController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport { ReviewService } from '../Service/ReviewService.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\n\r\nexport class ReviewController {\r\n  private reviewService: ReviewService;\r\n\r\n  constructor() {\r\n    this.reviewService = new ReviewService();\r\n  }\r\n\r\n  async submitReview(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { userId, rating, comment } = req.body;\r\n      logger.debug(`Submitting review for user: ${userId}`);\r\n      if (!userId || !rating || !comment) {\r\n        logger.error('Missing required fields: userId, rating, or comment');\r\n        throw new Error('Missing required fields');\r\n      }\r\n      const review = await this.reviewService.submitReview(userId, rating, comment);\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Review submitted successfully',\r\n        data: review,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error submitting review: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error submitting review',\r\n      });\r\n    }\r\n  }\r\n\r\n  async skipReview(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { userId } = req.body;\r\n      logger.debug(`Skipping review for user: ${userId}`);\r\n      if (!userId) {\r\n        logger.error('Missing userId');\r\n        throw new Error('Missing userId');\r\n      }\r\n      await this.reviewService.skipReview(userId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Review skipped successfully',\r\n        data: null,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error skipping review: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error skipping review',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getAllReviews(_req: Request, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug('Fetching all reviews');\r\n      const reviews = await this.reviewService.getAllReviews();\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Reviews fetched successfully',\r\n        data: reviews,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching all reviews: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error fetching reviews',\r\n      });\r\n    }\r\n  }\r\n\r\n  async approveReview(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { reviewId } = req.params;\r\n      logger.debug(`Approving review: ${reviewId}`);\r\n      const review = await this.reviewService.approveReview(reviewId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Review approved successfully',\r\n        data: review,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error approving review: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error approving review',\r\n      });\r\n    }\r\n  }\r\n\r\n  async selectReview(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { reviewId } = req.params;\r\n      logger.debug(`Selecting review: ${reviewId}`);\r\n      const review = await this.reviewService.selectReview(reviewId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Review selected successfully',\r\n        data: review,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error selecting review: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error selecting review',\r\n      });\r\n    }\r\n  }\r\n\r\n  async cancelApproval(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { reviewId } = req.params;\r\n      logger.debug(`Canceling approval for review: ${reviewId}`);\r\n      const review = await this.reviewService.cancelApproval(reviewId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Review approval canceled successfully',\r\n        data: review,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error canceling approval: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error canceling approval',\r\n      });\r\n    }\r\n  }\r\n\r\n  async deselectReview(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { reviewId } = req.params;\r\n      logger.debug(`Deselecting review: ${reviewId}`);\r\n      const review = await this.reviewService.deselectReview(reviewId);\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Review deselected successfully',\r\n        data: review,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error deselecting review: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error deselecting review',\r\n      });\r\n    }\r\n  }\r\n\r\n  async getSelectedReviews(_req: Request, res: Response): Promise<void> {\r\n    try {\r\n      logger.debug('Fetching selected reviews');\r\n      const reviews = await this.reviewService.getSelectedReviews();\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Selected reviews fetched successfully',\r\n        data: reviews,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error fetching selected reviews: ${error.message}`);\r\n      res.status(400).json({\r\n        success: false,\r\n        message: error.message || 'Error fetching selected reviews',\r\n      });\r\n    }\r\n  }\r\n}"]}