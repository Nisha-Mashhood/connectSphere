{"version":3,"file":"ContactRepositry.js","sourceRoot":"","sources":["../../../../src/Modules/Contact/Repositry/ContactRepositry.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose, { Types, Model } from 'mongoose';\r\nimport { BaseRepository } from '../../../core/Repositries/BaseRepositry.js';\r\nimport { RepositoryError } from '../../../core/Utils/ErrorHandler.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\nimport Contact from '../../../models/contacts.model.js';\r\nimport { IContact } from '../../../Interfaces/models/IContact.js';\r\n\r\n\r\n//PopulatedContact interface \r\nexport interface PopulatedContact {\r\n  _id: string | mongoose.Types.ObjectId;\r\n  contactId: string;\r\n  userId: {\r\n    _id: string;\r\n    name?: string;\r\n    profilePic?: string;\r\n    jobTitle?: string;\r\n  };\r\n  targetUserId?: {\r\n    _id: string;\r\n    name?: string;\r\n    profilePic?: string;\r\n    jobTitle?: string;\r\n  };\r\n  collaborationId?: {\r\n    _id: string;\r\n    mentorId: {\r\n      userId: {\r\n        _id: string;\r\n        name?: string;\r\n        profilePic?: string;\r\n        jobTitle?: string;\r\n      };\r\n    };\r\n    userId: {\r\n      _id: string;\r\n      name?: string;\r\n      profilePic?: string;\r\n      jobTitle?: string;\r\n    };\r\n    startDate: Date;\r\n    endDate?: Date;\r\n    price: number;\r\n    selectedSlot: { day: string; timeSlots: string[] }[];\r\n  };\r\n  userConnectionId?: {\r\n    _id: string;\r\n    requester: {\r\n      _id: string;\r\n      name?: string;\r\n      profilePic?: string;\r\n      jobTitle?: string;\r\n    };\r\n    recipient: {\r\n      _id: string;\r\n      name?: string;\r\n      profilePic?: string;\r\n      jobTitle?: string;\r\n    };\r\n    requestAcceptedAt?: Date;\r\n  };\r\n  groupId?: {\r\n    _id: string;\r\n    name?: string;\r\n    profilePic?: string;\r\n    startDate: Date;\r\n    adminId: {\r\n      _id: string;\r\n      name?: string;\r\n      profilePic?: string;\r\n    };\r\n    bio:string,\r\n    price:number,\r\n    maxMembers:number,\r\n    availableSlots:{ day: string; timeSlots: string[] }[];\r\n    members: { userId: { _id: string; name?: string; profilePic?: string }; joinedAt: Date }[];\r\n  };\r\n  type: \"user-mentor\" | \"user-user\" | \"group\";\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport class ContactRepository extends BaseRepository<IContact> {\r\n  constructor() {\r\n    super(Contact as Model<IContact>);\r\n  }\r\n\r\n  private toObjectId(id?: string | Types.ObjectId): Types.ObjectId {\r\n    if (!id) {\r\n      logger.error('Missing ID');\r\n      throw new RepositoryError('Invalid ID: ID is required');\r\n    }\r\n    const idStr = id instanceof Types.ObjectId ? id.toString() : id;\r\n    if (!Types.ObjectId.isValid(idStr)) {\r\n      logger.error(`Invalid ID: ${idStr}`);\r\n      throw new RepositoryError('Invalid ID: must be a 24 character hex string');\r\n    }\r\n    return new Types.ObjectId(idStr);\r\n  }\r\n\r\n  async createContact(contactData: Partial<IContact>): Promise<IContact> {\r\n    try {\r\n      logger.debug(`Creating contact for user: ${contactData.userId}`);\r\n      return await this.create({\r\n        ...contactData,\r\n        userId: contactData.userId ? this.toObjectId(contactData.userId) : undefined,\r\n        targetUserId: contactData.targetUserId ? this.toObjectId(contactData.targetUserId) : undefined,\r\n        collaborationId: contactData.collaborationId ? this.toObjectId(contactData.collaborationId) : undefined,\r\n        userConnectionId: contactData.userConnectionId ? this.toObjectId(contactData.userConnectionId) : undefined,\r\n        groupId: contactData.groupId ? this.toObjectId(contactData.groupId) : undefined,\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error creating contact: ${error.message}`);\r\n      throw new RepositoryError(`Error creating contact: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findContactById(contactId: string): Promise<IContact | null> {\r\n    try {\r\n      logger.debug(`Finding contact by ID: ${contactId}`);\r\n      return await this.findById(this.toObjectId(contactId).toString());\r\n    } catch (error: any) {\r\n      logger.error(`Error finding contact by ID: ${error.message}`);\r\n      throw new RepositoryError(`Error finding contact by ID: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findContactByUsers(userId: string, targetUserId: string): Promise<IContact | null> {\r\n    try {\r\n      logger.debug(`Finding contact for users: ${userId}, ${targetUserId}`);\r\n      return await this.findOne({\r\n        $or: [\r\n          { userId: this.toObjectId(userId), targetUserId: this.toObjectId(targetUserId) },\r\n          { userId: this.toObjectId(targetUserId), targetUserId: this.toObjectId(userId) },\r\n        ],\r\n        type: { $in: ['user-user', 'user-mentor'] },\r\n      });\r\n    } catch (error: any) {\r\n      logger.error(`Error finding contact by user IDs: ${error.message}`);\r\n      throw new RepositoryError(`Error finding contact by user IDs: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async findContactsByUserId(userId: string): Promise<PopulatedContact[]> {\r\n    try {\r\n      logger.debug(`Finding contacts for user: ${userId}`);\r\n      const uId = this.toObjectId(userId);\r\n      return await this.model\r\n        .find({\r\n          $or: [{ userId: uId }, { targetUserId: uId }],\r\n        })\r\n        .populate({\r\n          path: 'userId',\r\n          select: '_id name profilePic userId jobTitle',\r\n          model: 'User',\r\n        })\r\n        .populate({\r\n          path: 'targetUserId',\r\n          select: '_id name profilePic userId jobTitle',\r\n          model: 'User',\r\n        })\r\n        .populate({\r\n          path: 'collaborationId',\r\n          select: '_id mentorId userId startDate endDate price selectedSlot',\r\n          model: 'Collaboration',\r\n          populate: [\r\n            { path: 'mentorId', select: 'userId', populate: { path: 'userId', select: '_id name profilePic jobTitle' } },\r\n            { path: 'userId', select: '_id name profilePic jobTitle' },\r\n          ],\r\n        })\r\n        .populate({\r\n          path: 'userConnectionId',\r\n          select: '_id requester recipient requestAcceptedAt',\r\n          model: 'UserConnection',\r\n          populate: [\r\n            { path: 'requester', select: '_id name profilePic jobTitle' },\r\n            { path: 'recipient', select: '_id name profilePic jobTitle' },\r\n          ],\r\n        })\r\n        .populate({\r\n          path: 'groupId',\r\n          select: '_id name profilePic startDate adminId bio price maxMembers availableSlots members',\r\n          model: 'Group',\r\n          populate: [\r\n            { path: 'adminId', select: '_id name profilePic' },\r\n            { path: 'members.userId', select: '_id name profilePic' },\r\n          ],\r\n        })\r\n        .lean()\r\n        .exec() as unknown as PopulatedContact[];\r\n    } catch (error: any) {\r\n      logger.error(`Error finding contacts by user ID: ${error.message}`);\r\n      throw new RepositoryError(`Error finding contacts by user ID: ${error.message}`);\r\n    }\r\n  }\r\n}"]}