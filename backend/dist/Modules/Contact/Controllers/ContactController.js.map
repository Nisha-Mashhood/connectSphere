{"version":3,"file":"ContactController.js","sourceRoot":"","sources":["../../../../src/Modules/Contact/Controllers/ContactController.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,4CAA4C,CAAC;AAC5E,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAC9D,OAAO,MAAM,MAAM,+BAA+B,CAAC;AAEnD,MAAM,OAAO,iBAAkB,SAAQ,cAAc;IAC3C,cAAc,CAAiB;IAEvC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,GAAY,EAAE,GAAa;QAC/C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC;YACpC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;YACvC,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACzB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,8BAA8B,CAAC,CAAC;YACvD,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9E,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,EAAE,iCAAiC,CAAC,CAAC;QACrE,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,6BAA6B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;CACF","sourcesContent":["import { Request, Response } from 'express';\r\nimport { BaseController } from '../../../core/Controller/BaseController.js';\r\nimport { ContactService } from '../Service/ContactService.js';\r\nimport logger from '../../../core/Utils/Logger.js';\r\n\r\nexport class ContactController extends BaseController {\r\n  private contactService: ContactService;\r\n\r\n  constructor() {\r\n    super();\r\n    this.contactService = new ContactService();\r\n  }\r\n\r\n  async getUserContacts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = req.currentUser?._id;\r\n      const userRole = req.currentUser?.role;\r\n      if (!userId || !userRole) {\r\n        this.throwError(400, 'User ID or role not provided');\r\n      }\r\n\r\n      const contacts = await this.contactService.getUserContacts(userId.toString());\r\n      this.sendSuccess(res, contacts, 'Contacts retrieved successfully');\r\n    } catch (error: any) {\r\n      logger.error(`Error in getUserContacts: ${error.message}`);\r\n      this.handleError(error, res);\r\n    }\r\n  }\r\n}"]}