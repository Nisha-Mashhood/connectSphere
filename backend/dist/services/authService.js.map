{"version":3,"file":"authService.js","sourceRoot":"","sources":["../../src/services/authService.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    createUser,\r\n    findUserByEmail,\r\n    findUserById,\r\n  } from '../repositories/useRepositry.js';\r\nimport bcrypt from 'bcryptjs';\r\nimport { generateToken } from '../utils/jwt.js';\r\n\r\n// Handle personal details registration\r\nexport const savePersonalDetails = async (data: { fullName: string; email: string; phone: string; dateOfBirth: Date }) => {\r\n    const { fullName, email, phone, dateOfBirth } = data;\r\n  \r\n    // Check if the email already exists\r\n    const userExists = await findUserByEmail(email);\r\n    if (userExists) throw new Error('User already exists.');\r\n  \r\n    //create new user with the passed details\r\n    const newUser = await createUser({ fullName, email, phone, dateOfBirth });\r\n    return newUser;\r\n  };\r\n  \r\n  // Handle account details registration\r\n  export const saveAccountDetails = async (data: { userId: string; username: string; password: string; confirmPassword: string }) => {\r\n    const { userId, username, password, confirmPassword } = data;\r\n  \r\n    if (password !== confirmPassword) throw new Error('Passwords do not match.');\r\n  \r\n    const user = await findUserById(userId);\r\n    if (!user) throw new Error('User not found.');\r\n  \r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    user.username = username;\r\n    user.password = hashedPassword;\r\n  \r\n    await user.save();\r\n    return user;\r\n  };\r\n  \r\n  // Handle professional details registration\r\n  export const saveProfessionalDetails = async (data: { userId: string; jobTitle?: string; industry?: string }) => {\r\n    const { userId, jobTitle, industry } = data;\r\n  \r\n    const user = await findUserById(userId);\r\n    if (!user) throw new Error('User not found.');\r\n  \r\n    user.jobTitle = jobTitle;\r\n    user.industry = industry;\r\n  \r\n    await user.save();\r\n    return user;\r\n  };\r\n  \r\n  // Handle reason and role registration\r\n  export const saveReasonAndRole = async (data: { userId: string; reasonForJoining?: string; role: 'user' | 'mentor' }) => {\r\n    const { userId, reasonForJoining, role } = data;\r\n  \r\n    const user = await findUserById(userId);\r\n    if (!user) throw new Error('User not found.');\r\n  \r\n    user.reasonForJoining = reasonForJoining;\r\n    user.role = role;\r\n  \r\n    if (role === 'mentor') {\r\n      user.isMentorApproved = false;\r\n    }\r\n  \r\n    await user.save();\r\n    return user;\r\n  };\r\n\r\n  // Handle login logic\r\nexport const loginUser = async (email: string, password: string) => {\r\n    const user = await findUserByEmail(email);\r\n    if (!user) throw new Error('User not found');\r\n\r\n    // Ensure user.password is defined\r\n  if (!user.password) {\r\n    throw new Error('Password not set for user');\r\n  }\r\n  \r\n    // Check if password matches\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) throw new Error('Invalid credentials');\r\n  \r\n    // Generate JWT token\r\n    const token = generateToken(user._id.toString());\r\n    return { user, token };\r\n  };"]}