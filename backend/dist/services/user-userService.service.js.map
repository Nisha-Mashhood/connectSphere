{"version":3,"file":"user-userService.service.js","sourceRoot":"","sources":["../../src/services/user-userService.service.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,kBAAkB,MAAM,4CAA4C,CAAC;AAEjF,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,WAAmB,EAAE,WAAmB,EAAE,EAAE;IAC1F,oCAAoC;IACpC,IAAI,WAAW,KAAK,WAAW,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACvE,CAAC;IAED,oCAAoC;IACpC,MAAM,kBAAkB,GAAG,MAAM,kBAAkB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACpF,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAC9C,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,WAAW,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,CACxF,CAAC;IAEF,IAAI,gBAAgB,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,MAAM,kBAAkB,CAAC,oBAAoB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACjF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,KAAK,EAAE,YAAoB,EAAE,MAA+B,EAAE,EAAE;IACxG,OAAO,MAAM,kBAAkB,CAAC,0BAA0B,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AACnF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,YAAoB,EAAE,MAAc,EAAE,EAAE;IACjF,OAAO,MAAM,kBAAkB,CAAC,wBAAwB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AACjF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IAC3D,OAAO,MAAM,kBAAkB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC7D,CAAC,CAAC","sourcesContent":["import * as userConnectionRepo from \"../repositories/user-userRepo.repositry.js\";\r\n\r\nexport const sendUserConnectionRequest = async (requesterId: string, recipientId: string) => {\r\n  // Prevent sending a request to self\r\n  if (requesterId === recipientId) {\r\n    throw new Error(\"You cannot send a connection request to yourself.\");\r\n  }\r\n\r\n  // Check if a request already exists\r\n  const existingConnection = await userConnectionRepo.getUserConnections(requesterId);\r\n  const alreadyRequested = existingConnection.find(\r\n    (conn) => conn.recipient.toString() === recipientId && conn.requestStatus === \"Pending\"\r\n  );\r\n\r\n  if (alreadyRequested) {\r\n    throw new Error(\"A pending request already exists for this user.\");\r\n  }\r\n\r\n  return await userConnectionRepo.createUserConnection(requesterId, recipientId);\r\n};\r\n\r\nexport const respondToConnectionRequest = async (connectionId: string, action: \"Accepted\" | \"Rejected\") => {\r\n  return await userConnectionRepo.updateUserConnectionStatus(connectionId, action);\r\n};\r\n\r\nexport const disconnectConnection = async (connectionId: string, reason: string) => {\r\n  return await userConnectionRepo.disconnectUserConnection(connectionId, reason);\r\n};\r\n\r\nexport const fetchUserConnections = async (userId: string) => {\r\n  return await userConnectionRepo.getUserConnections(userId);\r\n};"]}