{"version":3,"file":"user-userService.service.js","sourceRoot":"","sources":["../../src/services/user-userService.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createContact } from \"../repositories/contacts.repository.js\";\r\nimport { IUserConnection } from \"../models/userConnection.modal.js\";\r\nimport * as userConnectionRepo from \"../repositories/user-userRepo.repositry.js\";\r\n\r\nexport const sendUserConnectionRequest = async (requesterId: string, recipientId: string) => {\r\n  // Prevent sending a request to self\r\n  if (requesterId === recipientId) {\r\n    throw new Error(\"You cannot send a connection request to yourself.\");\r\n  }\r\n\r\n  // Check if a request already exists\r\n  const existingConnection = await userConnectionRepo.getUserConnections(requesterId);\r\n  const alreadyRequested = existingConnection.find(\r\n    (conn) => conn.recipient.toString() === recipientId && conn.requestStatus === \"Pending\"\r\n  );\r\n\r\n  if (alreadyRequested) {\r\n    throw new Error(\"A pending request already exists for this user.\");\r\n  }\r\n\r\n  return await userConnectionRepo.createUserConnection(requesterId, recipientId);\r\n};\r\n\r\nexport const respondToConnectionRequest = async (connectionId: string, action: \"Accepted\" | \"Rejected\") => {\r\n  const updatedConnection = await userConnectionRepo.updateUserConnectionStatus(connectionId, action);\r\n\r\n  if (!updatedConnection) {\r\n    throw new Error(\"Connection not found\");\r\n  }\r\n\r\n  // If the request is accepted, create Contact entries\r\n  if (action === \"Accepted\") {\r\n    const requesterId = updatedConnection.requester.toString();\r\n  const recipientId = updatedConnection.recipient.toString();\r\n  const [contact1, contact2] = await Promise.all([\r\n    createContact({ userId: requesterId, targetUserId: recipientId, userConnectionId: connectionId, type: \"user-user\" }),\r\n    createContact({ userId: recipientId, targetUserId: requesterId, userConnectionId: connectionId, type: \"user-user\" }),\r\n  ]);\r\n  return { updatedConnection, contacts: [contact1, contact2] };\r\n  }\r\n\r\n  return updatedConnection;\r\n};\r\n\r\nexport const disconnectConnection = async (connectionId: string, reason: string) => {\r\n  return await userConnectionRepo.disconnectUserConnection(connectionId, reason);\r\n};\r\n\r\nexport const fetchUserConnections = async (userId: string) => {\r\n  return await userConnectionRepo.getUserConnections(userId);\r\n};\r\n\r\nexport const fetchUserRequests = async (userId: string) => {\r\n    return await userConnectionRepo.getUserRequests(userId);\r\n  };\r\n\r\n  //FOR ADMIN\r\n  // Service to get all user-user collaborations\r\nexport const fetchAllUserConnections = async (): Promise<IUserConnection[]> => {\r\n  return await userConnectionRepo.getAllUserConnections();\r\n};\r\n\r\n// Service to get user-user collaboration by ID\r\nexport const fetchUserConnectionById = async (connectionId: string): Promise<IUserConnection> => {\r\n  return await userConnectionRepo.getUserConnectionWithId(connectionId);\r\n};\r\n\r\n"]}