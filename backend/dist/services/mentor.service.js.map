{"version":3,"file":"mentor.service.js","sourceRoot":"","sources":["../../src/services/mentor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as MentorRepository from \"../repositories/mentor.repositry.js\";\r\nimport { sendEmail } from \"../core/Utils/Email.js\";\r\nimport { IMentor } from \"../Interfaces/models/IMentor.js\";\r\nimport { getUserById } from \"../repositories/usermanagemnt.repositry.js\";\r\n\r\n// Function to submit a mentor request (for admin review)\r\nexport const submitMentorRequest = async (mentorData: {\r\n  userId: string;\r\n  skills: string[];\r\n  specialization: string;\r\n  bio: string;\r\n  price: number;\r\n  availableSlots: string[];\r\n  timePeriod: number;\r\n  certifications: string[];\r\n}) => {\r\n  try {\r\n    // Save mentor data (pending admin approval)\r\n    const newMentor = await MentorRepository.saveMentorRequest(mentorData);\r\n    return newMentor;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error saving mentor request: \" + error.message);\r\n  }\r\n};\r\n\r\n// Get all mentor requests\r\nexport const getAllMentorRequests = async (\r\n  page: number = 1,\r\n  limit: number = 10,\r\n  search: string = \"\",\r\n  status: string = \"\",\r\n  sort: string = \"desc\"\r\n) => {\r\n  try {\r\n    return await MentorRepository.getAllMentorRequests(\r\n      page,\r\n      limit,\r\n      search,\r\n      status,\r\n      sort\r\n    );\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching mentor requests: \" + error.message);\r\n  }\r\n};\r\n\r\n//Get All Mentors\r\nexport const getAllMentors = async () => {\r\n  try {\r\n    return await MentorRepository.getAllMentors();\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching mentors: \" + error.message);\r\n  }\r\n};\r\n\r\n//get Mentor Details using mentorId\r\nexport const getMentorBymentorId = async (mentorId: string) => {\r\n  try {\r\n    const mentor = await MentorRepository.getMentorDetails(mentorId);\r\n    return mentor;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching mentor details: \" + error.message);\r\n  }\r\n};\r\n// Approve a mentor request\r\nexport const approveMentorRequest = async (id: string) => {\r\n  try {\r\n    await MentorRepository.approveMentorRequest(id);\r\n\r\n    // Fetch mentor data to send email\r\n    const mentor = await MentorRepository.getMentorById(id);\r\n\r\n    if (!mentor) {\r\n      throw new Error(\"Mentor not found.\");\r\n    }\r\n\r\n    if (typeof mentor.userId === \"string\") {\r\n      throw new Error(\"User details are not populated.\");\r\n    }\r\n\r\n    if (mentor) {\r\n      const user = await getUserById(mentor.userId.toString());\r\n      if (!user) {\r\n        throw new Error(\"User not found\");\r\n      }\r\n      const userEmail = user.email;\r\n      const userName = user.name;\r\n      await sendEmail(\r\n        userEmail,\r\n        \"Mentor Request Approved\",\r\n        `Hello ${userName},\\n\\nCongratulations! Your mentor request has been approved.\\n\\nBest regards,\\n Admin \\n ConnectSphere`\r\n      );\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(\"Error approving mentor request: \" + error.message);\r\n  }\r\n};\r\n\r\n// Reject a mentor request\r\nexport const rejectMentorRequest = async (id: string, reason: string) => {\r\n  try {\r\n    await MentorRepository.rejectMentorRequest(id);\r\n\r\n    // Fetch mentor data to send email\r\n    const mentor = await MentorRepository.getMentorById(id);\r\n\r\n    if (!mentor) {\r\n      throw new Error(\"Mentor not found.\");\r\n    }\r\n    if (typeof mentor.userId === \"string\") {\r\n      throw new Error(\"User details are not populated.\");\r\n    }\r\n    if (mentor) {\r\n      const user = await getUserById(mentor.userId.toString());\r\n      if (!user) {\r\n        throw new Error(\"User not found\");\r\n      }\r\n      const userEmail = user.email;\r\n      const userName = user.name;\r\n      await sendEmail(\r\n        userEmail,\r\n        \"Mentor Request Rejected\",\r\n        `Hello ${userName},\\n\\nWe regret to inform you that your mentor request has been rejected.\\n\\nReason: ${reason}\\n\\nBest regards,\\nAdmin \\n ConnectSphere`\r\n      );\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(\"Error rejecting mentor request: \" + error.message);\r\n  }\r\n};\r\n\r\n// Cancel mentorship\r\nexport const cancelMentorship = async (id: string) => {\r\n  try {\r\n    // Update mentor status to \"Cancelled\"\r\n    await MentorRepository.cancelMentorship(id);\r\n\r\n    // Fetch mentor data to send email\r\n    const mentor = await MentorRepository.getMentorById(id);\r\n\r\n    if (!mentor) {\r\n      throw new Error(\"Mentor not found.\");\r\n    }\r\n\r\n    if (typeof mentor.userId === \"string\") {\r\n      throw new Error(\"User details are not populated.\");\r\n    }\r\n\r\n    if (mentor) {\r\n      const user = await getUserById(mentor.userId.toString());\r\n      if (!user) {\r\n        throw new Error(\"User not found\");\r\n      }\r\n      const userEmail = user.email;\r\n      const userName = user.name;\r\n      await sendEmail(\r\n        userEmail,\r\n        \"Mentorship Cancelled\",\r\n        `Hello ${userName},\\n\\nWe regret to inform you that your mentorship has been cancelled by the admin. If you have any questions, please contact support.\\n\\nBest regards,\\nAdmin \\nConnectSphere`\r\n      );\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(\"Error cancelling mentorship: \" + error.message);\r\n  }\r\n};\r\n\r\n// Get mentor details by userId\r\nexport const getMentorByUserId = async (userId: string) => {\r\n  try {\r\n    return await MentorRepository.getMentorByUserId(userId);\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching mentor details: \" + error.message);\r\n  }\r\n};\r\n\r\n// Update mentor details by mentorId\r\nexport const updateMentorById = async (\r\n  mentorId: string,\r\n  updateData: Partial<IMentor>\r\n) => {\r\n  try {\r\n    const mentor = await MentorRepository.getMentorById(mentorId);\r\n\r\n    if (!mentor) {\r\n      throw new Error(\"Mentor not found.\");\r\n    }\r\n    const MentorData = await MentorRepository.updateMentorById(\r\n      mentorId,\r\n      updateData\r\n    );\r\n    return MentorData;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error updating mentor details: \" + error.message);\r\n  }\r\n};\r\n"]}