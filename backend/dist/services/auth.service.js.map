{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../src/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  createUser,\r\n  findUserByEmail,\r\n  updatePassword,\r\n  updateRefreshToken,\r\n  findUserById,\r\n  isProfileComplete,\r\n  updateUser,\r\n} from \"../repositories/user.repositry.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport {\r\n  generateAccessToken,\r\n  generateRefreshToken,\r\n  verifyRefreshToken,\r\n  removeRefreshToken,\r\n} from \"../utils/jwt.utils.js\";\r\nimport { generateOTP } from \"../utils/otp.utils.js\";\r\nimport { sendEmail } from \"../utils/email.utils.js\";\r\nimport config from \"../config/env.config.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\nimport { OAuth2Client } from \"../utils/googleconfig.utils.js\";\r\nimport axios from \"axios\";\r\n\r\nconst gitclientId = config.githubclientid;\r\nconst gitclientSecret = config.githubclientsecret;\r\n\r\n// Handle Registration with details\r\nexport const sigupDetails = async (data: {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}) => {\r\n  const { name, email, password } = data;\r\n  // Check if the email already exists\r\n  const userExists = await findUserByEmail(email);\r\n  if (userExists) throw new Error(\"User already exists.\");\r\n\r\n  //create new user with the passed details\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n  const newUser = await createUser({ name, email, password: hashedPassword });\r\n  return newUser;\r\n};\r\n\r\n// Handle login logic\r\nexport const loginUser = async (email: string, password: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n  if (user.isBlocked) {\r\n    throw new Error(\"Blocked\");\r\n  }\r\n\r\n  if (!user.password) {\r\n    throw new Error(\r\n      \"This account is registered using a third-party provider. Please log in with your provider.\"\r\n    );\r\n  }\r\n\r\n  // Check if password matches\r\n  const isMatch = await bcrypt.compare(password, user.password);\r\n  if (!isMatch) throw new Error(\"Invalid credentials\");\r\n\r\n  // Generate JWT token\r\n  const accessToken = generateAccessToken({\r\n    userId: user._id,\r\n    userRole: user.role,\r\n  });\r\n  const refreshToken = generateRefreshToken({\r\n    userId: user._id,\r\n    userRole: user.role,\r\n  });\r\n\r\n  // Save the refresh token in the database\r\n  await updateRefreshToken(user._id.toString(), refreshToken);\r\n  return { user, accessToken, refreshToken };\r\n};\r\n\r\n// Handle refresh token logic\r\nexport const refreshToken = async (refreshToken: string) => {\r\n  try {\r\n    // Verify the refresh token\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n\r\n    // Generate a new access token\r\n    const newAccessToken = generateAccessToken({ userId: decoded.userId });\r\n\r\n    return { newAccessToken };\r\n  } catch (error) {\r\n    throw new Error(\"Invalid or expired refresh token.\");\r\n  }\r\n};\r\n\r\n//Handles google signin\r\nexport const googleSignupService = async (code: string) => {\r\n  // Exchange code for tokens\r\n  const { tokens } = await OAuth2Client.getToken(code);\r\n  OAuth2Client.setCredentials(tokens);\r\n\r\n  // Fetch user info from Google\r\n  const userRes = await axios.get(\r\n    `https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token=${tokens.access_token}`\r\n  );\r\n  const { email, name, picture } = userRes.data;\r\n\r\n  // Check if the email already exists\r\n  const existingUser = await findUserByEmail(email);\r\n  if (existingUser) {\r\n    throw new Error(\"Email already registered.\");\r\n  }\r\n\r\n  // Create a new user using the repository\r\n  const newUser = await createUser({\r\n    name,\r\n    email,\r\n    provider: \"google\",\r\n    providerId: tokens.id_token,\r\n    profilePic: picture,\r\n    password: null, // No password for Google users\r\n  });\r\n\r\n  return newUser;\r\n};\r\n\r\n//Handles login with google\r\nexport const googleLoginService = async (code: string) => {\r\n  //Exchange code for access token\r\n  const tokenResponse = await axios.post(\r\n    `https://github.com/login/oauth/access_token`,\r\n    {\r\n      client_id: gitclientId,\r\n      client_secret: gitclientSecret,\r\n      code,\r\n    },\r\n    {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  const { access_token } = tokenResponse.data;\r\n\r\n  //Fetch user details from GitHub\r\n  const userResponse = await axios.get(\"https://api.github.com/user\", {\r\n    headers: {\r\n      Authorization: `Bearer ${access_token}`,\r\n    },\r\n  });\r\n  const { email } = userResponse.data;\r\n\r\n  // Check if the email exists in the database\r\n  const existingUser = await findUserByEmail(email);\r\n  if (!existingUser) {\r\n    throw new Error(\"Email not registered\");\r\n  }\r\n\r\n  // Generate JWT tokens\r\n  const accessToken = generateAccessToken({\r\n    userId: existingUser._id,\r\n    userRole: existingUser.role,\r\n  });\r\n  const refreshToken = generateRefreshToken({\r\n    userId: existingUser._id,\r\n    userRole: existingUser.role,\r\n  });\r\n\r\n  // Save refresh token to the database\r\n  await updateRefreshToken(existingUser._id.toString(), refreshToken);\r\n\r\n  return { user: existingUser, accessToken, refreshToken };\r\n};\r\n\r\n//Handles github signup\r\nexport const githubSignupService = async (code: string) => {\r\n  try {\r\n    // Step 1: Exchange code for access token\r\n    const tokenResponse = await axios.post(\r\n      `https://github.com/login/oauth/access_token`,\r\n      {\r\n        client_id: gitclientId,\r\n        client_secret: gitclientSecret,\r\n        code,\r\n      },\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    const { access_token } = tokenResponse.data;\r\n\r\n    // Step 2: Fetch user details from GitHub\r\n    const userResponse = await axios.get(\"https://api.github.com/user\", {\r\n      headers: {\r\n        Authorization: `Bearer ${access_token}`,\r\n      },\r\n    });\r\n\r\n    const {\r\n      login: githubUsername,\r\n      email: initialEmail,\r\n      avatar_url: profilePic,\r\n      name,\r\n    } = userResponse.data;\r\n\r\n    let email = initialEmail;\r\n\r\n    // Step 3: Fetch emails explicitly if not included in the initial response\r\n    if (!email) {\r\n      const emailsResponse = await axios.get(\r\n        \"https://api.github.com/user/emails\",\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${access_token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const primaryEmail = emailsResponse.data.find((e: any) => e.primary);\r\n\r\n      if (primaryEmail) {\r\n        email = primaryEmail.email;\r\n      } else {\r\n        throw new Error(\"Email not found for GitHub user.\");\r\n      }\r\n    }\r\n\r\n    // Step 4: Check if the email already exists in the database\r\n    const existingUser = await findUserByEmail(email);\r\n    if (existingUser) {\r\n      throw new Error(\"Email already registered.\");\r\n    }\r\n\r\n    // Step 5: Create a new user\r\n    const newUser = await createUser({\r\n      name,\r\n      email,\r\n      provider: \"github\",\r\n      providerId: githubUsername,\r\n      profilePic,\r\n      password: null, // Password is null since this is an OAuth signup\r\n    });\r\n\r\n    return newUser;\r\n  } catch (error: any) {\r\n    console.error(\"GitHub Signup Error:\", error.message);\r\n    throw new Error(error.message || \"GitHub authentication failed.\");\r\n  }\r\n};\r\n\r\n// Handles GitHub login\r\nexport const githubLoginService = async (code: string) => {\r\n  try {\r\n    //Exchange code for access token\r\n    const tokenResponse = await axios.post(\r\n      `https://github.com/login/oauth/access_token`,\r\n      {\r\n        client_id: gitclientId,\r\n        client_secret: gitclientSecret,\r\n        code,\r\n      },\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    const { access_token } = tokenResponse.data; // Extract the access token\r\n\r\n    // Fetch user details from GitHub\r\n    const userResponse = await axios.get(\"https://api.github.com/user\", {\r\n      headers: {\r\n        Authorization: `Bearer ${access_token}`,\r\n      },\r\n    });\r\n\r\n    const { email: initialEmail } = userResponse.data;\r\n    let email = initialEmail;\r\n\r\n    //Fetch emails explicitly if email is not provided in the user object\r\n    if (!email) {\r\n      const emailsResponse = await axios.get(\"https://api.github.com/user/emails\", {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n      });\r\n\r\n      // Find the primary email from the list of emails\r\n      const primaryEmail = emailsResponse.data.find((e: any) => e.primary);\r\n\r\n      if (primaryEmail) {\r\n        email = primaryEmail.email;\r\n      } else {\r\n        throw new Error(\"Email not found for GitHub user.\");\r\n      }\r\n    }\r\n\r\n    // Check if the email exists in the database\r\n    const existingUser = await findUserByEmail(email);\r\n    if (!existingUser) {\r\n      throw new Error(\"Email not registered.\");\r\n    }\r\n\r\n    //Generate JWT tokens\r\n    const accessToken = generateAccessToken({\r\n      userId: existingUser._id,\r\n      userRole: existingUser.role,\r\n    });\r\n    const refreshToken = generateRefreshToken({\r\n      userId: existingUser._id,\r\n      userRole: existingUser.role,\r\n    });\r\n\r\n    //Save the refresh token to the database\r\n    await updateRefreshToken(existingUser._id.toString(), refreshToken);\r\n\r\n    //Return the user data and tokens\r\n    return { user: existingUser, accessToken, refreshToken };\r\n  } catch (error: any) {\r\n    console.error(\"GitHub Login Error:\", error.message);\r\n    throw new Error(error.message || \"GitHub login failed.\");\r\n  }\r\n};\r\n\r\n\r\n//Handle forgot password\r\nconst otpStore: Record<string, string> = {}; // Temporary storage for OTPs\r\n\r\nexport const forgotPassword = async (email: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  const otp = generateOTP();\r\n  otpStore[email] = otp; // Save OTP in memory\r\n  await sendEmail(email, \"Password Reset OTP\", `Your OTP is ${otp}`);\r\n\r\n  // Return the OTP for testing (remove in production)\r\n  return otp;\r\n};\r\n\r\n//Handle veify OTP logic\r\nexport const verifyOTP = async (email: string, otp: string) => {\r\n  if (otpStore[email] !== otp) throw new Error(\"Invalid or expired OTP.\");\r\n  delete otpStore[email]; // OTP is used once\r\n  return generateAccessToken({ email }, \"10m\"); // Temporary token for resetting password\r\n};\r\n\r\n//Handle reset password\r\nexport const resetPassword = async (email: string, newPassword: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  //Compare the old password with the new one\r\n  const isSamePassword = await bcrypt.compare(newPassword, user.password || \"\");\r\n  if (isSamePassword)\r\n    throw new Error(\"New password cannot be the same as the old password.\");\r\n\r\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n  await updatePassword(user._id.toString(), hashedPassword);\r\n};\r\n\r\n//Handle logout\r\nexport const logout = async (useremail: string) => {\r\n  try {\r\n    // Call the removeRefreshToken function\r\n    await removeRefreshToken(useremail);\r\n  } catch (error: any) {\r\n    throw new Error(\"Error during logout: \" + error.message);\r\n  }\r\n};\r\n\r\n//Check passcode for admin\r\nexport const verifyAdminPasskey = (passkey: string) => {\r\n  if (passkey === config.adminpasscode) {\r\n    return true;\r\n  } else {\r\n    throw new Error(\"Invalid admin passkey\");\r\n  }\r\n};\r\n\r\n// Check profile completion\r\nexport const checkProfileCompletion = async (\r\n  userId: string\r\n): Promise<boolean> => {\r\n  // Fetch user from the database\r\n  const user = await findUserById(userId);\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n\r\n  // Check if the profile is complete using the repository logic\r\n  return isProfileComplete(user);\r\n};\r\n\r\n//  profile Details\r\nexport const profileDetails = async (userId: string) => {\r\n  // Fetch user from the database\r\n  const user = await findUserById(userId);\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n  return user;\r\n};\r\n\r\nexport const updateUserProfile = async (\r\n  userId: string,\r\n  data: {\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    dateOfBirth: string ;\r\n    jobTitle: string;\r\n    industry: string;\r\n    reasonForJoining: string;\r\n    profilePicFile?: Express.Multer.File;\r\n    coverPicFile?: Express.Multer.File;\r\n  }\r\n) => {\r\n  const user = await findUserById(userId);\r\n\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n\r\n  // Upload images to Cloudinary if provided\r\n  let profilePicUrl = user.profilePic;\r\n  let coverPicUrl = user.coverPic;\r\n\r\n  if (data.profilePicFile) {\r\n    profilePicUrl = await uploadImage(data.profilePicFile.path, \"profiles\");\r\n  }\r\n\r\n  if (data.coverPicFile) {\r\n    coverPicUrl = await uploadImage(data.coverPicFile.path, \"covers\");\r\n  }\r\n\r\n  // Update user data\r\n  const updatedData = {\r\n  name: data.name || user.name,  \r\n  email: data.email || user.email,\r\n  phone: data.phone || user.phone,\r\n  dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth) : user.dateOfBirth,  \r\n  jobTitle: data.jobTitle || user.jobTitle,\r\n  industry: data.industry || user.industry,\r\n  reasonForJoining: data.reasonForJoining || user.reasonForJoining,\r\n  profilePic: profilePicUrl,\r\n  coverPic: coverPicUrl,\r\n  };\r\n\r\n\r\n  console.log(updatedData)\r\n  const updatedUser = await updateUser(userId, updatedData);\r\n  return updatedUser;\r\n};\r\n"]}