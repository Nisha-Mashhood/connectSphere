{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../src/services/auth.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACV,eAAe,EACf,YAAY,EACZ,cAAc,EACd,kBAAkB,EAClB,gBAAgB,GACjB,MAAM,mCAAmC,CAAC;AAC3C,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,mBAAmB,EAAC,oBAAoB,EAAE,kBAAkB,EAAC,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AACxH,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,KAAK,aAAa,MAAM,+BAA+B,CAAC;AAE/D,uCAAuC;AACvC,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,IAKzC,EAAE,EAAE;IACH,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;IAErD,oCAAoC;IACpC,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,IAAI,UAAU;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAExD,yCAAyC;IACzC,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;IAC1E,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,sCAAsC;AACtC,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,IAKxC,EAAE,EAAE;IACH,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC;IAE7D,IAAI,QAAQ,KAAK,eAAe;QAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAE7E,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE9C,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACvD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACzB,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;IAE/B,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;IAClB,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,2CAA2C;AAC3C,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,IAI7C,EAAE,EAAE;IACH,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAE5C,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAEzB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;IAClB,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,sCAAsC;AACtC,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,IAIvC,EAAE,EAAE;IACH,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;IAEhD,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE9C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACjB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;IAEjB,mDAAmD;IACpD,IAAI,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtB,MAAM,aAAa,GAAG;YACpB,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,EAAE;YACV,cAAc,EAAE,EAAE;YAClB,cAAc,EAAE,EAAE;YAClB,cAAc,EAAE,EAAE;SACnB,CAAC;QAEF,mDAAmD;QACnD,MAAM,aAAa,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,qBAAqB;AACrB,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,KAAa,EAAE,QAAgB,EAAE,EAAE;IACjE,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAG7C,kCAAkC;IAClC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC/C,CAAC;IAED,4BAA4B;IAC5B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9D,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAErD,qBAAqB;IACrB,MAAM,WAAW,GAAG,mBAAmB,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,MAAM,YAAY,GAAG,oBAAoB,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAEhE,yCAAyC;IACzC,MAAM,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAC;IAC5D,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;AAC7C,CAAC,CAAC;AAGF,6BAA6B;AAC7B,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,YAAoB,EAAE,EAAE;IACzD,IAAI,CAAC;QACH,2BAA2B;QAC3B,MAAM,OAAO,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAEjD,8BAA8B;QAC9B,MAAM,cAAc,GAAG,mBAAmB,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAEvE,OAAO,EAAE,cAAc,EAAE,CAAC;IAC5B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACvD,CAAC;AACH,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,2BAA2B,GAAG,KAAK,EAAE,OAAY,EAAE,QAAgB,EAAE,EAAE;IAClF,IAAG,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAClD,IAAG,CAAC,QAAQ;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAEtD,IAAI,IAAI,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAErD,OAAO,IAAI,CAAC;AACd,CAAC,CAAA;AAED,wBAAwB;AACxB,MAAM,QAAQ,GAA2B,EAAE,CAAC,CAAC,6BAA6B;AAE1E,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IACpD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE9C,MAAM,GAAG,GAAG,WAAW,EAAE,CAAC;IAC1B,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,qBAAqB;IAC5C,MAAM,SAAS,CAAC,KAAK,EAAE,oBAAoB,EAAE,eAAe,GAAG,EAAE,CAAC,CAAC;IAEnE,oDAAoD;IACpD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,wBAAwB;AACxB,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,KAAa,EAAE,GAAW,EAAE,EAAE;IAC5D,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACxE,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB;IAC3C,OAAO,mBAAmB,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,yCAAyC;AACzF,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,KAAa,EAAE,WAAmB,EAAE,EAAE;IACxE,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAE9C,2CAA2C;IAC3C,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;IAC9E,IAAI,cAAc;QAChB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAE1E,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;AAC5D,CAAC,CAAC;AAEF,eAAe;AACf,MAAM,CAAC,MAAM,MAAM,GAAG,KAAK,EAAC,MAAa,EAAE,EAAE;IAC3C,IAAI,CAAC;QACH,wCAAwC;QACxC,MAAM,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC,CAAA","sourcesContent":["import {\r\n  createUser,\r\n  findUserByEmail,\r\n  findUserById,\r\n  updatePassword,\r\n  updateRefreshToken,\r\n  findOrCreateUser,\r\n} from \"../repositories/user.repositry.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { generateAccessToken,generateRefreshToken, verifyRefreshToken,removeRefreshToken } from \"../utils/jwt.utils.js\";\r\nimport { generateOTP } from \"../utils/otp.utils.js\";\r\nimport { sendEmail } from \"../utils/email.utils.js\";\r\nimport * as MentorService from \"../services/mentor.service.js\";\r\n\r\n// Handle personal details registration\r\nexport const savePersonalDetails = async (data: {\r\n  fullName: string;\r\n  email: string;\r\n  phone: string;\r\n  dateOfBirth: Date;\r\n}) => {\r\n  const { fullName, email, phone, dateOfBirth } = data;\r\n\r\n  // Check if the email already exists\r\n  const userExists = await findUserByEmail(email);\r\n  if (userExists) throw new Error(\"User already exists.\");\r\n\r\n  //create new user with the passed details\r\n  const newUser = await createUser({ fullName, email, phone, dateOfBirth });\r\n  return newUser;\r\n};\r\n\r\n// Handle account details registration\r\nexport const saveAccountDetails = async (data: {\r\n  userId: string;\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}) => {\r\n  const { userId, username, password, confirmPassword } = data;\r\n\r\n  if (password !== confirmPassword) throw new Error(\"Passwords do not match.\");\r\n\r\n  const user = await findUserById(userId);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n  user.username = username;\r\n  user.password = hashedPassword;\r\n\r\n  await user.save();\r\n  return user;\r\n};\r\n\r\n// Handle professional details registration\r\nexport const saveProfessionalDetails = async (data: {\r\n  userId: string;\r\n  jobTitle?: string;\r\n  industry?: string;\r\n}) => {\r\n  const { userId, jobTitle, industry } = data;\r\n\r\n  const user = await findUserById(userId);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  user.jobTitle = jobTitle;\r\n  user.industry = industry;\r\n\r\n  await user.save();\r\n  return user;\r\n};\r\n\r\n// Handle reason and role registration\r\nexport const saveReasonAndRole = async (data: {\r\n  userId: string;\r\n  reasonForJoining?: string;\r\n  role: \"user\" | \"mentor\";\r\n}) => {\r\n  const { userId, reasonForJoining, role } = data;\r\n\r\n  const user = await findUserById(userId);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  user.reasonForJoining = reasonForJoining;\r\n  user.role = role;\r\n  await user.save();\r\n\r\n   // If the role is 'mentor', create a mentor profile\r\n  if (role === \"mentor\") {\r\n    const newMentorData = {\r\n      userId: userId,\r\n      skills: [], \r\n      certifications: [], \r\n      specialization: \"\", \r\n      availableSlots: [], \r\n    };\r\n\r\n    // Create the mentor entry in the Mentor collection\r\n    await MentorService.submitMentorRequest(newMentorData);\r\n  }\r\n\r\n  return user;\r\n};\r\n\r\n// Handle login logic\r\nexport const loginUser = async (email: string, password: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n\r\n  // Ensure user.password is defined\r\n  if (!user.password) {\r\n    throw new Error(\"Password not set for user\");\r\n  }\r\n\r\n  // Check if password matches\r\n  const isMatch = await bcrypt.compare(password, user.password);\r\n  if (!isMatch) throw new Error(\"Invalid credentials\");\r\n\r\n  // Generate JWT token\r\n  const accessToken = generateAccessToken({ userId: user._id });\r\n  const refreshToken = generateRefreshToken({ userId: user._id });\r\n\r\n  // Save the refresh token in the database\r\n  await updateRefreshToken(user._id.toString(), refreshToken);\r\n  return { user, accessToken, refreshToken };\r\n};\r\n\r\n\r\n// Handle refresh token logic\r\nexport const refreshToken = async (refreshToken: string) => {\r\n  try {\r\n    // Verify the refresh token\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n\r\n    // Generate a new access token\r\n    const newAccessToken = generateAccessToken({ userId: decoded.userId });\r\n\r\n    return { newAccessToken };\r\n  } catch (error) {\r\n    throw new Error(\"Invalid or expired refresh token.\");\r\n  }\r\n};\r\n\r\n\r\nexport const findOrCreateUserforPassport = async (profile: any, provider: string) =>{\r\n  if(!profile) throw new Error('Profile not found');\r\n  if(!provider) throw new Error('Provider not defined');\r\n\r\n  let user = await findOrCreateUser(profile, provider);\r\n\r\n  return user;\r\n}\r\n\r\n//Handle forgot password\r\nconst otpStore: Record<string, string> = {}; // Temporary storage for OTPs\r\n\r\nexport const forgotPassword = async (email: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  const otp = generateOTP();\r\n  otpStore[email] = otp; // Save OTP in memory\r\n  await sendEmail(email, \"Password Reset OTP\", `Your OTP is ${otp}`);\r\n  \r\n  // Return the OTP for testing (remove in production)\r\n  return otp;\r\n};\r\n\r\n//Handle veify OTP logic\r\nexport const verifyOTP = async (email: string, otp: string) => {\r\n  if (otpStore[email] !== otp) throw new Error(\"Invalid or expired OTP.\");\r\n  delete otpStore[email]; // OTP is used once\r\n  return generateAccessToken({ email }, \"10m\"); // Temporary token for resetting password\r\n};\r\n\r\n//Handle reset password\r\nexport const resetPassword = async (email: string, newPassword: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  //Compare the old password with the new one\r\n  const isSamePassword = await bcrypt.compare(newPassword, user.password || \"\");\r\n  if (isSamePassword)\r\n    throw new Error(\"New password cannot be the same as the old password.\");\r\n\r\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n  await updatePassword(user._id.toString(), hashedPassword);\r\n};\r\n\r\n//Handle logout\r\nexport const logout = async(userId:string) =>{\r\n  try {\r\n    // Call the removeRefreshToken function \r\n    await removeRefreshToken(userId);\r\n  } catch (error: any) {\r\n    throw new Error('Error during logout: ' + error.message);\r\n  }\r\n}"]}