{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../src/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  createUser,\r\n  findUserByEmail,\r\n  updatePassword,\r\n  updateRefreshToken,\r\n  findOrCreateUser,\r\n  findUserById,\r\n  isProfileComplete,\r\n  updateUser,\r\n} from \"../repositories/user.repositry.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { generateAccessToken,generateRefreshToken, verifyRefreshToken,removeRefreshToken } from \"../utils/jwt.utils.js\";\r\nimport { generateOTP } from \"../utils/otp.utils.js\";\r\nimport { sendEmail } from \"../utils/email.utils.js\";\r\nimport config from \"../config/env.config.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\n\r\n// Handle Registration with details \r\nexport const sigupDetails = async (data: {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}) => {\r\n  const { name, email, password } = data;\r\n  console.log(\"data at service file :\",data);\r\n  // Check if the email already exists\r\n  const userExists = await findUserByEmail(email);\r\n  if (userExists) throw new Error(\"User already exists.\");\r\n\r\n  //create new user with the passed details\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n  const newUser = await createUser({  name, email, password:hashedPassword });\r\n  return newUser;\r\n};\r\n\r\n\r\n// Handle login logic\r\nexport const loginUser = async (email: string, password: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n  if (user.isBlocked) {\r\n    throw new Error(\"Blocked\");\r\n  }\r\n\r\n  // Check if password matches\r\n  const isMatch = await bcrypt.compare(password, user.password);\r\n  if (!isMatch) throw new Error(\"Invalid credentials\");\r\n\r\n  // Generate JWT token\r\n  const accessToken = generateAccessToken({ userId: user._id });\r\n  const refreshToken = generateRefreshToken({ userId: user._id });\r\n\r\n  // Save the refresh token in the database\r\n  await updateRefreshToken(user._id.toString(), refreshToken);\r\n  return { user, accessToken, refreshToken };\r\n};\r\n\r\n\r\n// Handle refresh token logic\r\nexport const refreshToken = async (refreshToken: string) => {\r\n  try {\r\n    // Verify the refresh token\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n\r\n    // Generate a new access token\r\n    const newAccessToken = generateAccessToken({ userId: decoded.userId });\r\n\r\n    return { newAccessToken };\r\n  } catch (error) {\r\n    throw new Error(\"Invalid or expired refresh token.\");\r\n  }\r\n};\r\n\r\n\r\nexport const findOrCreateUserforPassport = async (profile: any, provider: string) =>{\r\n  if(!profile) throw new Error('Profile not found');\r\n  if(!provider) throw new Error('Provider not defined');\r\n\r\n  let user = await findOrCreateUser(profile, provider);\r\n\r\n  return user;\r\n}\r\n\r\n//Handle forgot password\r\nconst otpStore: Record<string, string> = {}; // Temporary storage for OTPs\r\n\r\nexport const forgotPassword = async (email: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  const otp = generateOTP();\r\n  otpStore[email] = otp; // Save OTP in memory\r\n  await sendEmail(email, \"Password Reset OTP\", `Your OTP is ${otp}`);\r\n  \r\n  // Return the OTP for testing (remove in production)\r\n  return otp;\r\n};\r\n\r\n//Handle veify OTP logic\r\nexport const verifyOTP = async (email: string, otp: string) => {\r\n  if (otpStore[email] !== otp) throw new Error(\"Invalid or expired OTP.\");\r\n  delete otpStore[email]; // OTP is used once\r\n  return generateAccessToken({ email }, \"10m\"); // Temporary token for resetting password\r\n};\r\n\r\n//Handle reset password\r\nexport const resetPassword = async (email: string, newPassword: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"User not found.\");\r\n\r\n  //Compare the old password with the new one\r\n  const isSamePassword = await bcrypt.compare(newPassword, user.password || \"\");\r\n  if (isSamePassword)\r\n    throw new Error(\"New password cannot be the same as the old password.\");\r\n\r\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n  await updatePassword(user._id.toString(), hashedPassword);\r\n};\r\n\r\n//Handle logout\r\nexport const logout = async(useremail:string) =>{;\r\n  try {\r\n    // Call the removeRefreshToken function \r\n    await removeRefreshToken(useremail);\r\n  } catch (error: any) {\r\n    throw new Error('Error during logout: ' + error.message);\r\n  }\r\n}\r\n\r\n//Check passcode for admin\r\nexport const verifyAdminPasskey = (passkey: string) => {\r\n  if (passkey === config.adminpasscode) {\r\n    return true;\r\n  } else {\r\n    throw new Error(\"Invalid admin passkey\");\r\n  }\r\n};\r\n\r\n// Check profile completion\r\nexport const checkProfileCompletion = async (userId: string): Promise<boolean> => {\r\n  // Fetch user from the database\r\n  const user = await findUserById(userId);\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n\r\n  // Check if the profile is complete using the repository logic\r\n  return isProfileComplete(user);\r\n};\r\n\r\n//  profile Details\r\nexport const profileDetails = async (userId: string) => {\r\n  // Fetch user from the database\r\n  const user = await findUserById(userId);\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n  return user;\r\n};\r\n\r\nexport const updateUserProfile = async (\r\n  userId:string,\r\n  data: {\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    dateOfBirth: string;\r\n    jobTitle: string;\r\n    industry: string;\r\n    reasonForJoining: string;\r\n    profilePicFile?: Express.Multer.File;\r\n    coverPicFile?: Express.Multer.File;\r\n  }\r\n) => {\r\n\r\n  const user = await findUserById(userId);\r\n\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n\r\n  // Upload images to Cloudinary if provided\r\n  let profilePicUrl = user.profilePic;\r\n  let coverPicUrl = user.coverPic;\r\n\r\n  if (data.profilePicFile) {\r\n    profilePicUrl = await uploadImage(data.profilePicFile.path, \"profiles\");\r\n  }\r\n\r\n  if (data.coverPicFile) {\r\n    coverPicUrl = await uploadImage(data.coverPicFile.path, \"covers\");\r\n  }\r\n\r\n  // Update user data\r\n  const updatedData = {\r\n    name: data.name,\r\n    email: data.email,\r\n    phone: data.phone,\r\n    dateOfBirth: new Date(data.dateOfBirth),\r\n    jobTitle: data.jobTitle,\r\n    industry: data.industry,\r\n    reasonForJoining: data.reasonForJoining,\r\n    profilePic: profilePicUrl,\r\n    coverPic: coverPicUrl,\r\n  };\r\n\r\n  \r\n  const updatedUser = await updateUser(userId, updatedData);\r\n  return updatedUser;\r\n};"]}