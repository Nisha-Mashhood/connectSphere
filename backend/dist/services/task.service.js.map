{"version":3,"file":"task.service.js","sourceRoot":"","sources":["../../src/services/task.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAE1D,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AACnJ,OAAO,EAAE,uBAAuB,EAAE,MAAM,2CAA2C,CAAC;AAGnF,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAC,QAAwB,EAAE,SAAkB,EAAE,QAAgB,EAAkB,EAAE;IACtH,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,EAAE,GAAG,EAAE,GAAE,MAAM,WAAW,CAAC,SAAS,EAAE,OAAO,EAAC,QAAQ,CAAC,CAAC;QAC9D,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC;IACvB,CAAC;IACD,OAAO,MAAM,cAAc,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,WAAmB,EAAE,SAAiB,EAAE,MAAc,EAAoB,EAAE;IACzH,OAAO,MAAM,kBAAkB,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,MAAc,EAAE,QAAmC,EAAyB,EAAE;IAC5H,OAAO,MAAM,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,MAAc,EAAE,MAAiE,EAAyB,EAAE;IACxJ,OAAO,MAAM,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,MAAc,EAAE,OAAuB,EAAyB,EAAE;IACtG,mDAAmD;IACrD,IAAI,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACzD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,sBAAsB,OAAO,CAAC,gBAAgB,wBAAwB,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAA;QAC7G,yCAAyC;QACzC,MAAM,uBAAuB,CAC3B,MAAM,EACN,OAAO,CAAC,gBAAgB,EACxB,OAAO,CAAC,gBAAgB,CACzB,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,kCAAkC,MAAM,EAAE,CAAC,CAAC;QAExD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,MAAM,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC;AAEA,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAAc,EAAiB,EAAE;IACvE,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import { uploadMedia } from '../core/Utils/Cloudinary.js';\r\nimport { ITask } from '../Interfaces/models/ITask.js';\r\nimport { createTaskRepo, deleteTask, editTask, findTasksByContext, updateTaskPriority, updateTaskStatus } from '../repositories/task.repositry.js';\r\nimport { updateTaskNotifications } from '../repositories/notification.repositry.js';\r\n\r\n\r\n export const createTaskService = async(taskData: Partial<ITask>, imagePath?: string, fileSize?:number): Promise<ITask> => {\r\n    if (imagePath) {\r\n      const { url } =await uploadMedia(imagePath, 'tasks',fileSize);\r\n      taskData.image = url;\r\n    }\r\n    return await createTaskRepo(taskData);\r\n  }\r\n\r\n  export const getTasksByContextService = async (contextType: string, contextId: string, userId: string): Promise<ITask[]> => {\r\n    return await findTasksByContext(contextType, contextId, userId);\r\n  };\r\n  \r\n  export const changeTaskPriorityService = async (taskId: string, priority: 'low' | 'medium' | 'high'): Promise<ITask | null> => {\r\n    return await updateTaskPriority(taskId, priority);\r\n  };\r\n  \r\n  export const changeTaskStatusService = async (taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'not-completed'): Promise<ITask | null> => {\r\n    return await updateTaskStatus(taskId, status);\r\n  };\r\n  \r\n  export const editTaskService = async (taskId: string, updates: Partial<ITask>): Promise<ITask | null> => {\r\n    // notificationDate and notificationTime is updated\r\n  if (updates.notificationDate || updates.notificationTime) {\r\n    const task = await editTask(taskId, updates);\r\n    if (!task) {\r\n      throw new Error('Task not found');\r\n    }\r\n\r\n    console.log(`notificationDate : ${updates.notificationDate} notification time : ${updates.notificationTime}`)\r\n    // Update all notifications for this task\r\n    await updateTaskNotifications(\r\n      taskId,\r\n      updates.notificationDate,\r\n      updates.notificationTime\r\n    );\r\n    console.log(`Updated notifications for task ${taskId}`);\r\n\r\n    return task;\r\n  }\r\n\r\n  return await editTask(taskId, updates);\r\n};\r\n\r\n  export const deleteTaskService = async (taskId: string): Promise<void> => {\r\n    await deleteTask(taskId);\r\n  };"]}