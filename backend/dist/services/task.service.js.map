{"version":3,"file":"task.service.js","sourceRoot":"","sources":["../../src/services/task.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAE3D,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AAGlJ,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAC,QAAwB,EAAE,SAAkB,EAAkB,EAAE;IACpG,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACvD,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;IAC5B,CAAC;IACD,OAAO,MAAM,cAAc,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,WAAmB,EAAE,SAAiB,EAAoB,EAAE;IACzG,OAAO,MAAM,kBAAkB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAAE,MAAc,EAAE,QAAmC,EAAyB,EAAE;IAC5H,OAAO,MAAM,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,MAAc,EAAE,MAAiE,EAAyB,EAAE;IACxJ,OAAO,MAAM,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,MAAc,EAAE,OAAuB,EAAyB,EAAE;IACtG,OAAO,MAAM,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAAc,EAAiB,EAAE;IACvE,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import { uploadImage } from '../utils/cloudinary.utils.js';\r\nimport { ITask } from '../models/task.modal.js';\r\nimport { createTaskRepo, deleteTask, editTask, findTasksByContext, updateTaskPriority, updateTaskStatus } from '../repositories/task.repositry.js';\r\n\r\n\r\n export const createTaskService = async(taskData: Partial<ITask>, imagePath?: string): Promise<ITask> => {\r\n    if (imagePath) {\r\n      const imageUrl = await uploadImage(imagePath, 'tasks');\r\n      taskData.image = imageUrl;\r\n    }\r\n    return await createTaskRepo(taskData);\r\n  }\r\n\r\n  export const getTasksByContextService = async (contextType: string, contextId: string): Promise<ITask[]> => {\r\n    return await findTasksByContext(contextType, contextId);\r\n  };\r\n  \r\n  export const changeTaskPriorityService = async (taskId: string, priority: 'low' | 'medium' | 'high'): Promise<ITask | null> => {\r\n    return await updateTaskPriority(taskId, priority);\r\n  };\r\n  \r\n  export const changeTaskStatusService = async (taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'not-completed'): Promise<ITask | null> => {\r\n    return await updateTaskStatus(taskId, status);\r\n  };\r\n  \r\n  export const editTaskService = async (taskId: string, updates: Partial<ITask>): Promise<ITask | null> => {\r\n    return await editTask(taskId, updates);\r\n  };\r\n\r\n  export const deleteTaskService = async (taskId: string): Promise<void> => {\r\n    await deleteTask(taskId);\r\n  };"]}