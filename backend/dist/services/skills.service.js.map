{"version":3,"file":"skills.service.js","sourceRoot":"","sources":["../../src/services/skills.service.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,SAAS,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAE1D,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,IAA6B,EAAE,SAAkB,EAAE,QAAiB,EAAE,EAAE;IACtG,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC/D,QAAQ,GAAG,GAAG,CAAC;IACjB,CAAC;IACD,OAAO,MAAM,SAAS,CAAC,WAAW,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC5D,CAAC,CAAC;AAEJ,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,aAAoB,EAAE,EAAE;IACzD,OAAO,MAAM,SAAS,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;AACrD,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC;AAEnD,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,EAAU,EAAE,IAA6B,EAAE,SAAkB,EAAE,QAAgB,EAAE,EAAE;IACjH,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC/D,QAAQ,GAAG,GAAG,CAAC;IACjB,CAAC;IACD,OAAO,MAAM,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;AACrF,CAAC,CAAC;AACJ,MAAM,CAAC,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AAEjD,uBAAuB;AACvB,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;IAClC,IAAI,CAAC;QACH,OAAO,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC;IACrC,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { SkillInterface } from \"../Interfaces/models/SkillInterface.js\";\r\nimport * as SkillRepo from \"../repositories/skills.repositry.js\";\r\nimport { uploadMedia } from \"../core/Utils/Cloudinary.js\";\r\n\r\nexport const createSkill = async (data: Partial<SkillInterface>, imagePath?: string, fileSize?: number) => {\r\n    let imageUrl = null;\r\n    if (imagePath) {\r\n      const folder = \"skill\";\r\n      const { url } = await uploadMedia(imagePath, folder, fileSize);\r\n      imageUrl = url; \r\n    }\r\n    return await SkillRepo.createSkill({ ...data, imageUrl });\r\n  };\r\n\r\nexport const getAllSkills = async (subcategoryId:string) => {\r\n  return await SkillRepo.getAllSkills(subcategoryId);\r\n};\r\n\r\n\r\nexport const getSkillById = SkillRepo.getSkillById;\r\n\r\nexport const updateSkill = async (id: string, data: Partial<SkillInterface>, imagePath?: string, fileSize?:number) => {\r\n    let imageUrl = null;\r\n    if (imagePath) {\r\n      const folder = \"skill\";\r\n      const { url } = await uploadMedia(imagePath, folder, fileSize);\r\n      imageUrl = url; \r\n    }\r\n    return await SkillRepo.updateSkill(id, { ...data, ...(imageUrl && { imageUrl }) });\r\n  };\r\nexport const deleteSkill = SkillRepo.deleteSkill;\r\n\r\n// Get available skills\r\nexport const getSkills = async () => {\r\n  try {\r\n    return await SkillRepo.getSkills();\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching skills: \" + error.message);\r\n  }\r\n};"]}