{"version":3,"file":"call.service.js","sourceRoot":"","sources":["../../src/services/call.service.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,aAAa,MAAM,mCAAmC,CAAC;AACnE,8EAA8E;AAE5E,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,EAC1B,OAAe,EACf,QAAgB,EAChB,WAAmB,EACnB,IAAuB,EACvB,MAA0C,EAC3B,EAAE;IACjB,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC;QACtC,OAAO;QACP,QAAQ;QACR,WAAW;QACX,IAAI;QACJ,MAAM;QACN,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC,CAAC;IAEH,+BAA+B;IAC/B,kDAAkD;IAClD,mBAAmB;IACnB,uBAAuB;IACvB,qDAAqD;IACrD,cAAc;IACd,OAAO;IACP,oCAAoC;IACpC,kDAAkD;IAClD,mBAAmB;IACnB,qBAAqB;IACrB,mDAAmD;IACnD,cAAc;IACd,OAAO;IACP,IAAI;IACJ,OAAO,IAAI,CAAC;AACd,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAC,OAAe,EAAmB,EAAE;IACzE,OAAO,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC9C,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAC,MAAc,EAAmB,EAAE;IACvE,OAAO,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AAC5C,CAAC,CAAA","sourcesContent":["import { Call } from \"../models/call.modal.js\";\r\nimport * as callRepositry from '../repositories/call.repositry.js';\r\n// import * as notificationService from \"../services/notification.service.js\";\r\n\r\n  export const logCall = async(\r\n    chatKey: string,\r\n    callerId: string,\r\n    recipientId: string,\r\n    type: 'audio' | 'video',\r\n    status: 'incoming' | 'answered' | 'missed'\r\n  ): Promise<Call> => {\r\n    const call = await callRepositry.create({\r\n      chatKey,\r\n      callerId,\r\n      recipientId,\r\n      type,\r\n      status,\r\n      timestamp: new Date(),\r\n    });\r\n\r\n    // if (status === 'incoming') {\r\n    //   await notificationService.createNotification(\r\n    //     recipientId,\r\n    //     'incoming_call',\r\n    //     `Incoming ${type} call from user ${callerId}`,\r\n    //     chatKey\r\n    //   );\r\n    // } else if (status === 'missed') {\r\n    //   await notificationService.createNotification(\r\n    //     recipientId,\r\n    //     'missed_call',\r\n    //     `Missed ${type} call from user ${callerId}`,\r\n    //     chatKey\r\n    //   );\r\n    // }\r\n    return call;\r\n  }\r\n\r\n  export const getCallsByChatKey = async(chatKey: string): Promise<Call[]> => {\r\n    return callRepositry.findByChatKey(chatKey);\r\n  }\r\n\r\n  export const getCallsByUserId = async(userId: string): Promise<Call[]> => {\r\n    return callRepositry.findByUserId(userId);\r\n  }"]}