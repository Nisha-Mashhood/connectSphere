{"version":3,"file":"call.service.js","sourceRoot":"","sources":["../../src/services/call.service.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,sEAAsE;AACtE,iFAAiF;;AAEjF,kCAAkC;AAClC,uBAAuB;AACvB,wBAAwB;AACxB,2BAA2B;AAC3B,+BAA+B;AAC/B,iDAAiD;AACjD,0BAA0B;AAC1B,gDAAgD;AAChD,iBAAiB;AACjB,kBAAkB;AAClB,qBAAqB;AACrB,cAAc;AACd,gBAAgB;AAChB,+BAA+B;AAC/B,UAAU;AAEN,+BAA+B;AAC/B,kDAAkD;AAClD,mBAAmB;AACnB,uBAAuB;AACvB,qDAAqD;AACrD,cAAc;AACd,OAAO;AACP,oCAAoC;AACpC,kDAAkD;AAClD,mBAAmB;AACnB,qBAAqB;AACrB,mDAAmD;AACnD,cAAc;AACd,OAAO;AACP,IAAI;AACN,iBAAiB;AACjB,IAAI;AAEJ,gFAAgF;AAChF,iDAAiD;AACjD,IAAI;AAEJ,8EAA8E;AAC9E,+CAA+C;AAC/C,IAAI","sourcesContent":["// import { Call } from \"../Interfaces/models/Call.js\";\r\n// import * as callRepositry from '../repositories/call.repositry.js';\r\n// // import * as notificationService from \"../services/notification.service.js\";\r\n\r\n//   export const logCall = async(\r\n//     chatKey: string,\r\n//     callerId: string,\r\n//     recipientId: string,\r\n//     type: 'audio' | 'video',\r\n//     status: 'incoming' | 'answered' | 'missed'\r\n//   ): Promise<Call> => {\r\n//     const call = await callRepositry.create({\r\n//       chatKey,\r\n//       callerId,\r\n//       recipientId,\r\n//       type,\r\n//       status,\r\n//       timestamp: new Date(),\r\n//     });\r\n\r\n    // if (status === 'incoming') {\r\n    //   await notificationService.createNotification(\r\n    //     recipientId,\r\n    //     'incoming_call',\r\n    //     `Incoming ${type} call from user ${callerId}`,\r\n    //     chatKey\r\n    //   );\r\n    // } else if (status === 'missed') {\r\n    //   await notificationService.createNotification(\r\n    //     recipientId,\r\n    //     'missed_call',\r\n    //     `Missed ${type} call from user ${callerId}`,\r\n    //     chatKey\r\n    //   );\r\n    // }\r\n  //   return call;\r\n  // }\r\n\r\n  // export const getCallsByChatKey = async(chatKey: string): Promise<Call[]> => {\r\n  //   return callRepositry.findByChatKey(chatKey);\r\n  // }\r\n\r\n  // export const getCallsByUserId = async(userId: string): Promise<Call[]> => {\r\n  //   return callRepositry.findByUserId(userId);\r\n  // }"]}