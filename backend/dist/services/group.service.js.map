{"version":3,"file":"group.service.js","sourceRoot":"","sources":["../../src/services/group.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,qBAAqB,EACrB,yBAAyB,EACzB,yBAAyB,EACzB,wBAAwB,EACxB,SAAS,EACT,kBAAkB,EAElB,kBAAkB,EAClB,wBAAwB,GACzB,MAAM,oCAAoC,CAAC;AAE5C,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,SAAwB,EAAE,EAAE;IACnE,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC5D,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;IAED,IAAI,CAAC,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvE,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC7D,CAAC;IAED,4BAA4B;IAC5B,MAAM,YAAY,GAAG;QACnB,GAAG,SAAS;QACZ,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,OAAO,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACnD,CAAC,CAAC;AAEF,iCAAiC;AACjC,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;IACzD,IAAI,CAAC;QACH,oCAAoC;QACpC,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACjD,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC,CAAC;AAEF,gBAAgB;AAChB,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,IAAI,EAAE;IACpC,IAAI,CAAC;QACH,oCAAoC;QACpC,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;QACjC,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,2BAA2B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC,CAAC;AAEF,2BAA2B;AAC3B,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAAe,EAAE,MAAc,EAAE,EAAE;IAC1E,OAAO,MAAM,kBAAkB,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;AACvD,CAAC,CAAA;AAED,gCAAgC;AAChC,MAAM,CAAC,MAAM,2BAA2B,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;IACnE,OAAO,MAAM,yBAAyB,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF,gCAAgC;AAChC,MAAM,CAAC,MAAM,2BAA2B,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;IACnE,OAAO,MAAM,yBAAyB,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF,+BAA+B;AAC/B,MAAM,CAAC,MAAM,0BAA0B,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IACjE,OAAO,MAAM,wBAAwB,CAAC,MAAM,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,0CAA0C;AAC1C,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,SAAiB,EAAE,MAA+B,EAAE,EAAE;IACnG,OAAO,MAAM,wBAAwB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC3D,CAAC,CAAC","sourcesContent":["import {\r\n  createGroupRepository,\r\n  getGroupRequestsByAdminId,\r\n  getGroupRequestsByGroupId,\r\n  getGroupRequestsByuserId,\r\n  getGroups,\r\n  getGroupsByAdminId,\r\n  GroupFormData,\r\n  sendRequestToGroup,\r\n  updateGroupRequestStatus,\r\n} from \"../repositories/group.repositry.js\";\r\n\r\nexport const createGroupService = async (groupData: GroupFormData) => {\r\n  if (!groupData.name || !groupData.bio || !groupData.adminId) {\r\n    throw new Error(\"Missing required fields: name, bio, or adminId\");\r\n  }\r\n\r\n  if (!groupData.availableSlots || groupData.availableSlots.length === 0) {\r\n    throw new Error(\"At least one available slot is required\");\r\n  }\r\n\r\n  // Process data if necessary\r\n  const groupPayload = {\r\n    ...groupData,\r\n    createdAt: new Date(),\r\n  };\r\n\r\n  return await createGroupRepository(groupPayload);\r\n};\r\n\r\n//Get group details using adminId\r\nexport const fetchGroupDetails = async (adminId: string) => {\r\n  try {\r\n    // Fetch groups using the repository\r\n    const groups = await getGroupsByAdminId(adminId);\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error in service layer: ${error.message}`);\r\n  }\r\n};\r\n\r\n//Get all Groups\r\nexport const fetchGroups = async () => {\r\n  try {\r\n    // Fetch groups using the repository\r\n    const groups = await getGroups();\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error in service layer: ${error.message}`);\r\n  }\r\n};\r\n\r\n//send requset to the group\r\nexport const requestToJoinGroup = async (groupId: string, userId: string) => {\r\n  return await sendRequestToGroup({ groupId, userId });\r\n}\r\n\r\n//fetch group requset by groupId\r\nexport const fetchGroupRequestsByGroupId = async (groupId: string) => {\r\n  return await getGroupRequestsByGroupId(groupId);\r\n};\r\n\r\n//fetch group requset by AdminId\r\nexport const fetchGroupRequestsByAdminId = async (adminId: string) => {\r\n  return await getGroupRequestsByAdminId(adminId);\r\n};\r\n\r\n//fetch group requset by UserId\r\nexport const fetchGroupRequestsByuserId = async (userId: string) => {\r\n  return await getGroupRequestsByuserId(userId);\r\n};\r\n\r\n//update the status to approved / rejected\r\nexport const modifyGroupRequestStatus = async (requestId: string, status: \"Approved\" | \"Rejected\") => {\r\n  return await updateGroupRequestStatus(requestId, status);\r\n};"]}