{"version":3,"file":"group.service.js","sourceRoot":"","sources":["../../src/services/group.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { sendEmail } from \"../core/Utils/Email.js\";\r\nimport {\r\n  addMemberToGroup,\r\n  createGroupRepository,\r\n  deleteGroupById,\r\n  deleteGroupRequest,\r\n  deleteGroupRequestsByGroupId,\r\n  findGrouptById,\r\n  findRequestById,\r\n  getAllGrouprequsets,\r\n  // getAllGroups,\r\n  // getGroupDeatilsById,\r\n  getGroupRequestsByAdminId,\r\n  getGroupRequestsByGroupId,\r\n  getGroupRequestsByuserId,\r\n  getGroupRequestById,\r\n  getGroups,\r\n  getGroupsByAdminId,\r\n  getGroupsByGroupId,\r\n  groupDetilsByUserId,\r\n  GroupFormData,\r\n  removeGroupMemberById,\r\n  sendRequestToGroup,\r\n  updateGroupImageRepositry,\r\n  updateGroupPaymentStatus,\r\n  updateGroupReqStatus,\r\n  // updateGroupRequestStatus,\r\n} from \"../repositories/group.repositry.js\";\r\nimport stripe from \"../core/Utils/Stripe.js\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Stripe } from \"stripe\";\r\nimport { findUserById } from \"../repositories/user.repositry.js\";\r\nimport { createContact } from \"../repositories/contacts.repository.js\";\r\nimport { GroupDocument } from \"../Interfaces/models/GroupDocument.js\";\r\nimport mongoose from \"mongoose\";\r\n\r\nexport const createGroupService = async (\r\n  groupData: GroupFormData\r\n): Promise<GroupDocument> => {\r\n  if (\r\n    !groupData.name ||\r\n    !groupData.bio ||\r\n    !groupData.adminId ||\r\n    !groupData.startDate\r\n  ) {\r\n    throw new Error(\"Missing required fields: name, bio, or adminId\");\r\n  }\r\n\r\n  if (!groupData.availableSlots || groupData.availableSlots.length === 0) {\r\n    throw new Error(\"At least one available slot is required\");\r\n  }\r\n  if (groupData.maxMembers > 4) {\r\n    throw new Error(\"Maximum members cannot exceed 4\");\r\n  }\r\n\r\n  const groupPayload: GroupFormData = {\r\n    ...groupData,\r\n    createdAt: new Date(),\r\n  };\r\n\r\n  const newGroup: GroupDocument = await createGroupRepository(groupPayload);\r\n\r\n  if (!newGroup) {\r\n    throw new Error(\"No group created\");\r\n  }\r\n  // console.log(\"newGroup:\", newGroup);\r\n  // console.log(\"newGroup._id:\", newGroup._id);\r\n\r\n  await createContact({\r\n    userId: groupData.adminId,\r\n    groupId: (newGroup._id as mongoose.Types.ObjectId).toString(),\r\n    type: \"group\",\r\n  });\r\n\r\n  return newGroup;\r\n};\r\n\r\n//Get group details using adminId\r\nexport const fetchGroupDetails = async (adminId: string) => {\r\n  try {\r\n    // Fetch groups using the repository\r\n    const groups = await getGroupsByAdminId(adminId);\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error in service layer: ${error.message}`);\r\n  }\r\n};\r\n\r\n//Get group details using groupId\r\nexport const fetchGroupDetailsService = async (groupId: any) => {\r\n  try {\r\n    // Fetch groups using the repository\r\n    const groups = await getGroupsByGroupId(groupId);\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error in group fetching: ${error.message}`);\r\n  }\r\n};\r\n\r\n//Get all Groups\r\nexport const fetchGroups = async () => {\r\n  try {\r\n    // Fetch groups using the repository\r\n    const groups = await getGroups();\r\n    return groups;\r\n  } catch (error: any) {\r\n    throw new Error(`Error in service layer: ${error.message}`);\r\n  }\r\n};\r\n\r\n//send requset to the group\r\nexport const requestToJoinGroup = async (groupId: string, userId: string) => {\r\n  return await sendRequestToGroup({ groupId, userId });\r\n};\r\n\r\n//fetch group requset by groupId\r\nexport const fetchGroupRequestsByGroupId = async (groupId: string) => {\r\n  return await getGroupRequestsByGroupId(groupId);\r\n};\r\n\r\n//fetch group requset by AdminId\r\nexport const fetchGroupRequestsByAdminId = async (adminId: string) => {\r\n  return await getGroupRequestsByAdminId(adminId);\r\n};\r\n\r\n//fetch group requset by UserId\r\nexport const fetchGroupRequestsByuserId = async (userId: string) => {\r\n  return await getGroupRequestsByuserId(userId);\r\n};\r\n\r\n//update the status to approved / rejected\r\nexport const modifyGroupRequestStatus = async (\r\n  requestId: string,\r\n  status: \"Accepted\" | \"Rejected\"\r\n) => {\r\n  const request = await findRequestById(requestId);\r\n  if (!request) {\r\n    throw new Error(\"Group request not found.\");\r\n  }\r\n  const group = await findGrouptById(request.groupId);\r\n  if (!group) {\r\n    throw new Error(\"Group not found.\");\r\n  }\r\n\r\n  if (status === \"Accepted\") {\r\n    // Verify group is not full\r\n    if (group.isFull || group.members.length >= 4) {\r\n      throw new Error(\r\n        \"Cannot accept request. Group is full (maximum 4 members).\"\r\n      );\r\n    }\r\n\r\n    await updateGroupReqStatus(requestId, \"Accepted\");\r\n\r\n    if (group.price > 0) {\r\n      return { message: \"Request accepted. Awaiting payment.\" };\r\n    } else {\r\n      try {\r\n        // Add member to group\r\n        await addMemberToGroup(\r\n          (group._id as any).toString(),\r\n          request.userId.toString()\r\n        );\r\n\r\n        // Create contact\r\n        await createContact({\r\n          userId: request.userId.toString(),\r\n          groupId: (group._id as any).toString(),\r\n          type: \"group\",\r\n        });\r\n\r\n        // Delete the group request\r\n        await deleteGroupRequest(requestId);\r\n\r\n        // Verify member was added\r\n        const updatedGroup = await findGrouptById(group._id);\r\n        if (\r\n          !updatedGroup?.members.some(\r\n            (m) => m.userId.toString() === request.userId.toString()\r\n          )\r\n        ) {\r\n          throw new Error(\"Failed to add member to group.\");\r\n        }\r\n\r\n        return { message: \"User added to group successfully.\" };\r\n      } catch (error: any) {\r\n        console.error(\"Error processing free group request:\", error);\r\n        throw new Error(`Failed to add member: ${error.message}`);\r\n      }\r\n    }\r\n  } else if (status === \"Rejected\") {\r\n    await updateGroupReqStatus(requestId, \"Rejected\");\r\n    return { message: \"Request rejected successfully.\" };\r\n  }\r\n\r\n  throw new Error(\"Invalid status.\");\r\n};\r\n\r\nexport const processGroupPaymentService = async (\r\n  paymentMethodId: string | { id: string },\r\n  amount: number,\r\n  requestId: string,\r\n  email: string,\r\n  groupRequestData: { groupId: string; userId: string },\r\n  returnUrl: string\r\n) => {\r\n  const idempotencyKey = uuid();\r\n\r\n  try {\r\n    const request = await findRequestById(requestId);\r\n    if (!request) {\r\n      throw new Error(\"Group request not found.\");\r\n    }\r\n    const group = await findGrouptById(request.groupId);\r\n    if (!group) {\r\n      throw new Error(\"Group not found.\");\r\n    }\r\n    if (group.isFull || group.members.length >= 4) {\r\n      throw new Error(\r\n        \"Cannot complete payment. Group is full (maximum 4 members).\"\r\n      );\r\n    }\r\n    // Extract payment method ID if it's an object\r\n    const paymentMethodIdString =\r\n      typeof paymentMethodId === \"string\"\r\n        ? paymentMethodId\r\n        : paymentMethodId.id;\r\n    if (!paymentMethodIdString || typeof paymentMethodIdString !== \"string\") {\r\n      throw new Error(\"Invalid paymentMethodId\");\r\n    }\r\n\r\n    console.log(\r\n      `Processing payment with paymentMethodId: ${paymentMethodIdString}`\r\n    );\r\n\r\n    // List customers with email filter\r\n    const customerListParams: Stripe.CustomerListParams = { email, limit: 1 };\r\n    const customers = await stripe.customers.list(customerListParams);\r\n    let customer: Stripe.Customer | null =\r\n      customers.data.length > 0 ? customers.data[0] : null;\r\n\r\n    if (!customer) {\r\n      const customerCreateParams: Stripe.CustomerCreateParams = {\r\n        email,\r\n        payment_method: paymentMethodIdString,\r\n        invoice_settings: { default_payment_method: paymentMethodIdString },\r\n      };\r\n      customer = await stripe.customers.create(customerCreateParams);\r\n    }\r\n\r\n    const paymentIntentParams: Stripe.PaymentIntentCreateParams = {\r\n      amount,\r\n      currency: \"inr\",\r\n      customer: customer.id,\r\n      payment_method: paymentMethodIdString,\r\n      confirm: true,\r\n      description: `Payment for Group Request ID: ${requestId}`,\r\n      receipt_email: email,\r\n      metadata: {\r\n        requestId,\r\n        groupId: groupRequestData.groupId,\r\n        userId: groupRequestData.userId,\r\n      },\r\n      return_url: `${returnUrl}?payment_status=success&request_id=${requestId}`,\r\n    };\r\n\r\n    const paymentIntent = await stripe.paymentIntents.create(\r\n      paymentIntentParams,\r\n      { idempotencyKey }\r\n    );\r\n\r\n    if (paymentIntent.status === \"succeeded\") {\r\n      await updateGroupPaymentStatus(requestId, amount / 100);\r\n      await addMemberToGroup(groupRequestData.groupId, groupRequestData.userId);\r\n\r\n      await createContact({\r\n        userId: groupRequestData.userId,\r\n        groupId: groupRequestData.groupId,\r\n        type: \"group\",\r\n      });\r\n\r\n      await deleteGroupRequest(requestId);\r\n    }\r\n\r\n    return paymentIntent;\r\n  } catch (error: any) {\r\n    console.error(\"Stripe payment error:\", error);\r\n    throw new Error(error.message || \"Payment processing failed\");\r\n  }\r\n};\r\n\r\nexport const removeMemberFromGroup = async (\r\n  groupId: string,\r\n  userId: string\r\n) => {\r\n  try {\r\n    // Check if the group exists\r\n    const group = await findGrouptById(groupId);\r\n    if (!group) {\r\n      throw new Error(\"Group not found\");\r\n    }\r\n\r\n    // Check if the user exists\r\n    const user = await findUserById(userId);\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    // Call the repository function to remove the user\r\n    const updatedGroup = await removeGroupMemberById(groupId, userId);\r\n\r\n    // Compose email details\r\n    const subject = `You have been removed from the group \"${group.name}\"`;\r\n    const text = `Hi ${user.name},\r\n\r\nWe wanted to inform you that you have been removed from the group \"${group.name}\" on ConnectSphere.\r\n\r\nIf you believe this was a mistake or have any questions, feel free to reach out to our support team.\r\n\r\nBest regards,\r\nConnectSphere Team`;\r\n\r\n    // Send email notification\r\n    await sendEmail(user.email, subject, text);\r\n    console.log(`Removal email sent to: ${user.email}`);\r\n\r\n    return updatedGroup;\r\n  } catch (error: any) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const deleteGroupByIdService = async (groupId: string) => {\r\n  // Check if the group exists\r\n  const group = await findGrouptById(groupId);\r\n  if (!group) {\r\n    throw new Error(\"Group not found\");\r\n  }\r\n\r\n  // Delete all related group requests before deleting the group\r\n  await deleteGroupRequestsByGroupId(groupId);\r\n\r\n  // Call the repository function to delete the group\r\n  const deletedGroup = await deleteGroupById(groupId);\r\n  return deletedGroup;\r\n};\r\n\r\n//upload group images\r\nexport const updateGroupImageService = async (\r\n  groupId: string,\r\n  profilePic?: string,\r\n  coverPic?: string\r\n) => {\r\n  const updateData: { profilePic?: string; coverPic?: string } = {};\r\n\r\n  if (profilePic) updateData.profilePic = profilePic;\r\n  if (coverPic) updateData.coverPic = coverPic;\r\n\r\n  return await updateGroupImageRepositry(groupId, updateData);\r\n};\r\n\r\n//Get details of the group for the members of the group\r\nexport const groupDetilsForMembers = async (userId: string) => {\r\n  try {\r\n    const groupDetails = await groupDetilsByUserId(userId);\r\n    if (!groupDetails) {\r\n      throw new Error(\"User is not a member of any of the registered groups\");\r\n    }\r\n    return groupDetails;\r\n  } catch (error) {\r\n    console.error(\"Error in GroupService:\", error);\r\n    throw new Error(\"Error retrieving group details\");\r\n  }\r\n};\r\n\r\n//  get all group requests\r\nexport const fetchAllGroupRequests = async () => {\r\n  return await getAllGrouprequsets();\r\n};\r\n\r\n//  get group request details by request ID\r\nexport const fetchGroupRequestById = async (requestId: string) => {\r\n  return await getGroupRequestById(requestId);\r\n};\r\n"]}