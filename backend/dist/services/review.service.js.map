{"version":3,"file":"review.service.js","sourceRoot":"","sources":["../../src/services/review.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAC7E,OAAO,KAAM,gBAAgB,MAAO,sCAAsC,CAAC;AAEzE,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,MAAc,EAAE,MAAc,EAAE,OAAe,EAAC,EAAE;IACnF,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAA;IACnC,CAAC;IACD,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;QACnD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;IACxD,CAAC;IACD,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAC9C,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;IACnD,CAAC;IACD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;IAChF,MAAM,UAAU,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/D,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,MAAc,EAAC,EAAE;IAChD,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAA;IACpC,CAAC;IACD,MAAM,UAAU,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;AAC9C,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,IAAG,EAAE;IACrC,OAAO,MAAM,gBAAgB,CAAC,aAAa,EAAE,CAAC;AAChD,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,QAAgB,EAAC,EAAE;IACrD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;IACtC,CAAC;IACD,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7E,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,QAAgB,EAAC,EAAE;IACpD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;IACtC,CAAC;IACD,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QACvD,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAA;IAC9D,CAAC;IACD,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;IACzD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;QAC9B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;IACtC,CAAC;IACD,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AAC/F,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;IACvD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACvC,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC1C,CAAC;IACD,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AAC5E,CAAC,CAAC;AAEA,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,IAAG,EAAE;IAC1C,OAAO,MAAM,gBAAgB,CAAC,kBAAkB,EAAE,CAAC;AACrD,CAAC,CAAA","sourcesContent":["import { findUserById, updateUser } from '../repositories/user.repositry.js';\r\nimport * as  ReviewRepository  from '../repositories/review.repository.js';\r\n\r\n  export const submitReview = async (userId: string, rating: number, comment: string)=> {\r\n    const user = await findUserById(userId);\r\n    if (!user) {\r\n      console.log('User not found');\r\n      throw new Error('User not found')\r\n    }\r\n    if (user.hasReviewed) {\r\n      console.log('User has already submitted a review');\r\n      throw new Error('User has already submitted a review')\r\n    }\r\n    if (rating < 1 || rating > 5) {\r\n      console.log('Rating must be between 1 and 5');\r\n      throw new Error('Rating must be between 1 and 5')\r\n    }\r\n    const review = await ReviewRepository.createReview({ userId, rating, comment });\r\n    await updateUser(userId, { hasReviewed: true, loginCount: 0 });\r\n    return review;\r\n  }\r\n\r\n  export const skipReview = async (userId: string)=> {\r\n    const user = await findUserById(userId);\r\n    if (!user) {\r\n      console.log('User not found');\r\n       throw new Error('User not found')\r\n    }\r\n    await updateUser(userId, { loginCount: 0 });\r\n  }\r\n\r\n  export const getAllReviews = async ()=> {\r\n    return await ReviewRepository.getAllReviews();\r\n  }\r\n\r\n  export const approveReview = async (reviewId: string)=> {\r\n    const review = await ReviewRepository.findById(reviewId);\r\n    if (!review) {\r\n      console.log('Review not found');\r\n       throw new Error('Review not found')\r\n    }\r\n    return await ReviewRepository.updateReview(reviewId, { isApproved: true });\r\n  }\r\n\r\n  export const selectReview = async (reviewId: string)=> {\r\n    const review = await ReviewRepository.findById(reviewId);\r\n    if (!review) {\r\n      console.log('Review not found');\r\n       throw new Error('Review not found')\r\n    }\r\n    if (!review?.isApproved) {\r\n      console.log('Review must be approved before selecting');\r\n       throw new Error('Review must be approved before selecting')\r\n    }\r\n    return await ReviewRepository.updateReview(reviewId, { isSelect: true });\r\n  }\r\n\r\n  export const cancelApproval = async (reviewId: string) => {\r\n  const review = await ReviewRepository.findById(reviewId);\r\n  if (!review) {\r\n    console.log('Review not found')\r\n     throw new Error('Review not found')\r\n  }\r\n  return await ReviewRepository.updateReview(reviewId, { isApproved: false, isSelect: false });\r\n};\r\n\r\nexport const deselectReview = async (reviewId: string) => {\r\n  const review = await ReviewRepository.findById(reviewId);\r\n  if (!review) {\r\n    console.log('Review not found');\r\n     throw new Error('Review not found');\r\n  }\r\n  if (!review.isSelect) {\r\n    console.log('Review not selected');\r\n     throw new Error('Review not selected');\r\n  }\r\n  return await ReviewRepository.updateReview(reviewId, { isSelect: false });\r\n};\r\n\r\n  export const getSelectedReviews = async ()=> {\r\n    return await ReviewRepository.getSelectedReviews();\r\n  }"]}