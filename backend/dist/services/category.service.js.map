{"version":3,"file":"category.service.js","sourceRoot":"","sources":["../../src/services/category.service.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,YAAY,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAE3D,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,IAAY,EAAE,SAAkB,EAAoB,EAAE;IAClG,OAAO,MAAM,YAAY,CAAC,uBAAuB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,mDAAmD;AACnD,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,IAAgC,EAAE,SAAkB,EAAE,EAAE;IACzF,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,YAAY,CAAC;QAC5B,QAAQ,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,MAAM,YAAY,CAAC,cAAc,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AAClE,CAAC,CAAC;AAEJ,MAAM,CAAC,MAAM,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;AAC9D,MAAM,CAAC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;AAE5D,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,IAAgC,EAAE,SAAkB,EAAE,EAAE;IACrG,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,YAAY,CAAC;QAC5B,QAAQ,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,MAAM,YAAY,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,EAAE,GAAG,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3F,CAAC,CAAC;AAEJ,MAAM,CAAC,MAAM,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC","sourcesContent":["import { CategoryInterface } from \"src/models/category.model.js\";\r\nimport * as CategoryRepo from \"../repositories/category.repositry.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\n\r\nexport const isDuplicateCategoryName = async (name: string, excludeId?: string): Promise<boolean> => {\r\n  return await CategoryRepo.isDuplicateCategoryName(name, excludeId);\r\n};\r\n\r\n// Create a new category with optional image upload\r\nexport const createCategory = async (data: Partial<CategoryInterface>, imagePath?: string) => {\r\n    let imageUrl = null;\r\n    if (imagePath) {\r\n      const folder = \"categories\";\r\n      imageUrl = await uploadImage(imagePath, folder);\r\n    }\r\n    return await CategoryRepo.createCategory({ ...data, imageUrl });\r\n  };\r\n\r\nexport const getAllCategories = CategoryRepo.getAllCategories;\r\nexport const getCategoryById = CategoryRepo.getCategoryById;\r\n\r\nexport const updateCategory = async (id: string, data: Partial<CategoryInterface>, imagePath?: string) => {\r\n    let imageUrl = null;\r\n    if (imagePath) {\r\n      const folder = \"categories\";\r\n      imageUrl = await uploadImage(imagePath, folder);\r\n    }\r\n    return await CategoryRepo.updateCategory(id, { ...data, ...(imageUrl && { imageUrl }) });\r\n  };\r\n  \r\nexport const deleteCategory = CategoryRepo.deleteCategory;\r\n\r\n"]}