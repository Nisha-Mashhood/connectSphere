{"version":3,"file":"category.service.js","sourceRoot":"","sources":["../../src/services/category.service.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,YAAY,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAE,uBAAuB,EAAE,MAAM,0CAA0C,CAAC;AACnF,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAE3D,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAC1C,IAAY,EACZ,SAAkB,EACA,EAAE;IACpB,OAAO,MAAM,YAAY,CAAC,uBAAuB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,mDAAmD;AACnD,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,IAAgC,EAChC,SAAkB,EAClB,EAAE;IACF,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,YAAY,CAAC;QAC5B,QAAQ,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,MAAM,YAAY,CAAC,cAAc,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;AAC9D,MAAM,CAAC,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;AAE5D,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,EAAU,EACV,IAAgC,EAChC,SAAkB,EAClB,EAAE;IACF,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,YAAY,CAAC;QAC5B,QAAQ,GAAG,MAAM,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,MAAM,YAAY,CAAC,cAAc,CAAC,EAAE,EAAE;QAC3C,GAAG,IAAI;QACP,GAAG,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,CAAC;KAC9B,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE;IACjD,IAAI,CAAC;QACH,qCAAqC;QACrC,MAAM,uBAAuB,CAAC,EAAE,CAAC,CAAC;QAElC,wBAAwB;QACxB,MAAM,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAE3B,iCAAiC;QACjC,OAAO,MAAM,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;IACJ,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { CategoryInterface } from \"src/models/category.model.js\";\r\nimport * as CategoryRepo from \"../repositories/category.repositry.js\";\r\nimport { deleteManySubcategories } from \"../repositories/subcategory.repositry.js\";\r\nimport { deleteManySkills } from \"../repositories/skills.repositry.js\";\r\nimport { uploadImage } from \"../utils/cloudinary.utils.js\";\r\n\r\nexport const isDuplicateCategoryName = async (\r\n  name: string,\r\n  excludeId?: string\r\n): Promise<boolean> => {\r\n  return await CategoryRepo.isDuplicateCategoryName(name, excludeId);\r\n};\r\n\r\n// Create a new category with optional image upload\r\nexport const createCategory = async (\r\n  data: Partial<CategoryInterface>,\r\n  imagePath?: string\r\n) => {\r\n  let imageUrl = null;\r\n  if (imagePath) {\r\n    const folder = \"categories\";\r\n    imageUrl = await uploadImage(imagePath, folder);\r\n  }\r\n  return await CategoryRepo.createCategory({ ...data, imageUrl });\r\n};\r\n\r\nexport const getAllCategories = CategoryRepo.getAllCategories;\r\nexport const getCategoryById = CategoryRepo.getCategoryById;\r\n\r\nexport const updateCategory = async (\r\n  id: string,\r\n  data: Partial<CategoryInterface>,\r\n  imagePath?: string\r\n) => {\r\n  let imageUrl = null;\r\n  if (imagePath) {\r\n    const folder = \"categories\";\r\n    imageUrl = await uploadImage(imagePath, folder);\r\n  }\r\n  return await CategoryRepo.updateCategory(id, {\r\n    ...data,\r\n    ...(imageUrl && { imageUrl }),\r\n  });\r\n};\r\n\r\nexport const deleteCategory = async (id: string) => {\r\n  try {\r\n    // Delete related subcategories first\r\n    await deleteManySubcategories(id);\r\n\r\n    // Delete related skills\r\n    await deleteManySkills(id);\r\n\r\n    // Now delete the category itself\r\n    return await CategoryRepo.deleteCategory(id);\r\n  } catch (error: any) {\r\n    throw new Error(\r\n      `Error deleting category and related data: ${error.message}`\r\n    );\r\n  }\r\n};\r\n"]}