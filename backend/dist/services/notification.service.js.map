{"version":3,"file":"notification.service.js","sourceRoot":"","sources":["../../src/services/notification.service.ts"],"names":[],"mappings":"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","sourcesContent":["import User from \"../models/user.model.js\";\r\nimport { AppNotification } from \"../models/notification.modal.js\";\r\nimport * as notificationRepository from \"../repositories/notification.repositry.js\";\r\nimport { findUserById } from \"../repositories/user.repositry.js\";\r\nimport { convertTo24HourFormat } from \"../utils/helperForNotService.js\";\r\nimport { ITask } from \"../models/task.modal.js\";\r\nimport { notificationEmitter } from \"../socket/socket.js\";\r\nimport { Server } from \"socket.io\";\r\n\r\nlet io: Server; // Store Socket.IO instance\r\n\r\n// Initialize Socket.IO instance (called from socket.ts)\r\nexport const initializeNotificationService = (_io: Server) => {\r\n  io = _io;\r\n  console.log(\"Notification service initialized with Socket.IO\");\r\n};\r\n\r\nexport interface TaskNotificationPayload {\r\n  _id: string;\r\n  userId: string;\r\n  type: \"message\" | \"incoming_call\" | \"missed_call\" | \"task_reminder\";\r\n  content: string;\r\n  relatedId: string;\r\n  senderId: string;\r\n  status: \"unread\" | \"read\";\r\n  notificationDate?: string;\r\n  notificationTime?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  taskContext?: {\r\n    contextType: \"profile\" | \"group\" | \"collaboration\" | \"userconnection\";\r\n    contextId: string;\r\n  };\r\n}\r\n\r\nexport const sendTaskNotification = async (\r\n  taskId: string,\r\n  specificUserId?: string,\r\n  notificationDate?: string,\r\n  notificationTime?: string\r\n): Promise<TaskNotificationPayload[]> => {\r\n  const notifications: TaskNotificationPayload[] = [];\r\n  try {\r\n    const task: ITask | null = await notificationRepository.getTasksForNotification(taskId);\r\n    if (!task) {\r\n      console.log(`No task found for _id ${taskId}`);\r\n      return notifications;\r\n    }\r\n\r\n    // Skip if task is completed or due date has passed\r\n    const currentTime = new Date();\r\n    if (task.status === \"completed\") {\r\n      console.log(`Skipping task ${task.taskId}: Task completed`);\r\n      return notifications;\r\n    }\r\n    if (new Date(task.dueDate) < currentTime) {\r\n      console.log(`Skipping task ${task.taskId}: Due date passed (${task.dueDate})`);\r\n      return notifications;\r\n    }\r\n\r\n    // Check if current time matches notificationDate and notificationTime\r\n    let isTimeToNotify = false;\r\n    if (task.notificationDate && task.notificationTime) {\r\n      const taskNotificationDate = new Date(task.notificationDate);\r\n      const isSameDay =\r\n        currentTime.getDate() === taskNotificationDate.getDate() &&\r\n        currentTime.getMonth() === taskNotificationDate.getMonth() &&\r\n        currentTime.getFullYear() === taskNotificationDate.getFullYear();\r\n      \r\n      if (isSameDay) {\r\n        const time24 = convertTo24HourFormat(task.notificationTime);\r\n        if (time24) {\r\n          const taskNotificationTime = new Date(currentTime);\r\n          taskNotificationTime.setHours(time24.hours, time24.minutes, 0, 0);\r\n          const timeDiff = Math.abs(currentTime.getTime() - taskNotificationTime.getTime());\r\n          isTimeToNotify = timeDiff <= 60 * 1000; // ±1 minute window\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`Task ${task.taskId} missing notificationDate or notificationTime`);\r\n      return notifications;\r\n    }\r\n\r\n    if (!isTimeToNotify) {\r\n      console.log(`Skipping task ${task.taskId}: Not time to notify`);\r\n      return notifications;\r\n    }\r\n\r\n    let recipients: string[] = [];\r\n    if (specificUserId) {\r\n      recipients = [specificUserId];\r\n    } else if (task.contextType === \"collaboration\") {\r\n      const collaborationIds = await notificationRepository.getMentorIdAndUserId(task.contextId.toString());\r\n      if (collaborationIds) {\r\n        recipients = [collaborationIds.userId, collaborationIds.mentorUserId].filter(\r\n          (id): id is string => id !== null\r\n        );\r\n      }\r\n    } else if (task.contextType === \"group\") {\r\n      const groupMembers = await notificationRepository.getGroupMembers(task.contextId.toString());\r\n      recipients = groupMembers.map(member => member.toString());\r\n    } else if (task.contextType === \"profile\") {\r\n      recipients = [task.createdBy.toString(), ...task.assignedUsers.map(id => id.toString())];\r\n      recipients = [...new Set(recipients)]; // Remove duplicates\r\n    }\r\n\r\n    console.log(`Task ${task.taskId} recipients: ${recipients.join(\", \")}`);\r\n    if (recipients.length === 0) {\r\n      console.log(`No recipients for task ${task.taskId}`);\r\n      return notifications;\r\n    }\r\n\r\n    const assigner = await findUserById(task.createdBy.toString());\r\n    const assignerName = assigner?.name || \"Unknown\";\r\n\r\n    for (const userId of recipients) {\r\n      let isConnected = true;\r\n      if (io) {\r\n        const room = `user_${userId}`;\r\n        const socketsInRoom = await io.in(room).allSockets();\r\n        isConnected = socketsInRoom.size > 0;\r\n        if (!isConnected) {\r\n          console.log(`Skipping notification for user ${userId} on task ${task.taskId}: User not connected`);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Check for existing notification\r\n      let notification = await notificationRepository.findTaskNotification(\r\n        userId,\r\n        task._id.toString(),\r\n        notificationDate,\r\n        notificationTime\r\n      );\r\n\r\n      if (notification && notification.status === \"read\") {\r\n        notification = await notificationRepository.updateNotificationStatus(notification._id.toString(), \"unread\");\r\n      }\r\n\r\n      if (!notification) {\r\n        const isAssigner = userId === task.createdBy.toString();\r\n        const content = isAssigner\r\n          ? `Reminder: Your task \"${task.name}\" is due soon`\r\n          : `Reminder: Task \"${task.name}\" assigned by ${assignerName} is due soon`;\r\n\r\n        const notificationData: Omit<AppNotification, \"_id\" | \"AppNotificationId\"> = {\r\n          userId: userId,\r\n          type: \"task_reminder\",\r\n          content,\r\n          relatedId: task._id.toString(),\r\n          senderId: task.createdBy.toString(),\r\n          status: \"unread\",\r\n          notificationDate: notificationDate ? new Date(notificationDate) : undefined,\r\n          notificationTime,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          taskContext: {\r\n            contextType: task.contextType,\r\n            contextId: task.contextId.toString(),\r\n          },\r\n        };\r\n\r\n        notification = await notificationRepository.createNotification(notificationData);\r\n        if (!notification) {\r\n          console.log(`Failed to create notification for user ${userId} on task ${taskId}`);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      const payload: TaskNotificationPayload = {\r\n        _id: notification._id.toString(),\r\n        userId: notification.userId.toString(),\r\n        type: notification.type,\r\n        content: notification.content,\r\n        relatedId: notification.relatedId,\r\n        senderId: notification.senderId.toString(),\r\n        status: notification.status,\r\n        notificationDate: notification.notificationDate?.toISOString().split(\"T\")[0],\r\n        notificationTime: notification.notificationTime,\r\n        createdAt: notification.createdAt,\r\n        updatedAt: notification.updatedAt,\r\n        taskContext: {\r\n          contextType: task.contextType,\r\n          contextId: task.contextId.toString(),\r\n        },\r\n      };\r\n\r\n      notifications.push(payload);\r\n      notificationEmitter.emit(\"notification\", payload);\r\n      console.log(`Emitted notification ${notification._id} to user ${userId} for task ${task.taskId}`);\r\n    }\r\n\r\n    return notifications;\r\n  } catch (error) {\r\n    console.error(`Error in sendTaskNotification for task ${taskId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const checkAndSendNotifications = async (): Promise<TaskNotificationPayload[]> => {\r\n  const allNotifications: TaskNotificationPayload[] = [];\r\n  // console.log(\"Entering checkAndSendNotifications\");\r\n\r\n  try {\r\n    const tasks: ITask[] = await notificationRepository.getAllTasksForNotification();\r\n    const currentTime = new Date();\r\n    // console.log(`Checking ${tasks.length} tasks for notifications at ${currentTime}`);\r\n\r\n    for (const task of tasks) {\r\n      // console.log(`Processing task ${task.taskId}: status=${task.status}, dueDate=${task.dueDate}`);\r\n\r\n      // Skip tasks without notificationDate or notificationTime\r\n      if (!task.notificationDate || !task.notificationTime) {\r\n        // console.log(`Skipping task ${task.taskId}: Missing notificationDate or notificationTime`);\r\n        continue;\r\n      }\r\n\r\n      // Skip tasks that are completed or past due\r\n      if (task.status === \"completed\") {\r\n        // console.log(`Skipping task ${task.taskId}: Task completed`);\r\n        continue;\r\n      }\r\n      if (new Date(task.dueDate) < currentTime) {\r\n        // console.log(`Skipping task ${task.taskId}: Due date passed (${task.dueDate})`);\r\n        continue;\r\n      }\r\n\r\n      // Send notification only at the specified time\r\n      const notifications = await sendTaskNotification(\r\n        task._id.toString(),\r\n        undefined,\r\n        task.notificationDate?.toISOString().split(\"T\")[0],\r\n        task.notificationTime\r\n      );\r\n      allNotifications.push(...notifications);\r\n      // console.log(`Processed task ${task.taskId}, generated ${notifications.length} notifications`);\r\n    }\r\n\r\n    // console.log(`checkAndSendNotifications returning ${allNotifications.length} notifications`);\r\n    return allNotifications;\r\n  } catch (error) {\r\n    console.error(`Error in checkAndSendNotifications:`, error);\r\n    return allNotifications;\r\n  }\r\n};\r\n\r\n// Start periodic checking every minute\r\nsetInterval(async () => {\r\n  try {\r\n    const notifications = await checkAndSendNotifications();\r\n    if (notifications.length > 0) {\r\n      console.log(`Generated ${notifications.length} notifications`);\r\n    } else {\r\n      console.log(\"No notifications generated\");\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error in periodic notification check:`, error);\r\n  }\r\n}, 60 * 1000); // 1 minute\r\n\r\n// Create a notification for a user (for non-task notifications)\r\nexport const sendNotification = async (\r\n  userId: string,\r\n  notificationType: AppNotification[\"type\"],\r\n  senderId: string,\r\n  relatedId: string,\r\n  contentType?: string,\r\n  callId?: string\r\n): Promise<AppNotification> => {\r\n  const sender = await User.findById(senderId).select(\"name\");\r\n  let content: string;\r\n\r\n  if (notificationType === \"message\") {\r\n    content = `New ${contentType || \"text\"} message from ${sender?.name || senderId}`;\r\n  } else if (notificationType === \"incoming_call\") {\r\n    const callType = contentType || \"call\";\r\n    content = `Incoming ${callType} call from ${sender?.name || senderId}`;\r\n  } else if (notificationType === \"missed_call\") {\r\n    content = `Missed ${contentType || \"call\"} call from ${sender?.name || senderId}`;\r\n  } else if (notificationType === \"task_reminder\") {\r\n    const task = await notificationRepository.getTasksForNotification(relatedId);\r\n    if (!task) {\r\n      content = `Task reminder from ${sender?.name || senderId}`;\r\n    } else {\r\n      const isAssigner = userId === senderId;\r\n      content = isAssigner\r\n        ? `Reminder: Your task \"${task.name}\" is due soon`\r\n        : `Reminder: Task \"${task.name}\" assigned by ${sender?.name || senderId} is due soon`;\r\n    }\r\n  } else {\r\n    content = `Notification from ${sender?.name || senderId}`;\r\n  }\r\n\r\n  // Check if user is connected before creating non-task notifications\r\n  if (io && notificationType !== \"task_reminder\") {\r\n    const socketsInRoom = await io.in(`user_${userId}`).allSockets();\r\n    if (socketsInRoom.size === 0) {\r\n      console.log(`User ${userId} is not connected, skipping non-task notification`);\r\n      throw new Error(`User ${userId} is not connected`);\r\n    }\r\n  }\r\n\r\n  const notification = await notificationRepository.createNotification({\r\n    userId,\r\n    type: notificationType,\r\n    content,\r\n    relatedId,\r\n    senderId,\r\n    status: \"unread\",\r\n    callId,\r\n    createdAt: new Date(),\r\n    updatedAt: new Date(),\r\n  });\r\n\r\n  console.log(\"Created Notification from service file:\", notification);\r\n  notificationEmitter.emit(\"notification\", {\r\n    _id: notification._id.toString(),\r\n    userId: notification.userId.toString(),\r\n    type: notification.type,\r\n    content: notification.content,\r\n    relatedId: notification.relatedId,\r\n    senderId: notification.senderId.toString(),\r\n    status: notification.status,\r\n    createdAt: notification.createdAt,\r\n    updatedAt: notification.updatedAt,\r\n  });\r\n\r\n  return notification;\r\n};\r\n\r\nexport const updateCallNotificationToMissed = async (\r\n  userId: string,\r\n  callId: string,\r\n  content: string\r\n): Promise<AppNotification | null> => {\r\n  const notification = await notificationRepository.updateNotificationToMissed(userId, callId, content);\r\n  if (notification) {\r\n    notificationEmitter.emit(\"notification.updated\", {\r\n      _id: notification._id.toString(),\r\n      userId: notification.userId.toString(),\r\n      type: notification.type,\r\n      content: notification.content,\r\n      relatedId: notification.relatedId,\r\n      senderId: notification.senderId.toString(),\r\n      status: notification.status,\r\n      createdAt: notification.createdAt,\r\n      updatedAt: notification.updatedAt,\r\n    });\r\n  }\r\n  return notification;\r\n};\r\n\r\nexport const getNotifications = async (userId: string): Promise<AppNotification[]> => {\r\n  return notificationRepository.findNotificationByUserId(userId);\r\n};\r\n\r\nexport const markNotificationAsRead = async (notificationId: string): Promise<AppNotification | null> => {\r\n  return notificationRepository.markNotificationAsRead(notificationId);\r\n};\r\n\r\nexport const getUnreadCount = async (userId: string): Promise<number> => {\r\n  return notificationRepository.getNotificationUnreadCount(userId);\r\n};"]}