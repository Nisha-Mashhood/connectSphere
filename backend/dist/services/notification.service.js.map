{"version":3,"file":"notification.service.js","sourceRoot":"","sources":["../../src/services/notification.service.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,sBAAsB,MAAM,2CAA2C,CAAC;AACpF,OAAO,OAAO,MAAM,yBAAyB,CAAC;AAU9C,kCAAkC;AAClC,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAAc,EAAE,YAA8B,EAAE,EAAE;IACxF,8CAA8C;IAC9C,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,QAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAClE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IACD,OAAO,sBAAsB,CAAC,gBAAgB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACvE,CAAC,CAAC;AAAA,CAAC;AAEH,0BAA0B;AAC1B,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAG,OAAe,EAAiB,EAAE;IAE5E,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,MAAM,sBAAsB,CAAC,uBAAuB,EAAE,CAAC;QACrE,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACjD,OAAO;QACT,CAAC;QAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,8CAA8C;YAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,wBAA4C,CAAC;YAEvE,8CAA8C;YAC9C,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,QAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;gBAClE,OAAO,CAAC,IAAI,CAAC,kCAAkC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC3D,SAAS;YACX,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC7B,KAAK,EAAE,qBAAqB,IAAI,CAAC,IAAI,GAAG;gBACxC,IAAI,EAAE,OAAO,IAAI,yBAAyB,IAAI,CAAC,IAAI,GAAG;gBACtD,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,mBAAmB;aACxC,CAAC,CAAC;YAEH,IAAI,CAAC;gBACH,MAAM,OAAO,CAAC,gBAAgB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBACtD,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YACzD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,IAAI,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC","sourcesContent":["import * as notificationRepository from \"../repositories/notification.repositry.js\";\r\nimport webPush from \"../utils/webPushUtil.js\";\r\n\r\nexport interface PushSubscription {\r\n  endpoint: string;\r\n  keys: {\r\n    auth: string;\r\n    p256dh: string;\r\n  };\r\n}\r\n\r\n//Store subscription details in DB\r\nexport const storeSubscription = async (taskId: string, subscription: PushSubscription) => {\r\n  // Validate subscription object before storing\r\n  if (!subscription || !subscription.endpoint || !subscription.keys) {\r\n    throw new Error(\"Invalid subscription object\");\r\n  }\r\n  return notificationRepository.saveSubscription(taskId, subscription);\r\n};;\r\n\r\n//Send a push notification\r\nexport const sendPushNotification = async ( message: string): Promise<void> => { //here taskId is not using anywhere so why it is needed\r\n  \r\n  try {\r\n    const tasks = await notificationRepository.getTasksForNotification();\r\n    if (!tasks || tasks.length === 0) {\r\n      console.log(\"No tasks with subscriptions found\");\r\n      return;\r\n    }\r\n\r\n    for (const task of tasks) {\r\n      // Validate subscription object before sending\r\n      const subscription = task.notificationSubscription as PushSubscription;\r\n\r\n      // Validate subscription object before sending\r\n      if (!subscription || !subscription.endpoint || !subscription.keys) {\r\n        console.warn(`Invalid subscription for task: ${task._id}`);\r\n        continue;\r\n      }\r\n\r\n      const payload = JSON.stringify({\r\n        title: `Reminder to task \"${task.name}\"`,\r\n        body: message || `Remember to complete \"${task.name}\"`,\r\n        icon: task.image || \"/default-icon.png\",\r\n      });\r\n\r\n      try {\r\n        await webPush.sendNotification(subscription, payload);\r\n        console.log(`Notification sent for Task: ${task._id}`);\r\n      } catch (error) {\r\n        console.error(`Error sending notification for task ${task._id}:`, error);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in sendPushNotification:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"]}