{"version":3,"file":"chat.service.js","sourceRoot":"","sources":["../../src/services/chat.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  findChatMessagesByCollaborationId,\r\n  findChatMessagesByUserConnectionId,\r\n  findChatMessagesByGroupId,\r\n  countMessagesByCollaborationId,\r\n  countMessagesByUserConnectionId,\r\n  countMessagesByGroupId,\r\n  countUnreadMessagesByGroupId,\r\n  countUnreadMessagesByCollaborationId,\r\n  countUnreadMessagesByUserConnectionId,\r\n} from \"../repositories/chat.repository.js\";\r\nimport { IChatMessage } from \"../Interfaces/models/IChatMessage.js\";\r\nimport { findContactById, findContactsByUserId } from \"../repositories/contacts.repository.js\";\r\nimport mongoose from \"mongoose\";\r\n\r\nexport const getChatMessagesService = async (\r\n  contactId?: string,\r\n  groupId?: string,\r\n  page: number = 1,\r\n  limit: number = 10\r\n): Promise<{ messages: IChatMessage[]; total: number }> => {\r\n  try {\r\n    if (!contactId && !groupId) {\r\n      throw new Error(\"Contact ID or Group ID is required to fetch chat messages\");\r\n    }\r\n    if (contactId && groupId) {\r\n      throw new Error(\"Provide only one of Contact ID or Group ID, not both\");\r\n    }\r\n\r\n    let messages: IChatMessage[] = [];\r\n    let total = 0;\r\n\r\n    if (groupId) {\r\n      messages = await findChatMessagesByGroupId(groupId, page, limit);\r\n      total = await countMessagesByGroupId(groupId);\r\n    } else if (contactId) {\r\n      const contact = await findContactById(contactId);\r\n      if (!contact) throw new Error(\"Invalid contact\");\r\n\r\n      if (contact.type === \"user-mentor\" && contact.collaborationId) {\r\n        messages = await findChatMessagesByCollaborationId(contact.collaborationId.toString(), page, limit);\r\n        total = await countMessagesByCollaborationId(contact.collaborationId.toString());\r\n      } else if (contact.type === \"user-user\" && contact.userConnectionId) {\r\n        messages = await findChatMessagesByUserConnectionId(contact.userConnectionId.toString(), page, limit);\r\n        total = await countMessagesByUserConnectionId(contact.userConnectionId.toString());\r\n      } else {\r\n        throw new Error(\"No valid connection ID found for contact\");\r\n      }\r\n    }\r\n\r\n    return { messages: messages.reverse(), total }; \r\n  } catch (error: any) {\r\n    throw new Error(`Service error fetching chat messages: ${error.message}`);\r\n  }\r\n};\r\n\r\n\r\nexport const getUnreadMessageCountsService = async (userId: string): Promise<{\r\n  [key: string]: number;\r\n}> => {\r\n  if (!mongoose.Types.ObjectId.isValid(userId)) {\r\n    throw new Error(\"Invalid user ID: must be a 24 character hex string\");\r\n  }\r\n\r\n  try {\r\n    const contacts = await findContactsByUserId(userId);\r\n    console.log(\"contacts from service : \",contacts);\r\n    const unreadCounts: { [key: string]: number } = {};\r\n\r\n    for (const contact of contacts) {\r\n      let count = 0;\r\n      try {\r\n        if (contact.type === \"group\" && contact.groupId) {\r\n          const groupIdStr = contact.groupId._id.toString();\r\n          count = await countUnreadMessagesByGroupId(groupIdStr, userId);\r\n          console.log(`Count of unread messages for group ${groupIdStr}: ${count}`);\r\n          unreadCounts[`group_${groupIdStr}`] = count;\r\n        } else if (contact.type === \"user-mentor\" && contact.collaborationId) {\r\n          const collabIdStr = contact.collaborationId._id.toString();\r\n          count = await countUnreadMessagesByCollaborationId(collabIdStr, userId);\r\n          console.log(`Count of unread messages for collaboration ${collabIdStr}: ${count}`);\r\n          unreadCounts[`user-mentor_${collabIdStr}`] = count;\r\n        } else if (contact.type === \"user-user\" && contact.userConnectionId) {\r\n          const userConnIdStr = contact.userConnectionId._id.toString();\r\n          count = await countUnreadMessagesByUserConnectionId(userConnIdStr, userId);\r\n          console.log(`Count of unread messages for user-user ${userConnIdStr}: ${count}`);\r\n          unreadCounts[`user-user_${userConnIdStr}`] = count;\r\n        } else {\r\n          console.warn(`Skipping contact with invalid ID or type: ${JSON.stringify(contact)}`);\r\n        }\r\n      } catch (error: any) {\r\n        console.error(`Error processing contact ${contact._id}: ${error.message}`);\r\n        const id = contact.groupId?.toString() || contact.collaborationId?.toString() || contact.userConnectionId?.toString();\r\n        unreadCounts[`${contact.type}_${id || \"unknown\"}`] = 0;\r\n      }\r\n    }\r\n\r\n    console.log(\"Unread message count from service:\", unreadCounts);\r\n    return unreadCounts;\r\n  } catch (error: any) {\r\n    console.error(\"Service error:\", error.message);\r\n    throw new Error(`Service error fetching unread message counts: ${error.message}`);\r\n  }\r\n};"]}