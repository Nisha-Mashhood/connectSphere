{"version":3,"file":"chat.service.js","sourceRoot":"","sources":["../../src/services/chat.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iCAAiC,EACjC,kCAAkC,EAClC,yBAAyB,EACzB,8BAA8B,EAC9B,+BAA+B,EAC/B,sBAAsB,GACvB,MAAM,oCAAoC,CAAC;AAE5C,OAAO,EAAE,eAAe,EAAE,MAAM,wCAAwC,CAAC;AAEzE,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EACzC,SAAkB,EAClB,OAAgB,EAChB,OAAe,CAAC,EAChB,QAAgB,EAAE,EACoC,EAAE;IACxD,IAAI,CAAC;QACH,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAC/E,CAAC;QACD,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,QAAQ,GAAmB,EAAE,CAAC;QAClC,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,OAAO,EAAE,CAAC;YACZ,QAAQ,GAAG,MAAM,yBAAyB,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACjE,KAAK,GAAG,MAAM,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAChD,CAAC;aAAM,IAAI,SAAS,EAAE,CAAC;YACrB,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,SAAS,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO;gBAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAEjD,IAAI,OAAO,CAAC,IAAI,KAAK,aAAa,IAAI,OAAO,CAAC,eAAe,EAAE,CAAC;gBAC9D,QAAQ,GAAG,MAAM,iCAAiC,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBACpG,KAAK,GAAG,MAAM,8BAA8B,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnF,CAAC;iBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;gBACpE,QAAQ,GAAG,MAAM,kCAAkC,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBACtG,KAAK,GAAG,MAAM,+BAA+B,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrF,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC;QAED,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,2BAA2B;IAC7E,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yCAAyC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5E,CAAC;AACH,CAAC,CAAC","sourcesContent":["import {\r\n  findChatMessagesByCollaborationId,\r\n  findChatMessagesByUserConnectionId,\r\n  findChatMessagesByGroupId,\r\n  countMessagesByCollaborationId,\r\n  countMessagesByUserConnectionId,\r\n  countMessagesByGroupId,\r\n} from \"../repositories/chat.repository.js\";\r\nimport { IChatMessage } from \"../models/chat.model.js\";\r\nimport { findContactById } from \"../repositories/contacts.repository.js\";\r\n\r\nexport const getChatMessagesService = async (\r\n  contactId?: string,\r\n  groupId?: string,\r\n  page: number = 1,\r\n  limit: number = 10\r\n): Promise<{ messages: IChatMessage[]; total: number }> => {\r\n  try {\r\n    if (!contactId && !groupId) {\r\n      throw new Error(\"Contact ID or Group ID is required to fetch chat messages\");\r\n    }\r\n    if (contactId && groupId) {\r\n      throw new Error(\"Provide only one of Contact ID or Group ID, not both\");\r\n    }\r\n\r\n    let messages: IChatMessage[] = [];\r\n    let total = 0;\r\n\r\n    if (groupId) {\r\n      messages = await findChatMessagesByGroupId(groupId, page, limit);\r\n      total = await countMessagesByGroupId(groupId);\r\n    } else if (contactId) {\r\n      const contact = await findContactById(contactId);\r\n      if (!contact) throw new Error(\"Invalid contact\");\r\n\r\n      if (contact.type === \"user-mentor\" && contact.collaborationId) {\r\n        messages = await findChatMessagesByCollaborationId(contact.collaborationId.toString(), page, limit);\r\n        total = await countMessagesByCollaborationId(contact.collaborationId.toString());\r\n      } else if (contact.type === \"user-user\" && contact.userConnectionId) {\r\n        messages = await findChatMessagesByUserConnectionId(contact.userConnectionId.toString(), page, limit);\r\n        total = await countMessagesByUserConnectionId(contact.userConnectionId.toString());\r\n      } else {\r\n        throw new Error(\"No valid connection ID found for contact\");\r\n      }\r\n    }\r\n\r\n    return { messages: messages.reverse(), total }; // Reverse for oldest first\r\n  } catch (error: any) {\r\n    throw new Error(`Service error fetching chat messages: ${error.message}`);\r\n  }\r\n};\r\n"]}