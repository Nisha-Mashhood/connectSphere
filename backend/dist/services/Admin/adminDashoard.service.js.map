{"version":3,"file":"adminDashoard.service.js","sourceRoot":"","sources":["../../../src/services/Admin/adminDashoard.service.ts"],"names":[],"mappings":"AAAA,OAAO,eAAe,MAAM,sDAAsD,CAAC;AAEnF,MAAM,YAAY;IAChB,KAAK,CAAC,kBAAkB;QACtB,OAAO,MAAM,eAAe,CAAC,kBAAkB,EAAE,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,oBAAoB;QACxB,OAAO,MAAM,eAAe,CAAC,oBAAoB,EAAE,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,OAAO,MAAM,eAAe,CAAC,eAAe,EAAE,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,6BAA6B;QACjC,OAAO,MAAM,eAAe,CAAC,6BAA6B,EAAE,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,4BAA4B;QAChC,OAAO,MAAM,eAAe,CAAC,4BAA4B,EAAE,CAAC;IAC9D,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,IAAY;QACrD,OAAO,MAAM,eAAe,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,UAAkB,EAAE,IAAY;QAClD,OAAO,MAAM,eAAe,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,KAAc;QAC3C,OAAO,MAAM,eAAe,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,KAAa;QAC/B,OAAO,MAAM,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,KAAa;QACzC,OAAO,MAAM,eAAe,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;CACF;AAED,eAAe,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import AdminRepository from \"../../repositories/Admin/adminDashboard.repositry.js\";\r\n\r\nclass AdminService {\r\n  async getTotalUsersCount() {\r\n    return await AdminRepository.getTotalUsersCount();\r\n  }\r\n\r\n  async getTotalMentorsCount() {\r\n    return await AdminRepository.getTotalMentorsCount();\r\n  }\r\n\r\n  async getTotalRevenue() {\r\n    return await AdminRepository.getTotalRevenue();\r\n  }\r\n\r\n  async getPendingMentorRequestsCount() {\r\n    return await AdminRepository.getPendingMentorRequestsCount();\r\n  }\r\n\r\n  async getActiveCollaborationsCount() {\r\n    return await AdminRepository.getActiveCollaborationsCount();\r\n  }\r\n\r\n  async getRevenueTrends(timeFormat: string, days: number) {\r\n    return await AdminRepository.getRevenueTrends(timeFormat, days);\r\n  }\r\n\r\n  async getUserGrowth(timeFormat: string, days: number) {\r\n    return await AdminRepository.getUserGrowth(timeFormat, days);\r\n  }\r\n\r\n  async getPendingMentorRequests(limit?: number) {\r\n    return await AdminRepository.getPendingMentorRequests(limit);\r\n  }\r\n\r\n  async getTopMentors(limit: number) {\r\n    return await AdminRepository.getTopMentors(limit);\r\n  }\r\n\r\n  async getRecentCollaborations(limit: number) {\r\n    return await AdminRepository.getRecentCollaborations(limit);\r\n  }\r\n}\r\n\r\nexport default new AdminService();"]}