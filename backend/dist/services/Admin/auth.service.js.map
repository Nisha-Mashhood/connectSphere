{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../src/services/Admin/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  createAdmin,\r\n  findAdminByEmail,\r\n  updatePassword,\r\n  updateRefreshToken,\r\n  findOrCreateAdmin,\r\n} from \"../../repositories/Admin/admin.repositry.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { generateAccessToken,generateRefreshToken, verifyRefreshToken, removeRefreshTokenForAdmin } from \"../../utils/jwt.utils.js\";\r\nimport { generateOTP } from \"../../utils/otp.utils.js\";\r\nimport { sendEmail } from \"../../utils/email.utils.js\";\r\n\r\n// Handle Registration with details \r\nexport const sigupDetails = async (data: {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}) => {\r\n  const { name, email, password } = data;\r\n  //console.log(\"data at service file :\",data);\r\n  // Check if the email already exists\r\n  const AdminExists = await findAdminByEmail(email);\r\n  if (AdminExists) throw new Error(\"Admin already exists.\");\r\n\r\n  //create new Admin with the passed details\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n  const newAdmin = await createAdmin({  name, email, password:hashedPassword });\r\n  return newAdmin;\r\n};\r\n\r\n\r\n// Handle login logic\r\nexport const loginAdmin = async (email: string, password: string) => {\r\n  const Admin = await findAdminByEmail(email);\r\n  if (!Admin) throw new Error(\"Admin not found\");\r\n\r\n\r\n  // Ensure Admin.password is defined\r\n  if (!Admin.password) {\r\n    throw new Error(\"Password not set for Admin\");\r\n  }\r\n\r\n  // Check if password matches\r\n  const isMatch = await bcrypt.compare(password, Admin.password);\r\n  if (!isMatch) throw new Error(\"Invalid credentials\");\r\n\r\n  // Generate JWT token\r\n  const accessToken = generateAccessToken({ AdminId: Admin._id });\r\n  const refreshToken = generateRefreshToken({ AdminId: Admin._id });\r\n\r\n  // Save the refresh token in the database\r\n  await updateRefreshToken(Admin._id.toString(), refreshToken);\r\n  return { Admin, accessToken, refreshToken };\r\n};\r\n\r\n\r\n// Handle refresh token logic\r\nexport const refreshToken = async (refreshToken: string) => {\r\n  try {\r\n    // Verify the refresh token\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n\r\n    // Generate a new access token\r\n    const newAccessToken = generateAccessToken({ AdminId: decoded.AdminId });\r\n\r\n    return { newAccessToken };\r\n  } catch (error) {\r\n    throw new Error(\"Invalid or expired refresh token.\");\r\n  }\r\n};\r\n\r\n\r\nexport const findOrCreateAdminforPassport = async (profile: any, provider: string) =>{\r\n  if(!profile) throw new Error('Profile not found');\r\n  if(!provider) throw new Error('Provider not defined');\r\n\r\n  let Admin = await findOrCreateAdmin(profile, provider);\r\n\r\n  return Admin;\r\n}\r\n\r\n//Handle forgot password\r\nconst otpStore: Record<string, string> = {}; // Temporary storage for OTPs\r\n\r\nexport const forgotPassword = async (email: string) => {\r\n  const Admin = await findAdminByEmail(email);\r\n  if (!Admin) throw new Error(\"Admin not found.\");\r\n\r\n  const otp = generateOTP();\r\n  otpStore[email] = otp; // Save OTP in memory\r\n  await sendEmail(email, \"Password Reset OTP\", `Your OTP is ${otp}`);\r\n  \r\n  // Return the OTP for testing (remove in production)\r\n  return otp;\r\n};\r\n\r\n//Handle veify OTP logic\r\nexport const verifyOTP = async (email: string, otp: string) => {\r\n  if (otpStore[email] !== otp) throw new Error(\"Invalid or expired OTP.\");\r\n  delete otpStore[email]; // OTP is used once\r\n  return generateAccessToken({ email }, \"10m\"); // Temporary token for resetting password\r\n};\r\n\r\n//Handle reset password\r\nexport const resetPassword = async (email: string, newPassword: string) => {\r\n  const Admin = await findAdminByEmail(email);\r\n  if (!Admin) throw new Error(\"Admin not found.\");\r\n\r\n  //Compare the old password with the new one\r\n  const isSamePassword = await bcrypt.compare(newPassword, Admin.password || \"\");\r\n  if (isSamePassword)\r\n    throw new Error(\"New password cannot be the same as the old password.\");\r\n\r\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n  await updatePassword(Admin._id.toString(), hashedPassword);\r\n};\r\n\r\n//Handle logout\r\nexport const logout = async(Adminemail:string) =>{;\r\n  try {\r\n    // Call the removeRefreshToken function \r\n    await removeRefreshTokenForAdmin(Adminemail);\r\n  } catch (error: any) {\r\n    throw new Error('Error during logout: ' + error.message);\r\n  }\r\n}\r\n"]}