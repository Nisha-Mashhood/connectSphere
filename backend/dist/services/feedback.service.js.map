{"version":3,"file":"feedback.service.js","sourceRoot":"","sources":["../../src/services/feedback.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { findCollabById, updateCollabFeedback } from \"../repositories/collaboration.repositry.js\";\r\nimport { IFeedback } from \"../models/feedback.modal.js\";\r\nimport * as FeedbackRepository from \"../repositories/feeback.repositry.js\";\r\n\r\nexport const createFeedback = async (\r\n  feedbackData: Partial<IFeedback>\r\n): Promise<IFeedback> => {\r\n  try {\r\n    // Ensure collaborationId is valid\r\n    const collabId = feedbackData.collaborationId?.toString();\r\n    if (!collabId) {\r\n      throw new Error(\"Collaboration ID is required\");\r\n    }\r\n\r\n    // // Check if feedback already exists for this collaboration\r\n    // const existingFeedback = await FeedbackRepository.getFeedbackByCollaborationId(collabId);\r\n    // console.log(existingFeedback);\r\n    // if (existingFeedback) {\r\n    //   throw new Error(\"Feedback already exists for this collaboration\");\r\n    // }\r\n\r\n    // Find the collaboration details\r\n    const collabDetails = await findCollabById(collabId);\r\n    if (!collabDetails) {\r\n      throw new Error(\"Collaboration not found\");\r\n    }\r\n\r\n    // Check if the collaboration is completed\r\n    const today = new Date();\r\n    if (collabDetails.endDate && new Date(collabDetails.endDate) <= today) {\r\n      await updateCollabFeedback(collabId);\r\n    }\r\n\r\n    // Create feedback entry\r\n    return await FeedbackRepository.createFeedback(feedbackData);\r\n\r\n  } catch (error:any) {\r\n    console.log(error)\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const getMentorFeedbacks = async (mentorId: string) => {\r\n  try {\r\n    const feedbacks = await FeedbackRepository.getFeedbacksByMentorId(mentorId);\r\n    const averageRating = await FeedbackRepository.getMentorAverageRating(\r\n      mentorId\r\n    );\r\n\r\n    return {\r\n      feedbacks,\r\n      averageRating,\r\n      totalFeedbacks: feedbacks.length,\r\n    };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserFeedbacks = async (userId: string) => {\r\n  try {\r\n    return await FeedbackRepository.getFeedbacksByUserId(userId);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getFeedbackByRole = async(role: \"user\" | \"mentor\", userId: string, collaborationId: string) =>{\r\n  if (!role || !userId || !collaborationId) {\r\n    throw new Error(\"Invalid request parameters.\");\r\n  }\r\n\r\n  // Retrieve all feedbacks for the given collaboration ID\r\n  const feedbacks: IFeedback[] = await FeedbackRepository.getFeedbackByCollaborationId(collaborationId);\r\n\r\n  if (!feedbacks.length) {\r\n    throw new Error(\"No feedback found for this collaboration.\");\r\n  }\r\n\r\n  // Filter feedback based on the provided role and userId\r\n  const filteredFeedback = feedbacks.find(feedback => {\r\n    if (feedback.givenBy === role) {\r\n      if (role === \"user\" && feedback.userId.toString() === userId) {\r\n        return true;\r\n      }\r\n      if (role === \"mentor\" && feedback.mentorId.toString() === userId) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (!filteredFeedback) {\r\n    throw new Error(\"Feedback not found or does not match the given role and user ID.\");\r\n  }\r\n\r\n  return filteredFeedback;\r\n}"]}