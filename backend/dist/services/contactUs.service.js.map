{"version":3,"file":"contactUs.service.js","sourceRoot":"","sources":["../../src/services/contactUs.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,OAAO,KAAK,iBAAiB,MAAM,wCAAwC,CAAC;AAC5E,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAE7C,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,IAI1C,EAA4B,EAAE;IAC3B,MAAM,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC;IACxC,IAAG,CAAC,aAAa,EAAC,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IACH,IAAI,CAAC;QACH,MAAM,cAAc,GAAG,MAAM,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAE1E,sBAAsB;QACtB,MAAM,SAAS,GAAG,gCAAgC,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,KAAK,cAAc,IAAI,CAAC,OAAO,gBAAgB,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC;QACzJ,MAAM,SAAS,CACb,aAAa,EACb,wCAAwC,EACxC,SAAS,CACV,CAAC;QAEF,OAAO,cAAc,CAAC;IACxB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IACxE,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,IAAgC,EAAE;IAC1E,IAAI,CAAC;QACH,OAAO,MAAM,iBAAiB,CAAC,qBAAqB,EAAE,CAAC;IACzD,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,mCAAmC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IACvE,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAAE,gBAAwB,EAAE,SAAkD,EAA4B,EAAE;IACxI,IAAI,CAAC;QACH,MAAM,cAAc,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;QAEnF,mBAAmB;QACnB,MAAM,SAAS,CACb,SAAS,CAAC,KAAK,EACf,0BAA0B,EAC1B,SAAS,cAAc,CAAC,IAAI,QAAQ,SAAS,CAAC,YAAY,uCAAuC,CAClG,CAAC;QAEF,OAAO,cAAc,CAAC;IACxB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { sendEmail } from \"../core/Utils/Email.js\";\r\nimport { IContactMessage } from \"../Interfaces/models/IContactMessage.js\";\r\nimport * as ContactRepository from '../repositories/contactUs.repositry.js';\r\nimport config from \"../config/env.config.js\";\r\n\r\nexport const createContactMessage = async (data: {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}): Promise<IContactMessage> => {\r\n    const ReceiverEmail = config.adminEmail;\r\n    if(!ReceiverEmail){\r\n        throw new Error(\"Receiver Email required\");\r\n    }\r\n  try {\r\n    const contactMessage = await ContactRepository.createContactMessage(data);\r\n\r\n    // Send email to admin\r\n    const emailText = `New Contact Message\\n\\nName: ${data.name}\\nEmail: ${data.email}\\nMessage: ${data.message}\\n\\nSent at: ${new Date().toLocaleString()}`;\r\n    await sendEmail(\r\n      ReceiverEmail,\r\n      \"New Contact Message from ConnectSphere\",\r\n      emailText\r\n    );\r\n\r\n    return contactMessage;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error processing contact message: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const getAllContactMessages = async (): Promise<IContactMessage[]> => {\r\n  try {\r\n    return await ContactRepository.getAllContactMessages();\r\n  } catch (error: any) {\r\n    throw new Error(\"Error fetching contact messages: \" + error.message);\r\n  }\r\n};\r\n\r\nexport const sendReply = async (contactMessageId: string, replyData: { email: string; replyMessage: string }): Promise<IContactMessage> => {\r\n  try {\r\n    const updatedMessage = await ContactRepository.updateReplyStatus(contactMessageId);\r\n\r\n    // Send reply email\r\n    await sendEmail(\r\n      replyData.email,\r\n      \"Reply from ConnectSphere\",\r\n      `Hello ${updatedMessage.name},\\n\\n${replyData.replyMessage}\\n\\nBest regards,\\nConnectSphere Team`\r\n    );\r\n\r\n    return updatedMessage;\r\n  } catch (error: any) {\r\n    throw new Error(\"Error sending reply: \" + error.message);\r\n  }\r\n};"]}